<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>计算机系统概述</title>
      <link href="/posts/47ad01c5/"/>
      <url>/posts/47ad01c5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>计算机组成原理这门课是研究计算机各硬件是如何协调工作的!</p><p>电子数字计算机的硬件是由数字逻辑电路构成，所以只能处理数字信号，数字信号只有两种状态：开/关，在数字电路中常用低/高电平分别表示0/1，因此计算机硬件唯一能识别的数据就是二进制0/1</p><p>为进一步了解计算机硬件实现逻辑，可以学习<code>数字电路</code>知识?</p><ul><li>数字、文字、图像如何用二进制表示？</li><li>CPU如何对二进制进行加减乘除？</li><li>如何存储这些二进制数？</li><li>如何从内存中取出想要的数据？</li><li>CPU如何识别和执行我们写的程序？</li></ul></blockquote><h1 id="计算机发展历程"><a href="#计算机发展历程" class="headerlink" title="计算机发展历程"></a>计算机发展历程</h1><h2 id="什么是计算机系统"><a href="#什么是计算机系统" class="headerlink" title="什么是计算机系统"></a>什么是计算机系统</h2><ol><li><p>计算机与计算机系统</p><ol><li><p>计算机：指计算机硬件系统，即日常生活中所说的裸机（主机）和外设等纯硬件部分</p></li><li><p>计算机系统：即包含计算机硬件系统和计算机软件系统</p><ol><li>硬件系统</li><li>软件系统<ol><li>BIOS基本输入输出系统：用于操作系统的自检和启动</li><li>系统软件：用来管理整个计算机系统<ol><li>操作系统</li><li>数据库管理系统DBMS</li><li>标准程序库</li><li>网络软件（TCP/IP协议等）</li><li>语言处理程序</li><li>服务程序等</li></ol></li><li>应用软件：按任务需要编制成的各种程序</li></ol></li></ol><blockquote><p>日常生活中，我们所说的计算机通常指计算机系统，因为购买的电脑到用户手中一般直接装好了BIOS，操作系统和其他常用应用程序等软件系统</p></blockquote></li></ol></li><li><p>计算机系统的性能</p><ol><li>由于计算机系统由硬件系统和软件系统组成，因此计算机系统性能的好坏也取决于软硬件功能的总和</li></ol></li></ol><h2 id="计算机硬件的发展"><a href="#计算机硬件的发展" class="headerlink" title="计算机硬件的发展"></a>计算机硬件的发展</h2><h3 id="计算机硬件的四代变化"><a href="#计算机硬件的四代变化" class="headerlink" title="计算机硬件的四代变化"></a>计算机硬件的四代变化</h3><blockquote><p>1946，世界上第一台电子数字计算机ENIAC问世</p></blockquote><ol><li>第一代计算机：1946-1957——电子管时代</li><li>第二代计算机：1958-1964——晶体管时代</li><li>第三代计算机：1965-1971——中小规模集成电路时代</li><li>第四代计算机：1972-至今——超大规模集成电路时代，开始出现微处理器、微型计算机、个人计算机</li><li>第五代计算机：同人工智能结合的智能计算机系统</li></ol><h3 id="微处理器的发展"><a href="#微处理器的发展" class="headerlink" title="微处理器的发展"></a>微处理器的发展</h3><p><img src="/images/计算机系统概述/image-20220409143922181.png" alt="Intel微处理器发展"></p><h3 id="硬件历史"><a href="#硬件历史" class="headerlink" title="硬件历史"></a>硬件历史</h3><ol><li>1947年，贝尔实验室，发明了<code>晶体管</code><img src="/images/计算机系统概述/image-20220409144523518.png" alt="肖克利"></li><li>1955年，肖克利在硅谷创建肖克利实验室股份有限公司</li><li>1957年八叛徒创立仙童半导体公司<img src="/images/计算机系统概述/image-20220409144654025.png" alt="肖克利公司成员离开并创立仙童半导体公司"></li><li>1959年，仙童半导体公司发明集成电路<img src="/images/计算机系统概述/image-20220409144757762.png" alt="仙童半导体公司"></li><li>1968年，摩尔等人离开仙童，创立Intel</li><li>1969年，仙童销售部负责人桑德斯离开仙童，创立AMD</li><li>1970年，仙童公司生产出第一个较大容量的半导体存储设备</li></ol><h2 id="计算机软件的发展"><a href="#计算机软件的发展" class="headerlink" title="计算机软件的发展"></a>计算机软件的发展</h2><ol><li>编程语言<ol><li>机器语言</li><li>汇编语言</li><li>高级语言<ol><li>FORTRAN</li><li>PASCAL</li><li>C++</li><li>Java</li><li>python</li><li>PHP</li><li>Go</li></ol></li></ol></li><li>操作系统 <ol><li>UNIX</li><li>LINUX</li><li>DOS——命令行界面</li><li>Windows</li><li>MAC OS</li><li>Android</li><li>IOS</li></ol></li></ol><h2 id="目前的发展趋势"><a href="#目前的发展趋势" class="headerlink" title="目前的发展趋势"></a>目前的发展趋势</h2><blockquote><p>两极分化：</p><ul><li>一极是微型计算机向更微型化、网络化、高性能、多用途方向发展；</li><li>另一极是巨型机向更巨型化、超高速、并行处理、智能化方向发展</li></ul></blockquote><h1 id="计算机硬件的基本组成"><a href="#计算机硬件的基本组成" class="headerlink" title="计算机硬件的基本组成"></a>计算机硬件的基本组成</h1><h2 id="早期的冯·诺依曼机"><a href="#早期的冯·诺依曼机" class="headerlink" title="早期的冯·诺依曼机"></a>早期的冯·诺依曼机</h2><blockquote><p>冯诺依设计的第一台电子数字计算机ENIAC，通过手动接线来控制计算机计算，很不方便，计算速度就被手动接线降低了，为了解决这个问题，冯·诺依曼就提出了<code>存储程序</code>的概念</p><h3 id="存储程序："><a href="#存储程序：" class="headerlink" title="存储程序："></a>存储程序：</h3><ul><li>指将指令以二进制代码的形式事先输入计算机的主存储器，然后按其在存储器中首地址执行程序的第一条指令，以后就按该程序的规定顺序执行其他指令，直到程序执行结束。</li></ul></blockquote><p><img src="/images/计算机系统概述/image-20220409161038757.png" alt="早期的冯诺依曼机"></p><p>冯诺依曼计算机的特点：</p><ol><li>计算机由五大部件组成</li><li>指令和数据以同等地位存于存储器，可按地址寻访</li><li>指令和数据用二进制表示</li><li>指令由操作码和地址组成</li><li>存储程序</li><li><strong>以运算器为中心</strong>：输入/输出设备与存储器之间的数据传送通过运算器完成</li></ol><h2 id="现代计算机的结构"><a href="#现代计算机的结构" class="headerlink" title="现代计算机的结构"></a>现代计算机的结构</h2><p><img src="/images/计算机系统概述/image-20220409194208771.png" alt="现代计算机结构"></p><p><img src="/images/计算机系统概述/image-20220409194504824.png" alt="现代计算机结构"></p><h2 id="计算机的五大功能部件"><a href="#计算机的五大功能部件" class="headerlink" title="计算机的五大功能部件"></a>计算机的五大功能部件</h2><blockquote><ol><li>运算器</li><li>控制器</li><li>存储器（主存+辅存-辅存属于外设）</li><li>输入设备</li><li>输出设备</li></ol></blockquote><h3 id="主存储器-内存-的基本组成"><a href="#主存储器-内存-的基本组成" class="headerlink" title="主存储器(内存)的基本组成"></a>主存储器(内存)的基本组成</h3><blockquote><p><img src="/images/计算机系统概述/image-20220409200725183.png" alt="主存储器的结构"></p><ul><li>数据在存储体内按地址存储</li><li>MAR位数反映存储单元的个数</li><li>MDR位数=存储字长</li></ul></blockquote><ol><li>主存储器的数据写入与读出过程</li><li>存储器的一些概念：<ol><li>存储单元：每个存储单元存放一串二进制代码</li><li>存储字：存储单元中二进制代码的组合</li><li>存储字长：存储单元中二进制代码的位数</li><li>存储元：即存储二进制的电子元件，每个存储元可存1 bit</li></ol></li></ol><h3 id="运算器的基本组成"><a href="#运算器的基本组成" class="headerlink" title="运算器的基本组成"></a>运算器的基本组成</h3><blockquote><p><img src="/images/计算机系统概述/image-20220409202718483.png" alt="运算器的结构"></p></blockquote><h3 id="控制器的基本组成"><a href="#控制器的基本组成" class="headerlink" title="控制器的基本组成"></a>控制器的基本组成</h3><blockquote><p><img src="/images/计算机系统概述/image-20220409202854345.png" alt="控制器的组成"><img src="/images/计算机系统概述/image-20220409203231172.png" alt="控制器的作用"></p></blockquote><h1 id="思考问题"><a href="#思考问题" class="headerlink" title="思考问题"></a>思考问题</h1><ol><li>计算机由哪几部分组成？以哪部分为中心？</li><li>主频高的CPU一定比主频低的CPU快吗？为什么？</li><li>翻译程序、汇编程序、编译程序、解释程序有什么区别？各自的特性是什么？</li><li>不同级别的语言编写的程序有什么区别？哪种语言编写的程序能被硬件直接执行？</li></ol>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机中数据的表示与运算</title>
      <link href="/posts/37cc9d5a/"/>
      <url>/posts/37cc9d5a/</url>
      
        <content type="html"><![CDATA[<h1 id="数据的表示-数制与编码"><a href="#数据的表示-数制与编码" class="headerlink" title="数据的表示-数制与编码"></a>数据的表示-数制与编码</h1><blockquote><p>本节主要说明数据在计算机中是由二进制编码表示的，具体<code>数值</code>在计算机中以二进制数形式的表示方法详看定点数与浮点数表示方法</p><ul><li>在计算机系统内部，所有的信息都适用二进制进行编码的，为什么?<ul><li>为什么计算机使用二进制数?<ul><li>可使用两个稳定状态的物理器件表示</li><li>0,1正好对应逻辑值 假、真。方便实现逻辑运算</li><li>可很方便地使用逻辑门电路实现算术运算</li></ul></li></ul></li><li>计算机中数据是如何表示的?<ul><li>数据的表示是通过<code>二进制</code> <code>编码</code>实现的，通过<code>数制</code>完成二进制数与十进制数的编码转换，通过指定一组二进制数编码日常生活中的字符</li><li>数值在计算机中是如何表示的?<ul><li>数值的编码：通过进位计数制完成与日常生活中的十进制数转换，通过八进制和十六进制简短化二进制数据表示</li><li>数值符号的编码：对于数值的符号也通过符号数字化处理完成，实现有符号数值的编码表示</li></ul></li><li>字符与字符串在计算机中是如何表示的?<ul><li>字符编码：通过特定的一组二进制数映射编码来表示字符</li><li>字符串编码：通过对应字符的二进制编码连续存储表示，并以字符串结束标志<code>\0</code>表示字符串的结束和长度</li></ul></li></ul></li></ul></blockquote><h2 id="数制-数值数据编码规则-进位计数制"><a href="#数制-数值数据编码规则-进位计数制" class="headerlink" title="数制(数值数据编码规则)-进位计数制"></a>数制(数值数据编码规则)-进位计数制</h2><blockquote><p>r进制数：基数为r，每个数码位可能出现r种字符。逢r进1</p></blockquote><h3 id="常用数制"><a href="#常用数制" class="headerlink" title="常用数制"></a>常用数制</h3><div class="table-container"><table><thead><tr><th style="text-align:center">进位计数制</th><th style="text-align:center">十进制(Decimal notation)</th><th style="text-align:center">二进制(Binary notation)</th><th style="text-align:center">八进制(Octal notation)</th><th style="text-align:center">十六进制(Hexadecimal notation)</th></tr></thead><tbody><tr><td style="text-align:center">数码</td><td style="text-align:center">0,1,2,3,4,5,6,7,8,9</td><td style="text-align:center">0,1</td><td style="text-align:center">0,1,2,3,4,5,6,7</td><td style="text-align:center">0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F</td></tr><tr><td style="text-align:center">进位规则</td><td style="text-align:center">逢十进一</td><td style="text-align:center">逢二进一</td><td style="text-align:center">逢八进一</td><td style="text-align:center">逢十六进一</td></tr><tr><td style="text-align:center">基数</td><td style="text-align:center">10</td><td style="text-align:center">2</td><td style="text-align:center">8</td><td style="text-align:center">16</td></tr><tr><td style="text-align:center">位权</td><td style="text-align:center">$…10^2,10^1,10^0,10^{-1},10^{-2}…$</td><td style="text-align:center">$…2^2,2^1,2^0,2^{-1},2^{-2}…$</td><td style="text-align:center">$…8^2,8^1,8^0,8^{-1},8^{-2}…$</td><td style="text-align:center">$…16^2,16^1,16^0,16^{-1},16^{-2}…$</td></tr><tr><td style="text-align:center">表示方法</td><td style="text-align:center">$D$或$(十进制数)_{10}$</td><td style="text-align:center">$B$或$(二进制数)_2$</td><td style="text-align:center">$O$或$(八进制数)_8$</td><td style="text-align:center">$H$或$(十六进制数)_{16}$或0x(十六进制数)</td></tr></tbody></table></div><blockquote><ul><li>为什么会有八进制、十六进制？<ul><li>因为二进制数表示数时数位太长，而二进制和八进制与十六进制可以很方便转换，所以使用八进制与十六进制可以很方便表示数</li><li>如：IPv6用8组16位二进制表示，换成十六进制表示更简短</li></ul></li></ul></blockquote><h4 id="二进制常用位权值"><a href="#二进制常用位权值" class="headerlink" title="二进制常用位权值"></a>二进制常用位权值</h4><div class="table-container"><table><thead><tr><th style="text-align:center">$2^{16}$</th><th style="text-align:center">$2^{15}$</th><th style="text-align:center">$2^{14}$</th><th style="text-align:center">$2^{13}$</th><th style="text-align:center">$2^{12}$</th><th style="text-align:center">$2^{11}$</th><th style="text-align:center">$2^{10}$</th><th style="text-align:center">$2^{9}$</th><th style="text-align:center">$2^{8}$</th><th style="text-align:center">$2^{7}$</th><th style="text-align:center">$2^{6}$</th><th style="text-align:center">$2^{5}$</th><th style="text-align:center">$2^{4}$</th><th style="text-align:center">$2^{3}$</th><th style="text-align:center">$2^{2}$</th><th style="text-align:center">$2^{1}$</th><th style="text-align:center">$2^{0}$</th><th style="text-align:center">$2^{-1}$</th><th style="text-align:center">$2^{-2}$</th><th style="text-align:center">$2^{-3}$</th></tr></thead><tbody><tr><td style="text-align:center">65536</td><td style="text-align:center">32768</td><td style="text-align:center">16384</td><td style="text-align:center">8192</td><td style="text-align:center">4096</td><td style="text-align:center">2048</td><td style="text-align:center">1024</td><td style="text-align:center">512</td><td style="text-align:center">256</td><td style="text-align:center">128</td><td style="text-align:center">64</td><td style="text-align:center">32</td><td style="text-align:center">16</td><td style="text-align:center">8</td><td style="text-align:center">4</td><td style="text-align:center">2</td><td style="text-align:center">1</td><td style="text-align:center">0.5</td><td style="text-align:center">0.25</td><td style="text-align:center">0.125</td></tr></tbody></table></div><h4 id="4种数制对应关系"><a href="#4种数制对应关系" class="headerlink" title="4种数制对应关系"></a>4种数制对应关系</h4><div class="table-container"><table><thead><tr><th style="text-align:center">十进制</th><th style="text-align:center">二进制</th><th style="text-align:center">八进制</th><th style="text-align:center">十六进制</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">0000</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">0001</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">0010</td><td style="text-align:center">2</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">0011</td><td style="text-align:center">3</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">0100</td><td style="text-align:center">4</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">0101</td><td style="text-align:center">5</td><td style="text-align:center">5</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">0110</td><td style="text-align:center">6</td><td style="text-align:center">6</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">0111</td><td style="text-align:center">7</td><td style="text-align:center">7</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">1000</td><td style="text-align:center">10</td><td style="text-align:center">8</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">1001</td><td style="text-align:center">11</td><td style="text-align:center">9</td></tr><tr><td style="text-align:center">10</td><td style="text-align:center">1010</td><td style="text-align:center">12</td><td style="text-align:center">A(10)</td></tr><tr><td style="text-align:center">11</td><td style="text-align:center">1011</td><td style="text-align:center">13</td><td style="text-align:center">B(11)</td></tr><tr><td style="text-align:center">12</td><td style="text-align:center">1100</td><td style="text-align:center">14</td><td style="text-align:center">C(12)</td></tr><tr><td style="text-align:center">13</td><td style="text-align:center">1101</td><td style="text-align:center">15</td><td style="text-align:center">D(13)</td></tr><tr><td style="text-align:center">14</td><td style="text-align:center">1110</td><td style="text-align:center">16</td><td style="text-align:center">E(14)</td></tr><tr><td style="text-align:center">15</td><td style="text-align:center">1111</td><td style="text-align:center">17</td><td style="text-align:center">F(15)</td></tr></tbody></table></div><h3 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h3><h4 id="r进制-十进制数转换"><a href="#r进制-十进制数转换" class="headerlink" title="r进制-十进制数转换"></a>r进制-十进制数转换</h4><ol><li>按权展开相加法</li></ol><h4 id="二-八-十六进制数转换"><a href="#二-八-十六进制数转换" class="headerlink" title="二-八-十六进制数转换"></a>二-八-十六进制数转换</h4><ol><li>二-八进制数转换：二进制权值为$2^0$的位置开始,3位一组转化为八进制</li><li>二-十六进制数转换：二进制权值为$2^0$的位置开始,4位一组转化为十六进制</li></ol><h4 id="十进制-r进制数转换"><a href="#十进制-r进制数转换" class="headerlink" title="十进制-r进制数转换"></a>十进制-r进制数转换</h4><ol><li>基数(模)乘除法<ol><li>整数部分：除模取余法,商0为止</li><li>小数部分：乘模取整法,精度满足为止</li></ol></li></ol><blockquote><p>可以直接用基数乘除法,也可以先转化二进制,再转化成其他进制数</p></blockquote><h2 id="数值符号编码-真值和机器数"><a href="#数值符号编码-真值和机器数" class="headerlink" title="数值符号编码-真值和机器数"></a>数值符号编码-真值和机器数</h2><blockquote><p>前面已经了解计算机处理的数据用二进制表示，其表示只有0和1，而在实际生活中，通常用<code>+</code> <code>-</code>来分别表示正数和负数，而在计算机二进制中是没有<code>+</code> <code>-</code>号的，在计算机中，通常采用数的符号和数值一起编码的方法来表示数据。常用的有原码、补码和反码表示法，这几种表示方法都将数据的符号数字化，通常<code>0</code>表示正，<code>1</code>表示负。</p></blockquote><ul><li>真值：带<code>+</code> <code>-</code> 号的数，符合人类习惯的数字。真值是机器数所代表的实际值</li><li>机器数：把符号(正负号)数字化的数，数字实际存到机器里的形式，方便计算机处理的纯二进制编码的数<ul><li>原码</li><li>反码</li><li>补码</li><li>移码</li></ul></li></ul><h2 id="特殊数值编码方式-BCD码"><a href="#特殊数值编码方式-BCD码" class="headerlink" title="特殊数值编码方式-BCD码"></a>特殊数值编码方式-BCD码</h2><blockquote><p>BCD码：用二进制编码的十进制数</p><p>用4 bit表示一个十进制数码直接一一对应，4 bit二进制可表示数：0-15，十进制数码为：0-9，如果用4 bit表示十进制数，则有6种冗余状态：10,11,12,13,14,15</p></blockquote><h3 id="8421码"><a href="#8421码" class="headerlink" title="8421码"></a>8421码</h3><p>4 bit二进制位权值</p><div class="table-container"><table><thead><tr><th style="text-align:center">$2^{3}$</th><th style="text-align:center">$2^{2}$</th><th style="text-align:center">$2^{1}$</th><th style="text-align:center">$2^{0}$</th></tr></thead><tbody><tr><td style="text-align:center">8</td><td style="text-align:center">4</td><td style="text-align:center">2</td><td style="text-align:center">1</td></tr></tbody></table></div><h4 id="8421码的映射关系"><a href="#8421码的映射关系" class="headerlink" title="8421码的映射关系"></a>8421码的映射关系</h4><div class="table-container"><table><thead><tr><th style="text-align:center">十进制</th><th style="text-align:center">0</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th><th style="text-align:center">7</th><th style="text-align:center">8</th><th style="text-align:center">9</th><th style="text-align:center"></th><th style="text-align:center">10</th><th style="text-align:center">11</th><th style="text-align:center">12</th><th style="text-align:center">13</th><th style="text-align:center">14</th><th style="text-align:center">15</th></tr></thead><tbody><tr><td style="text-align:center">二进制</td><td style="text-align:center">0000</td><td style="text-align:center">0001</td><td style="text-align:center">0010</td><td style="text-align:center">0011</td><td style="text-align:center">0100</td><td style="text-align:center">0101</td><td style="text-align:center">0110</td><td style="text-align:center">0111</td><td style="text-align:center">1000</td><td style="text-align:center">1001</td><td style="text-align:center">冗余</td><td style="text-align:center">1010</td><td style="text-align:center">1011</td><td style="text-align:center">1100</td><td style="text-align:center">1101</td><td style="text-align:center">1110</td><td style="text-align:center">1111</td></tr></tbody></table></div><blockquote><p>8421码的二进制编码与十进制数码具有位权转换关系，所以8421码是有权码</p></blockquote><h4 id="用8421码表示1个10进制数"><a href="#用8421码表示1个10进制数" class="headerlink" title="用8421码表示1个10进制数"></a>用8421码表示1个10进制数</h4><p><code>2022</code>用8421码表示：<code>0010 0000 0010 0010</code></p><p><code>10086</code>用8421码表示：<code>0001 0000 0000 1000 0110</code></p><blockquote><p>十进制数每位数码直接用对应的4 bit二进制数表示</p></blockquote><h4 id="8421码加法计算"><a href="#8421码加法计算" class="headerlink" title="8421码加法计算"></a>8421码加法计算</h4><ol><li>首先我们看1个十进制数加法：<code>5+8=13</code></li><li>3个十进制数对应的二进制编码为：<code>0101+1000=1101</code>，但是8421码只对应十进制数码0-9，13(1101)属于4 bit 8421码的冗余状态，超过了8421码表示范围,计算结果用8421码表示应该为：<code>0101+1000=0001 0011</code></li><li>而实际上计算机计算结果也是：<code>0101+1000=1101</code>，如果对计算结果统一使用8421码表示，则需要对计算结果进行修正，由于4 bit 8421码有6中冗余状态，所以应该对结果进行<code>+6(0110)</code>修正，即：<code>0101+1000=1101</code> <code>1101+0110=1 0011</code>补齐高4位即得到8421编码计算结果：<code>0101+1000=0001 0011</code></li></ol><blockquote><p>使用8421码进行加法计算，如果计算结果位于非法区间内，则需要<code>+6(0110)</code>进行修正，如果计算结果位于合法区间内，则不需要<code>+6(0110)</code>修正</p></blockquote><h3 id="余3码"><a href="#余3码" class="headerlink" title="余3码"></a>余3码</h3><blockquote><p>8421码直接使用的4 bit 二进制数前10个来表示十进制10个数码0-9（其对应二进制的位权，所以8421码为有权码），如果选择中间10个4 bit二进制数来映射十进制的10个数码就得到了余3码</p><p>余3码的4 bit二进制数与十进制数码的映射关系为：8421码+3(0011)进行偏置映射</p></blockquote><p>4 bit 2421码二进制数权值关系</p><div class="table-container"><table><thead><tr><th style="text-align:center">2</th><th style="text-align:center">$2^{2}$</th><th style="text-align:center">$2^{1}$</th><th style="text-align:center">$2^{0}$</th></tr></thead><tbody><tr><td style="text-align:center">2</td><td style="text-align:center">4</td><td style="text-align:center">2</td><td style="text-align:center">1</td></tr></tbody></table></div><h4 id="余3码的映射关系"><a href="#余3码的映射关系" class="headerlink" title="余3码的映射关系"></a>余3码的映射关系</h4><div class="table-container"><table><thead><tr><th style="text-align:center">十进制</th><th style="text-align:center">0</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th><th style="text-align:center">7</th><th style="text-align:center">8</th><th style="text-align:center">9</th></tr></thead><tbody><tr><td style="text-align:center">二进制</td><td style="text-align:center">0011</td><td style="text-align:center">0100</td><td style="text-align:center">0101</td><td style="text-align:center">0110</td><td style="text-align:center">0111</td><td style="text-align:center">1000</td><td style="text-align:center">1001</td><td style="text-align:center">1010</td><td style="text-align:center">1011</td><td style="text-align:center">1100</td></tr></tbody></table></div><blockquote><p>余3码是一种无权码</p><p>由于余3码的编码映射方式，二进制数上无位权对应关系，是由8421码偏置3而来，所以是一种无权码。</p></blockquote><h3 id="2421码"><a href="#2421码" class="headerlink" title="2421码"></a>2421码</h3><blockquote><p>2421码是8421码改变权值定义得到的一种编码方式，将8421码最高位权值由8改成2，使得十进制数到5可以由二进制1011按位权2421展开得到</p><p>2421码，反映了2421的位权关系，所以2421码也是一种有权码</p></blockquote><h4 id="2421码的映射关系"><a href="#2421码的映射关系" class="headerlink" title="2421码的映射关系"></a>2421码的映射关系</h4><div class="table-container"><table><thead><tr><th style="text-align:center">十进制</th><th style="text-align:center">0</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th><th style="text-align:center">7</th><th style="text-align:center">8</th><th style="text-align:center">9</th></tr></thead><tbody><tr><td style="text-align:center">二进制</td><td style="text-align:center">0000</td><td style="text-align:center">0001</td><td style="text-align:center">0010</td><td style="text-align:center">0011</td><td style="text-align:center">0100</td><td style="text-align:center">1011</td><td style="text-align:center">1100</td><td style="text-align:center">1101</td><td style="text-align:center">1110</td><td style="text-align:center">1111</td></tr></tbody></table></div><h2 id="字符与字符串-字符数据编码表示"><a href="#字符与字符串-字符数据编码表示" class="headerlink" title="字符与字符串-字符数据编码表示"></a>字符与字符串-字符数据编码表示</h2><blockquote><p>由于计算机内部只能识别和处理二进制代码，所以字符都必须按照一定的规则用一组二进制编码来表示。</p></blockquote><h3 id="英文字符在计算机内的表示"><a href="#英文字符在计算机内的表示" class="headerlink" title="英文字符在计算机内的表示"></a>英文字符在计算机内的表示</h3><blockquote><p>由于英文只有26个字母，加上一些数字和其他字符，128($2^7$)个字符就足够了，所以最开始的计算机编码采用ASCII编码方式</p><p>由于计算机存储系统1个字节为8 bit，所以ASCII码一般在最高位补0凑满一个字节，而实际上ASCII编码只需要7 bit就足够了</p></blockquote><p><strong>ASCII码对照表</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">Bin(二进制)</th><th style="text-align:center">Oct(八进制)</th><th style="text-align:center">Dec(十进制)</th><th style="text-align:center">Hex</th><th style="text-align:center">(十六进制)缩写/字符</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">0000 0000</td><td style="text-align:center">0000</td><td style="text-align:center">0</td><td style="text-align:center">0x00</td><td style="text-align:center">NUL(null)</td><td style="text-align:center">空字符\0</td></tr><tr><td style="text-align:center">0000 0001</td><td style="text-align:center">0001</td><td style="text-align:center">1</td><td style="text-align:center">0x01</td><td style="text-align:center">SOH(start of headline)</td><td style="text-align:center">标题开始</td></tr><tr><td style="text-align:center">0000 0010</td><td style="text-align:center">0002</td><td style="text-align:center">2</td><td style="text-align:center">0x02</td><td style="text-align:center">STX (start of text)</td><td style="text-align:center">正文开始</td></tr><tr><td style="text-align:center">0000 0011</td><td style="text-align:center">0003</td><td style="text-align:center">3</td><td style="text-align:center">0x03</td><td style="text-align:center">ETX (end of text)</td><td style="text-align:center">正文结束</td></tr><tr><td style="text-align:center">0000 0100</td><td style="text-align:center">0004</td><td style="text-align:center">4</td><td style="text-align:center">0x04</td><td style="text-align:center">EOT (end of transmission)</td><td style="text-align:center">传输结束</td></tr><tr><td style="text-align:center">0000 0101</td><td style="text-align:center">0005</td><td style="text-align:center">5</td><td style="text-align:center">0x05</td><td style="text-align:center">ENQ (enquiry)</td><td style="text-align:center">请求</td></tr><tr><td style="text-align:center">0000 0110</td><td style="text-align:center">0006</td><td style="text-align:center">6</td><td style="text-align:center">0x06</td><td style="text-align:center">ACK (acknowledge)</td><td style="text-align:center">收到通知</td></tr><tr><td style="text-align:center">0000 0111</td><td style="text-align:center">0007</td><td style="text-align:center">7</td><td style="text-align:center">0x07</td><td style="text-align:center">BEL (bell)</td><td style="text-align:center">响铃\a</td></tr><tr><td style="text-align:center">0000 1000</td><td style="text-align:center">0010</td><td style="text-align:center">8</td><td style="text-align:center">0x08</td><td style="text-align:center">BS (backspace)</td><td style="text-align:center">退格</td></tr><tr><td style="text-align:center">0000 1001</td><td style="text-align:center">0011</td><td style="text-align:center">9</td><td style="text-align:center">0x09</td><td style="text-align:center">HT (horizontal tab)</td><td style="text-align:center">水平制表符\t</td></tr><tr><td style="text-align:center">0000 1010</td><td style="text-align:center">0012</td><td style="text-align:center">10</td><td style="text-align:center">0x0A</td><td style="text-align:center">LF (NL line feed, new line)</td><td style="text-align:center">换行键\n</td></tr><tr><td style="text-align:center">0000 1011</td><td style="text-align:center">0013</td><td style="text-align:center">11</td><td style="text-align:center">0x0B</td><td style="text-align:center">VT (vertical tab)</td><td style="text-align:center">垂直制表符</td></tr><tr><td style="text-align:center">0000 1100</td><td style="text-align:center">0014</td><td style="text-align:center">12</td><td style="text-align:center">0x0C</td><td style="text-align:center">FF (NP form feed, new page)</td><td style="text-align:center">换页键\f</td></tr><tr><td style="text-align:center">0000 1101</td><td style="text-align:center">0015</td><td style="text-align:center">13</td><td style="text-align:center">0x0D</td><td style="text-align:center">CR (carriage return)</td><td style="text-align:center">回车键\r</td></tr><tr><td style="text-align:center">0000 1110</td><td style="text-align:center">0016</td><td style="text-align:center">14</td><td style="text-align:center">0x0E</td><td style="text-align:center">SO (shift out)</td><td style="text-align:center">不用切换</td></tr><tr><td style="text-align:center">0000 1111</td><td style="text-align:center">0017</td><td style="text-align:center">15</td><td style="text-align:center">0x0F</td><td style="text-align:center">SI (shift in)</td><td style="text-align:center">启用切换</td></tr><tr><td style="text-align:center">0001 0000</td><td style="text-align:center">0020</td><td style="text-align:center">16</td><td style="text-align:center">0x10</td><td style="text-align:center">DLE (data link escape)</td><td style="text-align:center">数据链路转义</td></tr><tr><td style="text-align:center">0001 0001</td><td style="text-align:center">0021</td><td style="text-align:center">17</td><td style="text-align:center">0x11</td><td style="text-align:center">DC1 (device control 1)</td><td style="text-align:center">设备控制1</td></tr><tr><td style="text-align:center">0001 0010</td><td style="text-align:center">0022</td><td style="text-align:center">18</td><td style="text-align:center">0x12</td><td style="text-align:center">DC2 (device control 2)</td><td style="text-align:center">设备控制2</td></tr><tr><td style="text-align:center">0001 0011</td><td style="text-align:center">0023</td><td style="text-align:center">19</td><td style="text-align:center">0x13</td><td style="text-align:center">DC3 (device control 3)</td><td style="text-align:center">设备控制3</td></tr><tr><td style="text-align:center">0001 0100</td><td style="text-align:center">0024</td><td style="text-align:center">20</td><td style="text-align:center">0x14</td><td style="text-align:center">DC4 (device control 4)</td><td style="text-align:center">设备控制4</td></tr><tr><td style="text-align:center">0001 0101</td><td style="text-align:center">0025</td><td style="text-align:center">21</td><td style="text-align:center">0x15</td><td style="text-align:center">NAK (negative acknowledge)</td><td style="text-align:center">拒绝接收</td></tr><tr><td style="text-align:center">0001 0110</td><td style="text-align:center">0026</td><td style="text-align:center">22</td><td style="text-align:center">0x16</td><td style="text-align:center">SYN (synchronous idle)</td><td style="text-align:center">同步空闲</td></tr><tr><td style="text-align:center">0001 0111</td><td style="text-align:center">0027</td><td style="text-align:center">23</td><td style="text-align:center">0x17</td><td style="text-align:center">ETB (end of trans. block)</td><td style="text-align:center">结束传输块</td></tr><tr><td style="text-align:center">0001 1000</td><td style="text-align:center">0030</td><td style="text-align:center">24</td><td style="text-align:center">0x18</td><td style="text-align:center">CAN (cancel)</td><td style="text-align:center">取消</td></tr><tr><td style="text-align:center">0001 1001</td><td style="text-align:center">0031</td><td style="text-align:center">25</td><td style="text-align:center">0x19</td><td style="text-align:center">EM (end of medium)</td><td style="text-align:center">媒介结束</td></tr><tr><td style="text-align:center">0001 1010</td><td style="text-align:center">0032</td><td style="text-align:center">26</td><td style="text-align:center">0x1A</td><td style="text-align:center">SUB (substitute)</td><td style="text-align:center">代替</td></tr><tr><td style="text-align:center">0001 1011</td><td style="text-align:center">0033</td><td style="text-align:center">27</td><td style="text-align:center">0x1B</td><td style="text-align:center">ESC (escape)</td><td style="text-align:center">换码(溢出)</td></tr><tr><td style="text-align:center">0001 1100</td><td style="text-align:center">0034</td><td style="text-align:center">28</td><td style="text-align:center">0x1C</td><td style="text-align:center">FS (file separator)</td><td style="text-align:center">文件分隔符</td></tr><tr><td style="text-align:center">0001 1101</td><td style="text-align:center">0035</td><td style="text-align:center">29</td><td style="text-align:center">0x1D</td><td style="text-align:center">GS (group separator)</td><td style="text-align:center">分组符</td></tr><tr><td style="text-align:center">0001 1110</td><td style="text-align:center">0036</td><td style="text-align:center">30</td><td style="text-align:center">0x1E</td><td style="text-align:center">RS (record separator)</td><td style="text-align:center">记录分隔符</td></tr><tr><td style="text-align:center">0001 1111</td><td style="text-align:center">0037</td><td style="text-align:center">31</td><td style="text-align:center">0x1F</td><td style="text-align:center">US (unit separator)</td><td style="text-align:center">单元分隔符</td></tr><tr><td style="text-align:center">0010 0000</td><td style="text-align:center">0040</td><td style="text-align:center">32</td><td style="text-align:center">0x20</td><td style="text-align:center">(space)</td><td style="text-align:center">空格</td></tr><tr><td style="text-align:center">0010 0001</td><td style="text-align:center">0041</td><td style="text-align:center">33</td><td style="text-align:center">0x21</td><td style="text-align:center">!</td><td style="text-align:center">叹号</td></tr><tr><td style="text-align:center">0010 0010</td><td style="text-align:center">0042</td><td style="text-align:center">34</td><td style="text-align:center">0x22</td><td style="text-align:center">“</td><td style="text-align:center">双引号\\”</td></tr><tr><td style="text-align:center">0010 0011</td><td style="text-align:center">0043</td><td style="text-align:center">35</td><td style="text-align:center">0x23</td><td style="text-align:center">#</td><td style="text-align:center">井号</td></tr><tr><td style="text-align:center">0010 0100</td><td style="text-align:center">0044</td><td style="text-align:center">36</td><td style="text-align:center">0x24</td><td style="text-align:center">$</td><td style="text-align:center">美元符</td></tr><tr><td style="text-align:center">0010 0101</td><td style="text-align:center">0045</td><td style="text-align:center">37</td><td style="text-align:center">0x25</td><td style="text-align:center">%</td><td style="text-align:center">百分号</td></tr><tr><td style="text-align:center">0010 0110</td><td style="text-align:center">0046</td><td style="text-align:center">38</td><td style="text-align:center">0x26</td><td style="text-align:center">&amp;</td><td style="text-align:center">和号</td></tr><tr><td style="text-align:center">0010 0111</td><td style="text-align:center">0047</td><td style="text-align:center">39</td><td style="text-align:center">0x27</td><td style="text-align:center">‘</td><td style="text-align:center">闭单引号\\’</td></tr><tr><td style="text-align:center">0010 1000</td><td style="text-align:center">0050</td><td style="text-align:center">40</td><td style="text-align:center">0x28</td><td style="text-align:center">(</td><td style="text-align:center">开括号</td></tr><tr><td style="text-align:center">0010 1001</td><td style="text-align:center">0051</td><td style="text-align:center">41</td><td style="text-align:center">0x29</td><td style="text-align:center">)</td><td style="text-align:center">闭括号</td></tr><tr><td style="text-align:center">0010 1010</td><td style="text-align:center">0052</td><td style="text-align:center">42</td><td style="text-align:center">0x2A</td><td style="text-align:center">*</td><td style="text-align:center">星号</td></tr><tr><td style="text-align:center">0010 1011</td><td style="text-align:center">0053</td><td style="text-align:center">43</td><td style="text-align:center">0x2B</td><td style="text-align:center">+</td><td style="text-align:center">加号</td></tr><tr><td style="text-align:center">0010 1100</td><td style="text-align:center">0054</td><td style="text-align:center">44</td><td style="text-align:center">0x2C</td><td style="text-align:center">,</td><td style="text-align:center">逗号</td></tr><tr><td style="text-align:center">0010 1101</td><td style="text-align:center">0055</td><td style="text-align:center">45</td><td style="text-align:center">0x2D</td><td style="text-align:center">-</td><td style="text-align:center">减号/破折号</td></tr><tr><td style="text-align:center">0010 1110</td><td style="text-align:center">0056</td><td style="text-align:center">46</td><td style="text-align:center">0x2E</td><td style="text-align:center">.</td><td style="text-align:center">句号</td></tr><tr><td style="text-align:center">0010 1111</td><td style="text-align:center">0057</td><td style="text-align:center">47</td><td style="text-align:center">0x2F</td><td style="text-align:center">/</td><td style="text-align:center">斜杠</td></tr><tr><td style="text-align:center">0011 0000</td><td style="text-align:center">0060</td><td style="text-align:center">48</td><td style="text-align:center">0x30</td><td style="text-align:center">0</td><td style="text-align:center">字符0</td></tr><tr><td style="text-align:center">0011 0001</td><td style="text-align:center">0061</td><td style="text-align:center">49</td><td style="text-align:center">0x31</td><td style="text-align:center">1</td><td style="text-align:center">字符1</td></tr><tr><td style="text-align:center">0011 0010</td><td style="text-align:center">0062</td><td style="text-align:center">50</td><td style="text-align:center">0x32</td><td style="text-align:center">2</td><td style="text-align:center">字符2</td></tr><tr><td style="text-align:center">0011 0011</td><td style="text-align:center">0063</td><td style="text-align:center">51</td><td style="text-align:center">0x33</td><td style="text-align:center">3</td><td style="text-align:center">字符3</td></tr><tr><td style="text-align:center">0011 0100</td><td style="text-align:center">0064</td><td style="text-align:center">52</td><td style="text-align:center">0x34</td><td style="text-align:center">4</td><td style="text-align:center">字符4</td></tr><tr><td style="text-align:center">0011 0101</td><td style="text-align:center">0065</td><td style="text-align:center">53</td><td style="text-align:center">0x35</td><td style="text-align:center">5</td><td style="text-align:center">字符5</td></tr><tr><td style="text-align:center">0011 0110</td><td style="text-align:center">0066</td><td style="text-align:center">54</td><td style="text-align:center">0x36</td><td style="text-align:center">6</td><td style="text-align:center">字符6</td></tr><tr><td style="text-align:center">0011 0111</td><td style="text-align:center">0067</td><td style="text-align:center">55</td><td style="text-align:center">0x37</td><td style="text-align:center">7</td><td style="text-align:center">字符7</td></tr><tr><td style="text-align:center">0011 1000</td><td style="text-align:center">0070</td><td style="text-align:center">56</td><td style="text-align:center">0x38</td><td style="text-align:center">8</td><td style="text-align:center">字符8</td></tr><tr><td style="text-align:center">0011 1001</td><td style="text-align:center">0071</td><td style="text-align:center">57</td><td style="text-align:center">0x39</td><td style="text-align:center">9</td><td style="text-align:center">字符9</td></tr><tr><td style="text-align:center">0011 1010</td><td style="text-align:center">0072</td><td style="text-align:center">58</td><td style="text-align:center">0x3A</td><td style="text-align:center">:</td><td style="text-align:center">冒号</td></tr><tr><td style="text-align:center">0011 1011</td><td style="text-align:center">0073</td><td style="text-align:center">59</td><td style="text-align:center">0x3B</td><td style="text-align:center">;</td><td style="text-align:center">分号</td></tr><tr><td style="text-align:center">0011 1100</td><td style="text-align:center">0074</td><td style="text-align:center">60</td><td style="text-align:center">0x3C</td><td style="text-align:center">&lt;</td><td style="text-align:center">小于</td></tr><tr><td style="text-align:center">0011 1101</td><td style="text-align:center">0075</td><td style="text-align:center">61</td><td style="text-align:center">0x3D</td><td style="text-align:center">=</td><td style="text-align:center">等号</td></tr><tr><td style="text-align:center">0011 1110</td><td style="text-align:center">0076</td><td style="text-align:center">62</td><td style="text-align:center">0x3E</td><td style="text-align:center">&gt;</td><td style="text-align:center">大于</td></tr><tr><td style="text-align:center">0011 1111</td><td style="text-align:center">0077</td><td style="text-align:center">63</td><td style="text-align:center">0x3F</td><td style="text-align:center">?</td><td style="text-align:center">问号</td></tr><tr><td style="text-align:center">0100 0000</td><td style="text-align:center">0100</td><td style="text-align:center">64</td><td style="text-align:center">0x40</td><td style="text-align:center">@</td><td style="text-align:center">电子邮件符号</td></tr><tr><td style="text-align:center">0100 0001</td><td style="text-align:center">0101</td><td style="text-align:center">65</td><td style="text-align:center">0x41</td><td style="text-align:center">A</td><td style="text-align:center">大写字母A</td></tr><tr><td style="text-align:center">0100 0010</td><td style="text-align:center">0102</td><td style="text-align:center">66</td><td style="text-align:center">0x42</td><td style="text-align:center">B</td><td style="text-align:center">大写字母B</td></tr><tr><td style="text-align:center">0100 0011</td><td style="text-align:center">0103</td><td style="text-align:center">67</td><td style="text-align:center">0x43</td><td style="text-align:center">C</td><td style="text-align:center">大写字母C</td></tr><tr><td style="text-align:center">0100 0100</td><td style="text-align:center">0104</td><td style="text-align:center">68</td><td style="text-align:center">0x44</td><td style="text-align:center">D</td><td style="text-align:center">大写字母D</td></tr><tr><td style="text-align:center">0100 0101</td><td style="text-align:center">0105</td><td style="text-align:center">69</td><td style="text-align:center">0x45</td><td style="text-align:center">E</td><td style="text-align:center">大写字母E</td></tr><tr><td style="text-align:center">0100 0110</td><td style="text-align:center">0106</td><td style="text-align:center">70</td><td style="text-align:center">0x46</td><td style="text-align:center">F</td><td style="text-align:center">大写字母F</td></tr><tr><td style="text-align:center">0100 0111</td><td style="text-align:center">0107</td><td style="text-align:center">71</td><td style="text-align:center">0x47</td><td style="text-align:center">G</td><td style="text-align:center">大写字母G</td></tr><tr><td style="text-align:center">0100 1000</td><td style="text-align:center">0110</td><td style="text-align:center">72</td><td style="text-align:center">0x48</td><td style="text-align:center">H</td><td style="text-align:center">大写字母H</td></tr><tr><td style="text-align:center">0100 1001</td><td style="text-align:center">0111</td><td style="text-align:center">73</td><td style="text-align:center">0x49</td><td style="text-align:center">I</td><td style="text-align:center">大写字母I</td></tr><tr><td style="text-align:center">01001010</td><td style="text-align:center">0112</td><td style="text-align:center">74</td><td style="text-align:center">0x4A</td><td style="text-align:center">J</td><td style="text-align:center">大写字母J</td></tr><tr><td style="text-align:center">0100 1011</td><td style="text-align:center">0113</td><td style="text-align:center">75</td><td style="text-align:center">0x4B</td><td style="text-align:center">K</td><td style="text-align:center">大写字母K</td></tr><tr><td style="text-align:center">0100 1100</td><td style="text-align:center">0114</td><td style="text-align:center">76</td><td style="text-align:center">0x4C</td><td style="text-align:center">L</td><td style="text-align:center">大写字母L</td></tr><tr><td style="text-align:center">0100 1101</td><td style="text-align:center">0115</td><td style="text-align:center">77</td><td style="text-align:center">0x4D</td><td style="text-align:center">M</td><td style="text-align:center">大写字母M</td></tr><tr><td style="text-align:center">0100 1110</td><td style="text-align:center">0116</td><td style="text-align:center">78</td><td style="text-align:center">0x4E</td><td style="text-align:center">N</td><td style="text-align:center">大写字母N</td></tr><tr><td style="text-align:center">0100 1111</td><td style="text-align:center">0117</td><td style="text-align:center">79</td><td style="text-align:center">0x4F</td><td style="text-align:center">O</td><td style="text-align:center">大写字母O</td></tr><tr><td style="text-align:center">0101 0000</td><td style="text-align:center">0120</td><td style="text-align:center">80</td><td style="text-align:center">0x50</td><td style="text-align:center">P</td><td style="text-align:center">大写字母P</td></tr><tr><td style="text-align:center">0101 0001</td><td style="text-align:center">0121</td><td style="text-align:center">81</td><td style="text-align:center">0x51</td><td style="text-align:center">Q</td><td style="text-align:center">大写字母Q</td></tr><tr><td style="text-align:center">0101 0010</td><td style="text-align:center">0122</td><td style="text-align:center">82</td><td style="text-align:center">0x52</td><td style="text-align:center">R</td><td style="text-align:center">大写字母R</td></tr><tr><td style="text-align:center">0101 0011</td><td style="text-align:center">0123</td><td style="text-align:center">83</td><td style="text-align:center">0x53</td><td style="text-align:center">S</td><td style="text-align:center">大写字母S</td></tr><tr><td style="text-align:center">0101 0100</td><td style="text-align:center">0124</td><td style="text-align:center">84</td><td style="text-align:center">0x54</td><td style="text-align:center">T</td><td style="text-align:center">大写字母T</td></tr><tr><td style="text-align:center">0101 0101</td><td style="text-align:center">0125</td><td style="text-align:center">85</td><td style="text-align:center">0x55</td><td style="text-align:center">U</td><td style="text-align:center">大写字母U</td></tr><tr><td style="text-align:center">0101 0110</td><td style="text-align:center">0126</td><td style="text-align:center">86</td><td style="text-align:center">0x56</td><td style="text-align:center">V</td><td style="text-align:center">大写字母V</td></tr><tr><td style="text-align:center">0101 0111</td><td style="text-align:center">0127</td><td style="text-align:center">87</td><td style="text-align:center">0x57</td><td style="text-align:center">W</td><td style="text-align:center">大写字母W</td></tr><tr><td style="text-align:center">0101 1000</td><td style="text-align:center">0130</td><td style="text-align:center">88</td><td style="text-align:center">0x58</td><td style="text-align:center">X</td><td style="text-align:center">大写字母X</td></tr><tr><td style="text-align:center">0101 1001</td><td style="text-align:center">0131</td><td style="text-align:center">89</td><td style="text-align:center">0x59</td><td style="text-align:center">Y</td><td style="text-align:center">大写字母Y</td></tr><tr><td style="text-align:center">0101 1010</td><td style="text-align:center">0132</td><td style="text-align:center">90</td><td style="text-align:center">0x5A</td><td style="text-align:center">Z</td><td style="text-align:center">大写字母Z</td></tr><tr><td style="text-align:center">0101 1011</td><td style="text-align:center">0133</td><td style="text-align:center">91</td><td style="text-align:center">0x5B</td><td style="text-align:center">[</td><td style="text-align:center">开方括号</td></tr><tr><td style="text-align:center">0101 1100</td><td style="text-align:center">0134</td><td style="text-align:center">92</td><td style="text-align:center">0x5C</td><td style="text-align:center">\</td><td style="text-align:center">反斜杠\\\</td></tr><tr><td style="text-align:center">0101 1101</td><td style="text-align:center">0135</td><td style="text-align:center">93</td><td style="text-align:center">0x5D</td><td style="text-align:center">]</td><td style="text-align:center">闭方括号</td></tr><tr><td style="text-align:center">0101 1110</td><td style="text-align:center">0136</td><td style="text-align:center">94</td><td style="text-align:center">0x5E</td><td style="text-align:center">^</td><td style="text-align:center">脱字符</td></tr><tr><td style="text-align:center">0101 1111</td><td style="text-align:center">0137</td><td style="text-align:center">95</td><td style="text-align:center">0x5F</td><td style="text-align:center">_</td><td style="text-align:center">下划线</td></tr><tr><td style="text-align:center">0110 0000</td><td style="text-align:center">0140</td><td style="text-align:center">96</td><td style="text-align:center">0x60</td><td style="text-align:center">`</td><td style="text-align:center">开单引号</td></tr><tr><td style="text-align:center">0110 0001</td><td style="text-align:center">0141</td><td style="text-align:center">97</td><td style="text-align:center">0x61</td><td style="text-align:center">a</td><td style="text-align:center">小写字母a</td></tr><tr><td style="text-align:center">0110 0010</td><td style="text-align:center">0142</td><td style="text-align:center">98</td><td style="text-align:center">0x62</td><td style="text-align:center">b</td><td style="text-align:center">小写字母b</td></tr><tr><td style="text-align:center">0110 0011</td><td style="text-align:center">0143</td><td style="text-align:center">99</td><td style="text-align:center">0x63</td><td style="text-align:center">c</td><td style="text-align:center">小写字母c</td></tr><tr><td style="text-align:center">0110 0100</td><td style="text-align:center">0144</td><td style="text-align:center">100</td><td style="text-align:center">0x64</td><td style="text-align:center">d</td><td style="text-align:center">小写字母d</td></tr><tr><td style="text-align:center">0110 0101</td><td style="text-align:center">0145</td><td style="text-align:center">101</td><td style="text-align:center">0x65</td><td style="text-align:center">e</td><td style="text-align:center">小写字母e</td></tr><tr><td style="text-align:center">0110 0110</td><td style="text-align:center">0146</td><td style="text-align:center">102</td><td style="text-align:center">0x66</td><td style="text-align:center">f</td><td style="text-align:center">小写字母f</td></tr><tr><td style="text-align:center">0110 0111</td><td style="text-align:center">0147</td><td style="text-align:center">103</td><td style="text-align:center">0x67</td><td style="text-align:center">g</td><td style="text-align:center">小写字母g</td></tr><tr><td style="text-align:center">0110 1000</td><td style="text-align:center">0150</td><td style="text-align:center">104</td><td style="text-align:center">0x68</td><td style="text-align:center">h</td><td style="text-align:center">小写字母h</td></tr><tr><td style="text-align:center">0110 1001</td><td style="text-align:center">0151</td><td style="text-align:center">105</td><td style="text-align:center">0x69</td><td style="text-align:center">i</td><td style="text-align:center">小写字母i</td></tr><tr><td style="text-align:center">0110 1010</td><td style="text-align:center">0152</td><td style="text-align:center">106</td><td style="text-align:center">0x6A</td><td style="text-align:center">j</td><td style="text-align:center">小写字母j</td></tr><tr><td style="text-align:center">0110 1011</td><td style="text-align:center">0153</td><td style="text-align:center">107</td><td style="text-align:center">0x6B</td><td style="text-align:center">k</td><td style="text-align:center">小写字母k</td></tr><tr><td style="text-align:center">0110 1100</td><td style="text-align:center">0154</td><td style="text-align:center">108</td><td style="text-align:center">0x6C</td><td style="text-align:center">l</td><td style="text-align:center">小写字母l</td></tr><tr><td style="text-align:center">0110 1101</td><td style="text-align:center">0155</td><td style="text-align:center">109</td><td style="text-align:center">0x6D</td><td style="text-align:center">m</td><td style="text-align:center">小写字母m</td></tr><tr><td style="text-align:center">0110 1110</td><td style="text-align:center">0156</td><td style="text-align:center">110</td><td style="text-align:center">0x6E</td><td style="text-align:center">n</td><td style="text-align:center">小写字母n</td></tr><tr><td style="text-align:center">0110 1111</td><td style="text-align:center">0157</td><td style="text-align:center">111</td><td style="text-align:center">0x6F</td><td style="text-align:center">o</td><td style="text-align:center">小写字母o</td></tr><tr><td style="text-align:center">0111 0000</td><td style="text-align:center">0160</td><td style="text-align:center">112</td><td style="text-align:center">0x70</td><td style="text-align:center">p</td><td style="text-align:center">小写字母p</td></tr><tr><td style="text-align:center">0111 0001</td><td style="text-align:center">0161</td><td style="text-align:center">113</td><td style="text-align:center">0x71</td><td style="text-align:center">q</td><td style="text-align:center">小写字母q</td></tr><tr><td style="text-align:center">0111 0010</td><td style="text-align:center">0162</td><td style="text-align:center">114</td><td style="text-align:center">0x72</td><td style="text-align:center">r</td><td style="text-align:center">小写字母r</td></tr><tr><td style="text-align:center">0111 0011</td><td style="text-align:center">0163</td><td style="text-align:center">115</td><td style="text-align:center">0x73</td><td style="text-align:center">s</td><td style="text-align:center">小写字母s</td></tr><tr><td style="text-align:center">0111 0100</td><td style="text-align:center">0164</td><td style="text-align:center">116</td><td style="text-align:center">0x74</td><td style="text-align:center">t</td><td style="text-align:center">小写字母t</td></tr><tr><td style="text-align:center">0111 0101</td><td style="text-align:center">0165</td><td style="text-align:center">117</td><td style="text-align:center">0x75</td><td style="text-align:center">u</td><td style="text-align:center">小写字母u</td></tr><tr><td style="text-align:center">0111 0110</td><td style="text-align:center">0166</td><td style="text-align:center">118</td><td style="text-align:center">0x76</td><td style="text-align:center">v</td><td style="text-align:center">小写字母v</td></tr><tr><td style="text-align:center">0111 0111</td><td style="text-align:center">0167</td><td style="text-align:center">119</td><td style="text-align:center">0x77</td><td style="text-align:center">w</td><td style="text-align:center">小写字母w</td></tr><tr><td style="text-align:center">0111 1000</td><td style="text-align:center">0170</td><td style="text-align:center">120</td><td style="text-align:center">0x78</td><td style="text-align:center">x</td><td style="text-align:center">小写字母x</td></tr><tr><td style="text-align:center">0111 1001</td><td style="text-align:center">0171</td><td style="text-align:center">121</td><td style="text-align:center">0x79</td><td style="text-align:center">y</td><td style="text-align:center">小写字母y</td></tr><tr><td style="text-align:center">0111 1010</td><td style="text-align:center">0172</td><td style="text-align:center">122</td><td style="text-align:center">0x7A</td><td style="text-align:center">z</td><td style="text-align:center">小写字母z</td></tr><tr><td style="text-align:center">0111 1011</td><td style="text-align:center">0173</td><td style="text-align:center">123</td><td style="text-align:center">0x7B</td><td style="text-align:center">{</td><td style="text-align:center">开花括号</td></tr><tr><td style="text-align:center">0111 1100</td><td style="text-align:center">0174</td><td style="text-align:center">124</td><td style="text-align:center">0x7C</td><td style="text-align:center">丨</td><td style="text-align:center">垂线</td></tr><tr><td style="text-align:center">0111 1101</td><td style="text-align:center">0175</td><td style="text-align:center">125</td><td style="text-align:center">0x7D</td><td style="text-align:center">}</td><td style="text-align:center">闭花括号</td></tr><tr><td style="text-align:center">0111 1110</td><td style="text-align:center">0176</td><td style="text-align:center">126</td><td style="text-align:center">0x7E</td><td style="text-align:center">~</td><td style="text-align:center">波浪号</td></tr><tr><td style="text-align:center">0111 1111</td><td style="text-align:center">0177</td><td style="text-align:center">127</td><td style="text-align:center">0x7F</td><td style="text-align:center">DEL (delete)</td><td style="text-align:center">删除</td></tr></tbody></table></div><blockquote><p>可印刷字符：32-126.其余为控制、通信字符</p><p>数字：48(0011 0000)-57(0011 1001)</p><p>大写字母：65(0100 0001)-90(0101 1010)    <code>010</code> <code>0 0001</code>-<code>1 1010</code> 即<code>010</code>+<code>1</code>~<code>26</code></p><p>小写字母：97(0110 0001)-122(0111 1010)    <code>011</code> <code>0 0001</code>-<code>1 1010</code> 即<code>011</code>+<code>1</code>~<code>26</code></p></blockquote><h3 id="中文字符在计算机中的表示"><a href="#中文字符在计算机中的表示" class="headerlink" title="中文字符在计算机中的表示"></a>中文字符在计算机中的表示</h3><blockquote><p>英文只有26个字母，而中文拥有非常多的字符，8 bit最多表示256个字符，显然用8 bit表示中文字符是不够的，在计算机中表示中文字符就需要新的编码方式</p></blockquote><ol><li>1980年<code>GB 2312-80</code>：汉字+各种符号共7445个</li><li>2000年<code>GB 18030</code></li><li>其他编码：<ol><li>UTF-8</li></ol></li></ol><p><img src="/images/计算机中数据的表示与运算/image-20220418162649577.png" alt="汉字输入输出在计算机内部编码转换过程"></p><h3 id="字符串的存储"><a href="#字符串的存储" class="headerlink" title="字符串的存储"></a>字符串的存储</h3><p>如：假如计算机按字节编址，从地址为15的单元开始，在计算机中存储字符串<code>abc啊</code>，由ASCII编码我们可得到<code>abc</code>对应的编码值，分别存储在字节地址为15、16、17的存储单元中，<code>啊</code>对应的机内码为<code>B0 A1H</code>，用两个字节表示，存储在地址为18、19两个字节当中(1个字节表示区码，1个字节表示位码)。汉字编码对ASCII编码进行兼容处理，最高位为1，可以区别字符是汉字还是英文字符</p><blockquote><p>很多语言中用<code>\0</code>作为字符串结尾标志。</p></blockquote><p><img src="/images/计算机中数据的表示与运算/image-20220418162649572.png" alt="字符串&quot;abc啊&quot;的存储"></p><blockquote><p><code>啊</code>用两个字节表示，机器码为<code>B0 A1H</code>，上图将<code>啊</code>的最高有效字节<code>B0</code>存放在低地址单元<code>18</code>中，采用的是大端存储方式。也可采用小端模式，将<code>啊</code>的最高有效字节<code>B0</code>存放在高地址单元<code>19</code>中。</p><p>大端模式与小端模式具体看<a href="#数据的存储和排列">数据的存储</a></p></blockquote><h1 id="数据的校验-检错与纠错"><a href="#数据的校验-检错与纠错" class="headerlink" title="数据的校验-检错与纠错"></a>数据的校验-检错与纠错</h1><blockquote><p>数据在计算机内部或计算机之间由于元器件故障或干扰等因素导致在存储或传输过程中出现错误，为了判断数据的正确与否，我们就需要对数据进行校验查看数据是否出错，如果数据出错能否自动纠错。</p></blockquote><h2 id="检验码"><a href="#检验码" class="headerlink" title="检验码"></a>检验码</h2><blockquote><p>校验码是指能够发现或能够自动纠正错误的数据编码，也称检错纠错编码。 </p><p>检验码的原理是通过增加一些冗余码，来检验或纠错编码。</p></blockquote><ol><li><code>码字</code>：由若干位代码组成的一个字</li><li><code>两个码字间的距离</code>：将两个码字逐位进行比对，具有不同的位的个数</li><li><code>码距d</code>：一种编码方案可能有若干个合法码字，各合法码字间的最小距离<ol><li>假如一种编码方案中有合法码字的码距为1，其中1位错误，码字就会跳变成另一合法码字，就无法检错，所以编码的合法码字<code>码距至少为2</code>才具有检错功能</li></ol></li></ol><blockquote><p>当码距d=1时，无检错能力；当码距d=2时，有检错能力；当码距d≥3时，若设计合理，可能具有检错、纠错能力</p></blockquote><h2 id="奇偶校验码"><a href="#奇偶校验码" class="headerlink" title="奇偶校验码"></a>奇偶校验码</h2><p>奇校验码：整个检验码（有效信息位和校验位）中“1”的个数为奇数。</p><p>偶校验位：整个校验码（有效信息位和检验位）中“1”的个数为偶数。</p><p><img src="/images/计算机中数据的表示与运算/image-20220418200825030.png" alt="奇偶校验码"></p><p><strong>实例</strong>：给出两个编码<code>1001101</code>和<code>1010111</code>的奇校验码和偶校验码。</p><p>设最高位为校验位，余7位是信息位，则对应的奇偶校验码为：</p><div class="table-container"><table><thead><tr><th style="text-align:center">有效信息位</th><th style="text-align:center"><code>100 1101</code></th><th style="text-align:center"><code>101 0111</code></th><th style="text-align:center">“1”的个数</th></tr></thead><tbody><tr><td style="text-align:center">奇校验码</td><td style="text-align:center"><code>1 100 1101</code></td><td style="text-align:center"><code>0 101 0111</code></td><td style="text-align:center">使”1”为奇数个</td></tr><tr><td style="text-align:center">偶校验码</td><td style="text-align:center"><code>0 100 1101</code></td><td style="text-align:center"><code>1 101 0111</code></td><td style="text-align:center">使”1”为偶数个</td></tr></tbody></table></div><blockquote><ul><li>偶校验位的硬件实现：各有效信息位进行异或（模2加）运算，得到的结果即为偶校验位<ul><li>求偶校验位：对各有效信息位进行异或运算</li><li>进行偶校验：对奇偶校验码所有位进行异或，结果为1说明出错</li></ul></li></ul></blockquote><h3 id="奇偶校验原理"><a href="#奇偶校验原理" class="headerlink" title="奇偶校验原理"></a>奇偶校验原理</h3><blockquote><p>由于二进制只有两个数码0和1，若bit位发生错误只能是0变成1 或 1变成0，发生位跳变错误就会导致1的数量发生变化，奇偶校验码就是通过增加1位奇偶校验位来统一所有编码中1的个数为奇数或偶数，只要发生奇数个bit位跳变，编码中1的个数的奇偶性就会发生变化，从而知道数据出错了！</p></blockquote><ul><li>对于上述实例如果有1位跳变<ul><li>对于奇校验码则原来的奇数个1变为偶数个1</li><li>对于偶校验码则原来的偶数个1变为奇数个1</li></ul></li><li>由此可以看出与原先规定的1的个数奇偶性发生变化，则说明数据出错了，奇偶校验码完成1位跳变检错功能</li><li>但是：<ul><li>如果上述实例有2位跳变，数据中1个数因为偶数次跳变，1的个数奇偶性不发生变化，虽然数据出错了，但是奇偶校验码不能确定数据出错，奇偶检验码不能完成2位跳变检错功能</li></ul></li></ul><blockquote><p>综上所述：<code>奇偶校验码只能检测奇数个bit位出错，不能检测偶数个bit位出错，与此同时，奇偶校验码也不能确定是哪个bit位发生错误，不具备纠错功能</code></p></blockquote><h2 id="海明检验码"><a href="#海明检验码" class="headerlink" title="海明检验码"></a>海明检验码</h2><blockquote><p>海明码设计思路：<code>将信息位分组进行偶校验</code>——多个校验位</p><p>奇偶校验码使用1 bit校验位，只能携带两种状态信息（即数据的对/错），海明码采用多个校验位，能够携带多种状态信息（对/错，错在哪），不仅可以知道数据是否出错，也能定位到出错的bit位</p></blockquote><ol><li><p>海明码思路是将信息位分组进行偶校验</p></li><li><p>海明码的构成：信息位n位+校验位k——海明码共有n+k位</p></li><li><p>海明码求解步骤</p><p><img src="/images/计算机中数据的表示与运算/image-20220419135108575.png" alt="海明码求解步骤"></p><p><img src="/images/计算机中数据的表示与运算/image-20220419135521486.png" alt="海明码检错纠错"></p><blockquote><ul><li>信息位：$D_{…}D_5D_4D_3D_2D_1$</li><li>校验位：$P_{…}P_5P_4P_3P_2P_1$</li><li>海明码：$H_{…}H_5H_4H_3H_2H_1$</li></ul></blockquote><ol><li><p>确定校验位个数-需要多少个校验位？</p><ol><li><p>k个校验位有$2^k$种状态</p></li><li><p>海明码共有n+k位，每一位出错都是1种错误状态，n+k位就有n+k个单bit错误状态</p></li><li><p>同时还有1种未出错的状态（数据正确状态）</p></li><li><p>所以要能检测所有bit的状态正确与否，其k个校验位表征的$2^k$种状态应不少于n+k个单bit错误转态和1中正确状态</p></li><li><blockquote><p><strong>求校验位个数k：$2^k≥n+k+1$</strong></p></blockquote></li></ol></li><li><p>确定校验位的分布</p><ol><li>校验位 $P_i$ 应该放在海明码位号为$2^{i-1}$的位置上，即校验位 $P_i$ 对应放在海明码 $H_{2^{i-1}}$，转化结果校验位一般放在海明码对应的二进制位权上，即$H_{…}H_{16}H_8H_4H_2H_1$上</li><li>信息位$D_i$按顺序放在海明码其余位置上</li></ol></li><li><p>求校验位的值</p><ol><li></li></ol></li><li><p>检错纠错</p></li><li><p>海明码加全校验位对海明码整体进行偶校验</p><blockquote><p>为了区分1位错和2位错</p></blockquote></li></ol><p><img src="/images/计算机中数据的表示与运算/image-20220419150240198.png" alt="海明码加全校验位进行整体偶校验"></p></li></ol><blockquote><p>综上所述：<code>海明码具有检错、纠错能力。1位纠错能力，2位检错能力</code></p><ol><li><code>1位纠错能力</code>：当发生1 bit的错误时，海明码能检查到错误，并能够定位错误位置，纠正数据</li><li><code>2位检错能力</code>：当发生2 bit的错误时，海明码能检查到错误，但是不能正确定位到出错位置，无法纠正数据</li></ol></blockquote><h2 id="循环冗余校验码（CRC码）"><a href="#循环冗余校验码（CRC码）" class="headerlink" title="循环冗余校验码（CRC码）"></a>循环冗余校验码（CRC码）</h2><blockquote><p>循环冗余校验码的基本思想：数据的发送方和接收方约定一个<strong>除数</strong>，让数据（被除数：循环冗余校验码=信息位+校验位）除以这个除数，<strong>检查余数</strong>是否发生改变</p><p>​    <img src="/images/计算机中数据的表示与运算/image-20220419151404187.png" alt="循环冗余校验码构成"></p><ol><li>数据发送、接收方约定一个<code>除数</code></li><li>K个信息位+R个校验位作为<code>被除数</code>，添加校验位后需保证除法的余数为0</li><li>收到数据后，进行除法检查余数是否为0<ol><li>若余数非0说明出错，则进行数据重传或纠错</li></ol></li></ol></blockquote><h3 id="实例-循环冗余校验码"><a href="#实例-循环冗余校验码" class="headerlink" title="实例-循环冗余校验码"></a>实例-循环冗余校验码</h3><ol><li><p>设生成多项式$G(x)=x^3+x^2+1$，信息码为101001，求对应的CRC码。</p><ol><li><p>确定信息位位数K，校验位位数R和生成多项式对应的二进制码</p><ol><li>确定信息位的位数K=信息码的长度=6</li><li>确定校验位的位数R=生成多项式最高次幂=3</li><li>循环冗余校验码位数N=K+R=6+3=9</li><li>确定<code>除数</code>-确定生成多项式对应的二进制码<ol><li>将$G(x)=x^3+x^2+1$中$x$的系数转换成对应的二进制<ol><li>先将$G(x)=x^3+x^2+1$补齐二项式为$G(x)=1×x^3+1×x^2+0×x^1+1×x^0$</li></ol></li><li>生成多项式$G(x)=x^3+x^2+1$对应的二进制码为<code>1101</code></li></ol></li></ol></li><li><p>移位</p><ol><li>信息码左移R位，低位补0 ，得到<code>101001 000</code></li></ol></li><li><p>相除</p><ol><li>对移位后的信息码，用生成多项式进行<code>模2除法</code>，产生R位余数：<code>001</code></li><li>对应的CRC码为：<code>101001 001</code></li></ol><p><img src="/images/计算机中数据的表示与运算/image-20220419154110858.png" alt="模2除"></p></li><li><p>检错</p><ol><li><p>发送：<code>101001 001</code> </p></li><li><p>接收：<code>101001 001</code>，用<code>1101</code>进行模2除</p><ol><li>余数为<code>000</code>，代表没有出错</li></ol></li><li><p>接收：<code>101001 011</code>，用<code>1101</code>进行模2除，</p><ol><li>余数为<code>010</code>，代表数据出错</li></ol></li></ol></li><li><p>关于纠错-定位出错位置的问题</p><p><img src="/images/计算机中数据的表示与运算/image-20220419155912172.png" alt="CRC码纠错的问题"></p><blockquote><p>对于上述实例，N=9，而校验位位数R=3，只能校验$2^3=8$个位置的状态，N=9&gt;8，在上述实例中不能实现完全纠错功能。</p><p>但是，对于确定的生成多项式，出错位与余数是相对应的，如上述实例，前三个余数与出错位一一对应，注意是位置上的一一对应，不是二进制转换对应的位置，为什么出现这种情况，CRC是否还具备纠错功能？</p></blockquote><ul><li>K个信息位，R个校验位，若生成多项式选择得当，且能够保证$2^R≥K+R+1$，则CRC码可纠正1位错——类比海明码</li></ul></li></ol><blockquote><p>综上所述，循环冗余校验码，具有检错功能，并具有一定的纠错功能，实际应用中CRC码一般只用来检错，很少用来纠错</p><ul><li>理论上可以证明循环冗余校验码的检错能力有以下特点：<ol><li>可检测出所有奇数个错误</li><li>可检测出所有双比特的错误</li><li>可检测出所有小于等于校验位长度R的连续错误</li></ol></li></ul></blockquote></li></ol><h1 id="数值数据的二进制表示方法与运算"><a href="#数值数据的二进制表示方法与运算" class="headerlink" title="数值数据的二进制表示方法与运算"></a>数值数据的二进制表示方法与运算</h1><blockquote><ol><li><p>计算机中的数值数据的二进制表示方法</p></li><li><p>数值数据的表示方法</p><ol><li>定点数：小数点的位置固定——常规计数：$996.007$<ol><li>定点整数</li><li>定点小数</li></ol></li><li>浮点数（实数）：小数点的位置浮动——科学计数：$9.96077×10^2$</li></ol></li><li>数的性质<ol><li>无符号数</li><li>有符号数</li></ol></li></ol></blockquote><h2 id="定点数的表示"><a href="#定点数的表示" class="headerlink" title="定点数的表示"></a>定点数的表示</h2><p><img src="/images/计算机中数据的表示与运算/定点数的表示.svg" alt="定点数的表示"></p><h3 id="定点数-无符号数表示形式"><a href="#定点数-无符号数表示形式" class="headerlink" title="定点数-无符号数表示形式"></a>定点数-无符号数表示形式</h3><blockquote><p>通常只有无符号整数，而没有无符号小数</p></blockquote><ol><li>无符号数：整个机器字长的全部二进制位均为数值位，没有符号位，相当于数的绝对值。</li><li>$n$位无符号数表示范围为：$0～2^n-1$</li></ol><div class="table-container"><table><thead><tr><th style="text-align:center">$2^{16}$</th><th style="text-align:center">$2^{15}$</th><th style="text-align:center">$2^{14}$</th><th style="text-align:center">$2^{13}$</th><th style="text-align:center">$2^{12}$</th><th style="text-align:center">$2^{11}$</th><th style="text-align:center">$2^{10}$</th><th style="text-align:center">$2^{9}$</th><th style="text-align:center">$2^{8}$</th><th style="text-align:center">$2^{7}$</th><th style="text-align:center">$2^{6}$</th><th style="text-align:center">$2^{5}$</th><th style="text-align:center">$2^{4}$</th><th style="text-align:center">$2^{3}$</th><th style="text-align:center">$2^{2}$</th><th style="text-align:center">$2^{1}$</th><th style="text-align:center">$2^{0}$</th><th style="text-align:center">$2^{-1}$</th><th style="text-align:center">$2^{-2}$</th><th style="text-align:center">$2^{-3}$</th></tr></thead><tbody><tr><td style="text-align:center">65536</td><td style="text-align:center">32768</td><td style="text-align:center">16384</td><td style="text-align:center">8192</td><td style="text-align:center">4096</td><td style="text-align:center">2048</td><td style="text-align:center">1024</td><td style="text-align:center">512</td><td style="text-align:center">256</td><td style="text-align:center">128</td><td style="text-align:center">64</td><td style="text-align:center">32</td><td style="text-align:center">16</td><td style="text-align:center">8</td><td style="text-align:center">4</td><td style="text-align:center">2</td><td style="text-align:center">1</td><td style="text-align:center">0.5</td><td style="text-align:center">0.25</td><td style="text-align:center">0.125</td></tr></tbody></table></div><h3 id="定点数-有符号数表示形式"><a href="#定点数-有符号数表示形式" class="headerlink" title="定点数-有符号数表示形式"></a>定点数-有符号数表示形式</h3><blockquote><p>定点数小数点位置固定</p><p><img src="/images/计算机中数据的表示与运算/image-20220419170455006.png" alt="定点数-有符号数的表示形式"></p><p>可用原码、反码、补码三种方式来表示定点整数和定点小数。还可用移码表示定点整数</p></blockquote><h4 id="原码"><a href="#原码" class="headerlink" title="原码"></a>原码</h4><ol><li>原码：用数值部分表示真值的绝对值，符号位<code>0/1</code>对应<code>正/负</code></li><li>若机器字长为$n+1$位，则符号占1位，数值部分占n位，符号位在最高位</li><li>原码表示定点整数<ol><li>若机器字长为$n+1$位，原码整数表示范围：$-(2^n-1)～2^n-1$（关于0对称）</li><li>原码对于真值<code>0</code>的表示方式有2种：以机器字长为8位为例<ol><li>$[﹢0]_原$：<code>0 000 0000</code></li><li>$[﹣0]_原$：<code>1 000 0000</code></li></ol></li></ol></li><li>原码表示定点小数<ol><li>若机器字长为$n+1$位，原码整数表示范围：$-(1-2^n)～1-2^n$（关于0对称）</li><li>原码对于真值<code>0</code>的表示方式有2种：以机器字长为8位为例<ol><li>$[﹢0]_原$：<code>0 000 0000</code></li><li>$[﹣0]_原$：<code>1 000 0000</code></li></ol></li></ol></li></ol><h4 id="反码"><a href="#反码" class="headerlink" title="反码"></a>反码</h4><blockquote><p>反码只是原码转变为补码的一个中间状态，实际上没什么用</p></blockquote><ol><li>反码：<ol><li>若符号位为0，则反码与原码相同</li><li>若符号位为1，则数值位全部取反</li></ol></li><li>反码表示定点整数<ol><li>若机器字长为$n+1$位，反码整数表示范围：$-(2^n-1)～2^n-1$（关于0对称）</li><li>反码对于真值<code>0</code>的表示方式有2种：以机器字长为8位为例<ol><li>$[﹢0]_反$：<code>0 000 0000</code></li><li>$[﹣0]_反$：<code>1 111 1111</code></li></ol></li></ol></li><li>反码表示定点小数<ol><li>若机器字长为$n+1$位，反码整数表示范围：$-(1-2^n)～1-2^n$（关于0对称）</li><li>反码对于真值<code>0</code>的表示方式有2种：以机器字长为8位为例<ol><li>$[﹢0]_反$：<code>0 000 0000</code></li><li>$[﹣0]_反$：<code>1 111 1111</code></li></ol></li></ol></li></ol><h4 id="补码"><a href="#补码" class="headerlink" title="补码"></a>补码</h4><blockquote><p>补码——让减法操作变为加法操作，只需要设计加法器就可以同时完成加减法操作，节省硬件成本</p></blockquote><ol><li>补码：<ol><li>整数的补码=原码</li><li>负数的补码=反码末位+1</li></ol></li><li>补码表示定点整数<ol><li>若机器字长为$n+1$位，补码整数表示范围：$-2^n～2^n-1$（关于0不对称，0只有1种表示方式）</li><li>补码对于真值<code>0</code>的表示方式有1种：以机器字长为8位为例<ol><li>$[﹢0]_补$ = $[﹣0]_补$：<code>0 000 0000</code></li><li>规定$[-2^8]_补$=<code>1 000 0000</code>，所以补码比原码多了1个$-2^n$</li></ol></li></ol></li><li>补码表示定点小数<ol><li>若机器字长为$n+1$位，补码整数表示范围：$-1～1-2^n$（关于0不对称，0只有1种表示方式）</li><li>补码对于真值<code>0</code>的表示方式有2种：以机器字长为8位为例<ol><li>$[﹢0]_补$ = $[﹣0]_补$：<code>0 000 0000</code></li><li>规定$[-1]_补$=<code>1 000 0000</code>，所以补码比原码多了1个$-1$</li></ol></li></ol></li><li>补码的作用：使用补码可将减法操作转变为等价的加法，ALU中无需集成减法器。执行加法操作时，符号位一起参与运算</li></ol><blockquote><p>关于补码与数论中模运算的联系</p></blockquote><h4 id="移码"><a href="#移码" class="headerlink" title="移码"></a>移码</h4><ol><li><p>移码：补码的基础上将符号位取反。</p></li><li><p>移码表示定点整数</p><blockquote><p>移码只能用于表示整数</p></blockquote><ol><li>若机器字长为$n+1$位，补码整数表示范围：$-2^n～2^n-1$（与补码相同）</li></ol></li><li><p>移码的作用</p><p><img src="/images/计算机中数据的表示与运算/image-20220419181642033.png" alt="移码有什么用？"></p><blockquote><p>移码保持了数据原有的大小顺序。移码大，真值就大；移码小，真值就小。方便硬件对数值比大小</p></blockquote></li></ol><h3 id="定点数-真值与机器数的转换训练"><a href="#定点数-真值与机器数的转换训练" class="headerlink" title="定点数-真值与机器数的转换训练"></a>定点数-真值与机器数的转换训练</h3><p><img src="/images/计算机中数据的表示与运算/image-20220419201058733.png" alt="真值-机器数转换"></p><p><img src="/images/计算机中数据的表示与运算/image-202204191829-16503651262501.png" alt="真值-机器数转换"></p><blockquote><p>给定任意真值或机器数应能够快速转换其对应的机器数或真值</p><ol><li>由$[x]_补$快速求$[-x]_补$的方法<ol><li>符号位、数值位全部取反，末位+1</li><li>c因为$[x]_补+[-x]_补=0$</li></ol></li></ol></blockquote><h2 id="定点数的运算"><a href="#定点数的运算" class="headerlink" title="定点数的运算"></a>定点数的运算</h2><h3 id="定点数-移位运算"><a href="#定点数-移位运算" class="headerlink" title="定点数-移位运算"></a>定点数-移位运算</h3><blockquote><p>可补<code>数电移位寄存器</code>相关知识</p></blockquote><h4 id="算数移位"><a href="#算数移位" class="headerlink" title="算数移位"></a>算数移位</h4><blockquote><p>算术移位：符号位保持不变，仅对数值位进行移动</p><p>左移相当于×2；右移相当于÷2</p></blockquote><ol><li><p>原码的算术移位——符号位保持不变，仅对数值位进行移位</p><ol><li>右移：高位补0，低位舍弃。若舍弃的位=0，则相当于÷2；若舍弃的位≠0，则会丢失精度</li><li>左移：低位补0，高位舍弃。若舍弃的位=0，则相当于×2；若舍弃的位≠0，高位丢失，则会出现严重误差</li></ol></li><li><p>反码的算术移位</p><ol><li>正数的反码与原码相同，因此对正数反码的移位运算也和原码相同<ol><li>右移：高位补0，低位舍弃</li><li>左移：低位补0，高位舍弃</li></ol></li><li>负数的反码数值位与原码相反，因此负数反码的移位运算规则如下<ol><li>右移：高位补1，低位舍弃</li><li>左移：低位补1，高位舍弃</li></ol></li></ol></li><li><p>补码的算术移位</p><ol><li><p>正数的补码与原码相同，因此对正数补码的移位运算也和原码相同</p><ol><li>右移：高位补0，低位舍弃</li><li>左移：低位补0，高位舍弃</li></ol></li><li><p>负数补码的算术移位</p><blockquote><p>负数补码=反码末位+1，导致反码最右边几个连续的1都因进位而变为0，直接进位碰到第一个0为止</p><p>规律：负数补码中，最右边的1及其右边同原码；最右边的1的左边同反码</p><p><img src="/images/计算机中数据的表示与运算/image-20220419214146722.png" alt="负数补码特点"></p></blockquote><ol><li>右移：高位补   1，低位舍弃</li><li>左移：低位补0，高位舍弃</li></ol></li></ol></li></ol><h4 id="逻辑移位"><a href="#逻辑移位" class="headerlink" title="逻辑移位"></a>逻辑移位</h4><blockquote><p>对数据整体（包括符号位与数值位）移位，可以把逻辑移位看作是对<code>无符号数</code>的算数移位</p><p>逻辑右移：高位补0，低位舍弃</p><p>逻辑左移：低位补0，高位舍弃</p></blockquote><h4 id="循环移位"><a href="#循环移位" class="headerlink" title="循环移位"></a>循环移位</h4><p><img src="/images/计算机中数据的表示与运算/image-20220419215612735.png" alt="循环移位"></p><ol><li>循环左移：溢出高位补低位</li><li>循环右移：溢出低位补高位</li><li>带进位位的循环左移：进位位CF作为高位，高位溢出补低位</li><li>带进位位的循环右移：进位位CF作为高位，低位溢出补高位（进位位CF）</li></ol><blockquote><p>循环移位可用于多字节数据大端存储与小端存储两种模式的转换</p></blockquote><h3 id="定点数-加减运算"><a href="#定点数-加减运算" class="headerlink" title="定点数-加减运算"></a>定点数-加减运算</h3><h4 id="原码的加减运算"><a href="#原码的加减运算" class="headerlink" title="原码的加减运算"></a>原码的加减运算</h4><blockquote><p>加法器直接对原码进行加法运算，需要考虑符号位的处理，而且可能出错</p></blockquote><ol><li><p>原码的加法运算</p><ol><li>正+正：绝对值做加法，结果为正——可能会溢出</li><li>负+负：绝对值做加法，结果为负——可能会溢出</li><li>正+负：绝对值大的减绝对值小的，符号同绝对值大的数（用减法器实现）</li><li>负+正：绝对值大的减绝对值小的，符号同绝对值大的数（用减法器实现）</li></ol></li><li><p>原码的减法运算，减数的符号取反，转变为加法：    </p><ol><li>正-负：正+正</li><li>负-正：负+负</li><li>正-正：正+负</li><li>负+正：负-负</li></ol></li></ol><blockquote><p>用原码实现加减运算太复杂了，所以才有了补码，因为补码用于加减运算只需一个加法器就可以完成</p></blockquote><h4 id="补码的加减运算"><a href="#补码的加减运算" class="headerlink" title="补码的加减运算"></a>补码的加减运算</h4><blockquote><p>对补码进行加减运算不需要考虑符号位，符号位直接参与运算</p><p>不论加法还是减法,最后都转变成加法，由加法器实现运算</p></blockquote><ol><li>$[A+B]_补=[A]_补+[B]_补$</li><li>$[A-B]_补=[A]_补+[-B]_补$</li></ol><h4 id="补码加法运算的溢出判断"><a href="#补码加法运算的溢出判断" class="headerlink" title="补码加法运算的溢出判断"></a>补码加法运算的溢出判断</h4><blockquote><p>溢出：两个数加减运算，结果超过了机器字长表示数的范围，导致计算结果出错</p><p><img src="/images/计算机中数据的表示与运算/image-20220420112946812.png" alt="溢出"></p><ol><li>上溢：只有<code>正数+正数</code>才会上溢——正+正=负（两个正数相加计算结果表现为负）</li><li>下溢：只有<code>负数+负数</code>才会上溢——负+负=正（两个负数相加计算结果表现为正）</li></ol></blockquote><ol><li><p>采用一位符号位</p><p>设A的符号为$A_s$，B的符号为$B_s$，运算结果的符号为$S_s$，则溢出逻辑表达式为<br>$V=A_sB_s\bar{S_s}+ \bar{A_s}\bar{B_s}S_s$</p><blockquote><p>此处逻辑表达式相关知识请看数字电路或离散数学</p></blockquote><ol><li>若V=0，表示无溢出;</li><li>若V=1，表示有溢出。</li></ol></li><li><p>采用一位符号位，根据数据位进位情况判断溢出</p><p>符号位的进位$C_s$，最高数值位的进位$C_1$</p><p><img src="/images/计算机中数据的表示与运算/image-20220420122541467.png" alt="溢出判断"></p><ol><li><p>上溢：$C_s=0$，$C_1=1$</p></li><li><p>下溢：$C_s=1$，$C_1=0$</p><blockquote><p>$C_s$与$C_1$不同时有溢出</p></blockquote></li></ol></li></ol><h3 id="定点数-乘法运算"><a href="#定点数-乘法运算" class="headerlink" title="定点数-乘法运算"></a>定点数-乘法运算</h3><h3 id="定点数-除法运算"><a href="#定点数-除法运算" class="headerlink" title="定点数-除法运算"></a>定点数-除法运算</h3><h2 id="浮点数的表示"><a href="#浮点数的表示" class="headerlink" title="浮点数的表示"></a>浮点数的表示</h2><h1 id="数据的存储和排列"><a href="#数据的存储和排列" class="headerlink" title="数据的存储和排列"></a>数据的存储和排列</h1><p>大端小端</p><p>边界对齐 </p><h1 id="运算器如何实现数据的算数、逻辑运算？"><a href="#运算器如何实现数据的算数、逻辑运算？" class="headerlink" title="运算器如何实现数据的算数、逻辑运算？"></a>运算器如何实现数据的算数、逻辑运算？</h1><h2 id="二进制算术运算"><a href="#二进制算术运算" class="headerlink" title="二进制算术运算"></a>二进制算术运算</h2><ol><li>加法运算 (进位运算)</li><li>减 法运算(借位运算)</li><li>乘法运算(转化为位权移位加法运算)</li></ol>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机中数据存储器的构成！</title>
      <link href="/posts/eaded48d/"/>
      <url>/posts/eaded48d/</url>
      
        <content type="html"><![CDATA[<h1 id="存储器概述"><a href="#存储器概述" class="headerlink" title="存储器概述"></a>存储器概述</h1><h2 id="存储器的分类"><a href="#存储器的分类" class="headerlink" title="存储器的分类"></a>存储器的分类</h2><p><img src="/images/610-存储系统/计算机存储器类型.svg" alt="计算机存储器类型"></p><ol><li><strong>按在计算机中的作用（层次）分类</strong><ol><li><a href="#主存储器(内存">主存储器</a>的基本组成)<ul><li>DRAM</li><li>简称主存，又称内存储器（内存），用来存放计算机中运行期间所需的大量程序和数据，CPU可以直接随机地对其进行访问，也可以和高速缓冲存储器（Cache）及辅助存储器交换数据。</li><li>其特点是容量小、存取速度较快、每位价格较高</li></ul></li><li>辅助存储器<ul><li>ROM</li><li>简称辅存，又称外存储器（外存），是主存储器的后援存储器，用来存放当前暂时不用的程序和数据，以及一些需要永久保存的信息，它不能与CPU直接交换信息。</li><li>其特点是容量极大、存取速度较慢、单位成本低</li></ul></li><li>高速缓冲存储器<ul><li>SRAM</li><li>简称Cache，位于贮存和CPU之间，用来存放正在执行的程序段和数据，以便CPU能高速地使用它们。Cache的存取速度可与CPU的速度相匹配，但存储容量小、价格高。</li><li>现代计算机通常将它们制作在CPU中</li></ul></li></ol></li><li>随机存储器RAM与只读存储器ROM<ol><li>RAM<ol><li>SRAM</li><li>DRAM</li></ol></li><li>ROM</li></ol></li><li>现实中常用存储设备及接口<ol><li>存储设备<ol><li>机械硬盘</li><li>固态硬盘</li></ol></li><li>接口<ol><li>M.2</li><li>SATA</li><li>NVMe等</li></ol></li></ol></li></ol><h2 id="存储器的性能指标"><a href="#存储器的性能指标" class="headerlink" title="存储器的性能指标"></a>存储器的性能指标</h2><ol><li><p>存储容量=存储字数×字长</p></li><li><p>单位成本：每位价格=总成本/总容量</p></li><li><p>存储速度：数据传输率=数据的宽度/存储周期</p><ol><li>存取时间T~a~：存取时间是指从启动一次存储器操作到完成该操作所经历</li><li>存取周期T~m~：存取周期又称为读写周期或访问周期。它是指存储器进行一次完整的读写操作所需的全部时间，即连续两次独立地访问存储器操作（读或写操作）之间所需的最小时间间隔。</li><li>主存带宽B~m~：主存带宽又称数据传输率，表示每秒从主存进出信息的最大数量，单位为字/秒、字节/秒（B/s）或位/秒（b/s）</li></ol><p><img src="/images/610-存储系统/20200509122542663.png" alt="存取时间与存取周期的关系"></p></li></ol><h1 id="存储器的层次化结构"><a href="#存储器的层次化结构" class="headerlink" title="存储器的层次化结构"></a>存储器的层次化结构</h1><p>为了解决存储系统大容量、高速度和低成本3个相互制约的矛盾，在计算机系统中，通常采用了多级存储结构。如图所示。在图中由上至下，位价越来越低，速度越来越慢，容量越来越大，CPU 访问的频度也越来越低。</p><p><img src="/images/610-存储系统/0b558372742e4bc195ba3192ae36fc93.png" alt="多级存储器结构"></p><p>实际上，存储系统层次结构主要体现在<code>Cache-主存</code>层次和<code>主存-辅存</code>层次。在存储体系中，Cache、主存能与CPU直接交换信息，辅存则要通过主存与CPU交换信息；主存与CPU，Cache，辅存都能交换信息，如图所示。</p><p><img src="/images/610-存储系统/41e49e7b5fb64ac79fab5b9ee7fb6767.png" alt="三级存储系统的层次结构及其构成"></p><blockquote><p>存储器层次结构的主要思想是上一层的存储器作为低一层存储器的高速缓存。</p></blockquote><ul><li><p>Cache-主存</p><ul><li>主要解决<strong>CPU和主存速度不匹配的问题</strong></li><li>速度接近于Cache，容量和位价却接近于主存</li></ul></li><li><p>主存-辅存</p><ul><li><p>主要解决<strong>存储系统的容量问题</strong></p></li><li><p>速度接近于主存,容量和位价却接近于辅存</p></li><li><p>虚拟存储器</p></li><li><blockquote><p>在<code>主存-辅存</code>这一层次的不断发展中,逐渐形成了==虚拟存储系统==，在这个系统中程序员编程的地址范围与虚拟存储器的地址空间相对应。对具有虚拟存储器的计算机系统而言，编程时可用的地址空间远大于主存空间。</p></blockquote></li></ul></li></ul><p>这就解决了速度、容量、成本这三者之间的矛盾，现代计算机系统儿乎都采用这种三级存储系统。需要注意的是，主存和 Cache之间的数据调动是出<code>硬件</code>自动完成的，对<code>所有程序员</code>均是<code>透明</code>的；而主存和辅存之间的数据调动则是由<code>硬件和操作系统</code>共同完成的，对<code>应用程序员</code>是<code>透明</code>的。</p><blockquote><p>注意：在<code>Cache-主存</code>和<code>主存-辅存</code>层次中，上一层中的内容都只是下一层中的内容的副本，也即Cache(或主存）中的内容只是主存(或辅存)中的内容的一部分</p></blockquote><h1 id="半导体随机存储器"><a href="#半导体随机存储器" class="headerlink" title="半导体随机存储器"></a>半导体随机存储器</h1><p><strong><a href="https://zh.wikipedia.org/wiki/动态随机存取存储器">动态随机存取存储器</a></strong>（<strong>Dynamic Random Access Memory</strong>，<strong>DRAM</strong>）</p><p><strong><a href="https://zh.wikipedia.org/wiki/静态随机存取存储器">静态随机存取存储器</a></strong>（<strong>Static Random Access Memory，SRAM</strong>）</p><p>主存储器由DRAM实现，靠处理器的那一层(Cache) 则由SRAM实现，它们都属于<code>易失性存储器</code>，只要电源被切断，原来保存的信息便会丢失。DRAM的每比特成本低于SRAM.速度也慢于SRAM，价格差异主要是因为制造DRAM需要更多的硅。而ROM属于<code>非易失性存储器</code>。</p><h2 id="SRAM与DRAM"><a href="#SRAM与DRAM" class="headerlink" title="SRAM与DRAM"></a>SRAM与DRAM</h2><ul><li>Cache由SRAM实现——易失性存储器</li><li>主存由DRAM实现——易失性存储器</li><li>外存由ROM实现——非易失性存储器</li></ul><h3 id="SRAM的工作原理"><a href="#SRAM的工作原理" class="headerlink" title="SRAM的工作原理"></a>SRAM的工作原理</h3><ul><li>通常把存放一个 二进制位的物理器件称为存储元，它是存储器的最基本的构件。地址码相同的多个存储元构成一个存储单元。若干存储单元的集合构成存储体。</li><li>静态随机存储器(SRAM) 的存储元是用<code>双稳态触发器</code>(六晶体管MOS) 来记忆信息的，因此即使信息被读出后，它仍保持其原状态而不需要再生(非破坏性读出)</li><li>SRAM的存取速度快，但集成度低，功耗较大，所以一般用来组成高速缓冲存储器。</li></ul><h3 id="DRAM工作原理"><a href="#DRAM工作原理" class="headerlink" title="DRAM工作原理"></a>DRAM工作原理</h3><p><img src="/images/610-存储系统/Square_array_of_mosfet_cells_read.png" alt="DRAM4×4矩阵模型"></p><p>与SRAM的存储原理不同，动态随机存储器(DRAM)是利用存储元电路中<strong>栅极电容上的电荷</strong>来存储信息的，DRAM的基本存储元通常只使用一个晶体管， 所以它比SRAM的密度要高很多。DRAM采用<code>地址复用技术</code>，地址线是原来的1/2，地址信号分行、列两次传送。</p><p>相对于SRAM来说，DRAM具有容易集成、位价低、容量大和功耗低等优点，但DRAM ,的存取速度比SRAM的慢，一-般用来组成大容量主存系统。</p><p>DRAM电容上的电荷般只能维持 1~ 2ms,因此即使电源不断电，信息也会自动消失。为此，每隔一定时间必须刷新，通常取2ms，称为刷新周期。常用的刷新方式有3种：</p><ol><li><strong>集中刷新</strong>：指在一个刷新周期内，利用段固定的时间，依次对存储器的所有行进行逐一再生，在此期间停止对存储器的读写操作，称为“死时间”，又称访存“死区”。优点是读写操作时不受刷新工作的影响:缺点是在集中刷新期间(死区)不能访问存储器。</li></ol><p>2) <strong>分散刷新</strong>：把对每行的刷新分散到各个工作周期中。这样，一个存储器的系统工作周期分为两部分：前半部分用于正常读、写或保持，后半部分用于刷新。这种刷新方式增加了系统的存取周期，如存储芯片的存取周期为0.5us， 则系统的存取周期为lus。优点是没有死区；缺点是加长了系统的存取周期，降低了整机的速度。<br>3) <strong>异步刷新</strong>：异步刷新是前两种方法的结合，它即可缩短”死时间“，又能充分利用最大刷新间隔为2ms的特点。具体做法是将刷新周期除以行数，得到两次刷新操作之间的时间间隔t。利用逻辑电路每隔时间t产生一次刷新请求。这样可以避免CPU连续等待过长的时间，而且减少了刷新次数，从根本上提高了整机的工作效率。</p><p>DRAM的刷新需要注意以下问题：</p><ul><li>刷新对CPU是透明的，即刷新不依赖于外部的访问</li><li>动态RAM的刷新单位是行，由芯片内部自行生成行地址</li><li>刷新操作类似于读操作，但又有所不同</li><li>刷新时不需要选片，即整个存储器的所有芯片同时被刷新</li></ul><blockquote><p>要注意易失性存储器和刷新的区别，易失性存储器是指断电后数据丢失，SRAM和DRAM都满足断电内容消失，但需要刷新的只有DRAM，而SRAM不需要刷新。</p></blockquote><h1 id="SRAM存储芯片的构成"><a href="#SRAM存储芯片的构成" class="headerlink" title="SRAM存储芯片的构成"></a>SRAM存储芯片的构成</h1><blockquote><p><strong>使用proteus仿真模拟</strong></p><p>Memory——存储/内存</p><p>在这一小节，通过AND-OR锁设计一个SRAM存储芯片来理解存储芯片的内部构成</p><p>也可使用<code>触发器</code>设计</p></blockquote><h2 id="存1位数据（Gated-Latch-锁存器）"><a href="#存1位数据（Gated-Latch-锁存器）" class="headerlink" title="存1位数据（Gated Latch-锁存器）"></a>存1位数据（Gated Latch-锁存器）</h2><blockquote><p>如何存储1 bit数据?</p></blockquote><h3 id="AND-OR-锁存器"><a href="#AND-OR-锁存器" class="headerlink" title="AND-OR 锁存器"></a>AND-OR 锁存器</h3><blockquote><p>SET输入，把输出变成1；RESET输入，把输出变成0</p></blockquote><ol><li>初始状态：SET=0，RESET=0——输出OUTPUT为空</li></ol><p><img src="/images/610-存储系统/image-20220316221835214.png" alt="AND-OR 锁存器_初始状态:SET=0,RESET=0"></p><ol><li>SET输入（置SET=1）——输出OUTPUT写入为1</li></ol><p><img src="/images/610-存储系统/image-20220316223003702.png" alt="image-20220316223003702"></p><ol><li>SET置1后，即使SET恢复为0，输出仍然保持为1（即成功写入数据1）</li></ol><p><img src="/images/610-存储系统/image-20220316222740325.png" alt="AND-OR 锁存器_成功写入1"></p><ol><li>RESET置1，复位，输出恢复为0</li></ol><p><img src="/images/610-存储系统/image-20220316223200974.png" alt="复位 输出为“0”"></p><h3 id="Gated-Latch-门锁"><a href="#Gated-Latch-门锁" class="headerlink" title="Gated Latch-门锁"></a>Gated Latch-门锁</h3><blockquote><p>通过AND-OR锁存器可以实现1位输出锁存，但是AND-OR锁存器是SET置1就写入，没有控制是否允许写入的的逻辑电路，所以要增加允许写入电路，就形成了一个完整的1 bit数据寄存器</p><p>WRITEENABLE允许写入为1时即可写入数据，DATAINPUT为1写入1，为0写入0，关闭WRITEENABLE（为0）即可锁存一位二进制数据</p></blockquote><ol><li>初始状态</li></ol><p><img src="/images/610-存储系统/image-20220317110347327.png" alt="初始状态"></p><ol><li>允许写入打开（置1），数据写入为1，则输出为1，写入为0，输出即为0</li></ol><p><img src="/images/610-存储系统/image-20220317110648584.png" alt="WRITEENABLE=1，DATAINPUT=1，DATAOUTPUT=1"></p><ol><li>允许写入关闭（置0），无论数据写入为1还是0，输出都锁存为1</li></ol><p><img src="/images/610-存储系统/image-20220317110953648.png" alt="WRITEENABLE=0，DATAINPUT=1，DATAOUTPUT=1"></p><p><img src="/images/610-存储系统/image-20220317111214320.png" alt="WRITEENABLE=0，DATAINPUT=0，DATAOUTPUT=1"></p><blockquote><p>输出DATAOUTPUT锁存为0同理，只要打开允许写入，输入置0，输出就写入0，关闭允许写入线，输出即可锁存为0</p></blockquote><h2 id="存8位数据（8-bit-Register-寄存器）"><a href="#存8位数据（8-bit-Register-寄存器）" class="headerlink" title="存8位数据（8-bit Register 寄存器）"></a>存8位数据（8-bit Register 寄存器）</h2><blockquote><p>通过门锁可以实现1位数据写入与锁存控制，要实现8位数据写入与锁存控制可以将8个门锁并连起来，共用1根允许写入控制线，这样就构成了8位寄存器。</p><p>WE打开，8根数据线DI同时写入对应额数据，然后关闭WE，即可锁存8位数据</p></blockquote><h3 id="8位寄存器仿真电路"><a href="#8位寄存器仿真电路" class="headerlink" title="8位寄存器仿真电路"></a>8位寄存器仿真电路</h3><ol><li>初始状态</li></ol><p><img src="/images/610-存储系统/image-20220317130217480.png" alt="初始状态：WE=0"></p><ol><li>打开WE（WE=1），允许写入数据</li></ol><p><img src="/images/610-存储系统/image-20220317130436022.png" alt="WE=1"></p><ol><li>写入数据</li></ol><blockquote><p>写入数据：假如写入数据<code>01101010</code>，则分别置对应的数据输入线为1</p></blockquote><p><img src="/images/610-存储系统/image-20220317130813513.png" alt="WE=1，DI=01101010，DO=01101010"></p><ol><li>关闭WE（WE=0），再关闭数据线DI，输出数据将锁存</li></ol><p><img src="/images/610-存储系统/image-20220317131014679.png" alt="WE=0，DI=0，DO=01101010"></p><blockquote><p>8 bit寄存器需要8根数据输入线、8根数据输出线和1根允许写入控制线，共17根线。</p><p>如果继续扩展位数的话，64 bit寄存器就需要64根数据输入线、64根数据输出线和1根允许写入控制线，共129根线。</p><p>需要注意的是：</p><ul><li>无论如何扩展存储器，允许写入控制线只需要1根就足够了</li><li>但是随着扩展位数越来越多，数据输入输出线也就越多，在集成电路中，这是浪费资源的。</li></ul></blockquote><h2 id="存储矩阵"><a href="#存储矩阵" class="headerlink" title="存储矩阵"></a>存储矩阵</h2><blockquote><p>为了解决数据线数随存储容量扩展而增多的问题，引入存储矩阵的概念，通过矩阵的地址可以定位每1个门锁，确定哪些门锁应该写入/读出数据，所有门锁共用数据输入线（即形成<code>数据总线</code>）</p></blockquote><h2 id="存储器容量的扩展"><a href="#存储器容量的扩展" class="headerlink" title="存储器容量的扩展"></a>存储器容量的扩展</h2><blockquote><p>门锁可以存1 bit数据，即存储字数为1，存储字长也为1，计数范围只有0~1，这与实际储存器的要求有很大差距，因此需要在字和位两方面进行扩充才能满足实际存储的容量要求。通常采用<code>位扩展法</code>，<code>字扩展法</code>，<code>字位同时扩展法</code>来扩展主存容量。</p></blockquote><h3 id="位扩展法"><a href="#位扩展法" class="headerlink" title="位扩展法"></a>位扩展法</h3><blockquote><p>在计算机中，CPU的数据线与存储芯片的数据线不一定相等，此时必须对存储芯片扩位（即进行位扩展，用多个门锁对字进行扩展，增加存储字长）使其数据位数与CPU的数据线相等。</p><ul><li>如现在笔记本电脑CPU一次处理数据长度一般为64 bit（即机器字长为64位，64位CPU），为了提高CPU与内存配合效率，内存应该与CPU字长相等<ul><li>说明：CPU字长64 bit时，如果内存存储字长为32 bit，CPU处理一次数据就要等内存传两次数据，浪费了CPU的性能，因此内存存储字长应该与CPU字长一致</li></ul></li></ul></blockquote><h4 id="存8位数据（Register-寄存器）"><a href="#存8位数据（Register-寄存器）" class="headerlink" title="存8位数据（Register-寄存器）"></a>存8位数据（Register-寄存器）</h4><h3 id="字扩展法"><a href="#字扩展法" class="headerlink" title="字扩展法"></a>字扩展法</h3><h1 id="主存储器-内存-的基本组成"><a href="#主存储器-内存-的基本组成" class="headerlink" title="主存储器(内存)的基本组成"></a>主存储器(内存)的基本组成</h1><p><img src="/_posts/images/存储系统/image-20220409200725183.png" alt="主存储器的结构"></p><ul><li>数据在存储体内按地址存储</li><li>MAR位数反映存储单元的个数</li><li>MDR位数=存储字长</li></ul><p>主存储器的数据写入与读出过程</p><ol><li>存储单元：每个存储单元存放一串二进制代码</li><li>存储字：存储单元中二进制代码的组合</li><li>存储字长：存储单元中二进制代码的位数</li><li>存储元：即存储二进制的电子元件，每个存储元可存1 bit</li></ol><p>​p>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 存储系统 </tag>
            
            <tag> 锁存器 </tag>
            
            <tag> 计组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言程序设计</title>
      <link href="/posts/a673609b/"/>
      <url>/posts/a673609b/</url>
      
        <content type="html"><![CDATA[<h1 id="C-程序结构"><a href="#C-程序结构" class="headerlink" title="C 程序结构"></a>C 程序结构</h1><p>在我们学习 C 语言的基本构建块之前，让我们先来看看一个最小的 C 程序结构，在接下来的章节中可以以此作为参考。</p><h2 id="C-Hello-World-实例"><a href="#C-Hello-World-实例" class="headerlink" title="C Hello World 实例"></a>C Hello World 实例</h2><p>C 程序主要包括以下部分：</p><ul><li>预处理器指令</li><li>函数</li><li>变量</li><li>语句 &amp; 表达式</li><li>注释</li></ul><p>让我们看一段简单的代码，可以输出单词 “Hello World”：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">/* 我的第一个 C 程序 */</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello, World! \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来我们讲解一下上面这段程序：</p><ol><li>程序的第一行 <code>*#include &lt;stdio.h&gt;*</code>是预处理器指令，告诉 C 编译器在实际编译之前要包含 stdio.h 文件。</li><li>下一行 <code>int main()</code>是主函数，程序从这里开始执行。</li><li>下一行 <code>/*...*/</code> 将会被编译器忽略，这里放置程序的注释内容。它们被称为程序的注释。</li><li>下一行 <code>printf(...);</code>是 C 中另一个可用的函数，会在屏幕上显示消息 “Hello, World!”。</li><li>下一行 <code>return 0;</code>终止 main() 函数，并返回值 0。</li></ol><h2 id="编译-amp-执行-C-程序"><a href="#编译-amp-执行-C-程序" class="headerlink" title="编译 &amp; 执行 C 程序"></a>编译 &amp; 执行 C 程序</h2><p>接下来让我们看看如何把源代码保存在一个文件中，以及如何编译并运行它。下面是简单的步骤：</p><ol><li>打开一个文本编辑器，添加上述代码。</li><li>保存文件为 <em><code>hello.c</code></em>。</li><li>打开命令提示符，进入到保存文件所在的目录。</li><li>键入 <em>gcc hello.c</em>，输入回车，编译代码。</li><li>如果代码中没有错误，命令提示符会跳到下一行，并生成 <em>a.out</em> 可执行文件。</li><li>现在，键入 <em>a.out</em> 来执行程序。</li><li>您可以看到屏幕上显示 <em>“Hello World”</em>。</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ gcc hello.c$ ./a.outHello, World<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>请确保您的路径中已包含 gcc 编译器，并确保在包含源文件 hello.c 的目录中运行它。</p><p>如果是多个 c 代码的源码文件，编译方法如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ gcc test1.c test2.c -o main.out$ ./main.out<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>test1.c 与 test2.c 是两个源代码文件。</p><blockquote><p>因编译器的原因，生成的 <strong>.exe</strong> 文件打开时会一闪而过，从而观察不到其运行的结果，这是因为 <strong>main()</strong> 函数结束时，DOS 窗口会自动关闭。为了避免这个问题可在 <strong>return 0;</strong> 前加入 <strong>system(“pause”);</strong> 语句。</p></blockquote><h1 id="C-基本语法"><a href="#C-基本语法" class="headerlink" title="C 基本语法"></a>C 基本语法</h1><p>我们已经看过 C 程序的基本结构，这将有助于我们理解 C 语言的其他基本的构建块。</p><h2 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h2><p>字符集是构成C语言的基本元素，是组成C语言源程序代码的基本字符。</p><ul><li>26个英文字母：<code>A-Z</code>,<code>a-z</code></li><li>数字字符：<code>0-9</code></li><li>特殊字符：<code>空格 ！# % ^ &amp; * _ + = - ~ &lt; &gt; | / \ ' " ; . , () [] {} ? :</code></li></ul><h3 id="分号"><a href="#分号" class="headerlink" title="分号 ;"></a>分号 ;</h3><p>在 C 程序中，分号是语句结束符。也就是说，每个语句必须以分号结束。它表明一个逻辑实体的结束。</p><p>例如，下面是两个不同的语句：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello, World! \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="C-中的空格"><a href="#C-中的空格" class="headerlink" title="C 中的空格"></a>C 中的空格</h3><p>只包含空格的行，被称为空白行，可能带有注释，C 编译器会完全忽略它。</p><p>在 C 中，空格用于描述空白符、制表符、换行符和注释。空格分隔语句的各个部分，让编译器能识别语句中的某个元素（比如 int）在哪里结束，下一个元素在哪里开始。因此，在下面的语句中：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> age<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在这里，int 和 age 之间必须至少有一个空格字符（通常是一个空白符），这样编译器才能够区分它们。另一方面，在下面的语句中：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">fruit <span class="token operator">=</span> apples <span class="token operator">+</span> oranges<span class="token punctuation">;</span>   <span class="token comment">// 获取水果的总数</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>fruit 和 =，或者 = 和 apples 之间的空格字符不是必需的，但是为了增强可读性，您可以根据需要适当增加一些空格。</p><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><p>C 标识符是用来标识变量、函数，或任何其他用户自定义项目的名称。一个标识符以字母 A-Z 或 a-z 或下划线 _ 开始，后跟零个或多个字母、下划线和数字（0-9）。</p><p>C 标识符内不允许出现标点字符，比如 @、$ 和 %。C 是<strong>区分大小写</strong>的编程语言。因此，在 C 中，<em>Manpower</em> 和 <em>manpower</em> 是两个不同的标识符。下面列出几个有效的标识符：</p><pre class="line-numbers language-none"><code class="language-none">mohd       zara    abc   move_name  a_123myname50   _temp   j     a23b9      retVal<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>标识符的构成规则：</p><ul><li>必须由字母<code>a~z</code> <code>A~Z</code>或下划线<code>_</code>开头。</li><li>后面可以跟随任意的字母、数字或下划线</li><li><strong>区分大小写字母</strong>。例如，num、Num、NUM为3个不同的标识符</li><li>关键字由于在系统中具有特殊用途，不能作为一般的标识符使用。</li></ul><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><blockquote><p>C语言中预定义的单词，规定了它的作用，在程序中有不同的使用目的。构成了C语言的基本操作指令</p></blockquote><p>下表列出了 C 中的保留字。这些保留字不能作为常量名、变量名或其他标识符名称。</p><div class="table-container"><table><thead><tr><th style="text-align:left">关键字</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">auto</td><td style="text-align:left">声明自动变量</td></tr><tr><td style="text-align:left">break</td><td style="text-align:left">跳出当前循环</td></tr><tr><td style="text-align:left">case</td><td style="text-align:left">开关语句分支</td></tr><tr><td style="text-align:left">char</td><td style="text-align:left">声明字符型变量或函数返回值类型</td></tr><tr><td style="text-align:left">const</td><td style="text-align:left">定义常量，如果一个变量被 const 修饰，那么它的值就不能再被改变</td></tr><tr><td style="text-align:left">continue</td><td style="text-align:left">结束当前循环，开始下一轮循环</td></tr><tr><td style="text-align:left">default</td><td style="text-align:left">开关语句中的”其它”分支</td></tr><tr><td style="text-align:left">do</td><td style="text-align:left">循环语句的循环体</td></tr><tr><td style="text-align:left">double</td><td style="text-align:left">声明双精度浮点型变量或函数返回值类型</td></tr><tr><td style="text-align:left">else</td><td style="text-align:left">条件语句否定分支（与 if 连用）</td></tr><tr><td style="text-align:left">enum</td><td style="text-align:left">声明枚举类型</td></tr><tr><td style="text-align:left">extern</td><td style="text-align:left">声明变量或函数是在其它文件或本文件的其他位置定义</td></tr><tr><td style="text-align:left">float</td><td style="text-align:left">声明浮点型变量或函数返回值类型</td></tr><tr><td style="text-align:left">for</td><td style="text-align:left">一种循环语句</td></tr><tr><td style="text-align:left">goto</td><td style="text-align:left">无条件跳转语句</td></tr><tr><td style="text-align:left">if</td><td style="text-align:left">条件语句</td></tr><tr><td style="text-align:left">int</td><td style="text-align:left">声明整型变量或函数</td></tr><tr><td style="text-align:left">long</td><td style="text-align:left">声明长整型变量或函数返回值类型</td></tr><tr><td style="text-align:left">register</td><td style="text-align:left">声明寄存器变量</td></tr><tr><td style="text-align:left">return</td><td style="text-align:left">子程序返回语句（可以带参数，也可不带参数）</td></tr><tr><td style="text-align:left">short</td><td style="text-align:left">声明短整型变量或函数</td></tr><tr><td style="text-align:left">signed</td><td style="text-align:left">声明有符号类型变量或函数</td></tr><tr><td style="text-align:left">sizeof</td><td style="text-align:left">计算数据类型或变量长度（即所占字节数）</td></tr><tr><td style="text-align:left">static</td><td style="text-align:left">声明静态变量</td></tr><tr><td style="text-align:left">struct</td><td style="text-align:left">声明结构体类型</td></tr><tr><td style="text-align:left">switch</td><td style="text-align:left">用于开关语句</td></tr><tr><td style="text-align:left">typedef</td><td style="text-align:left">用以给数据类型取别名</td></tr><tr><td style="text-align:left">unsigned</td><td style="text-align:left">声明无符号类型变量或函数</td></tr><tr><td style="text-align:left">union</td><td style="text-align:left">声明共用体类型</td></tr><tr><td style="text-align:left">void</td><td style="text-align:left">声明函数无返回值或无参数，声明无类型指针</td></tr><tr><td style="text-align:left">volatile</td><td style="text-align:left">说明变量在程序执行中可被隐含地改变</td></tr><tr><td style="text-align:left">while</td><td style="text-align:left">循环语句的循环条件</td></tr></tbody></table></div><h3 id="C99-新增关键字"><a href="#C99-新增关键字" class="headerlink" title="C99 新增关键字"></a>C99 新增关键字</h3><blockquote><p>1999年12月16日，ISO推出了C99标准，该标准新增了5个C语言关键字：</p></blockquote><div class="table-container"><table><thead><tr><th><code>_Bool</code></th><th><code>_Complex</code></th><th><code>_Imaginary</code></th><th><code>inline</code></th><th><code>restrict</code></th></tr></thead><tbody><tr><td></td></tr></tbody></table></div><h3 id="C11-新增关键字"><a href="#C11-新增关键字" class="headerlink" title="C11 新增关键字"></a>C11 新增关键字</h3><blockquote><p>2011年12月8日，ISO发布C语言的新标准C11，该标准新增了7个C语言关键字：</p></blockquote><div class="table-container"><table><thead><tr><th><code>_Alignas</code></th><th><code>_Alignof</code></th><th><code>_Atomic</code></th><th><code>_Generic</code></th><th><code>_Noreturn</code></th></tr></thead><tbody><tr><td><code>_Static_assert</code></td><td><code>_Thread_local</code></td><td></td><td></td></tr></tbody></table></div><h2 id="C-的令牌（Token）"><a href="#C-的令牌（Token）" class="headerlink" title="C 的令牌（Token）"></a>C 的令牌（Token）</h2><p>C 程序由各种令牌组成，令牌可以是关键字、标识符、常量、字符串值，或者是一个符号。例如，下面的 C 语句包括五个令牌：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello, World! \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这五个令牌分别是：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello, World! \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p><strong>C 语言有两种注释方式：</strong></p><h3 id="行注释"><a href="#行注释" class="headerlink" title="行注释"></a>行注释</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 单行注释</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以 <strong>//</strong> 开始的单行注释，这种注释可以单独占一行。</p><h3 id="块注释"><a href="#块注释" class="headerlink" title="块注释"></a>块注释</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* 单行注释 */</span><span class="token comment">/*  多行注释 多行注释 多行注释 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>/*...*/</code> 这种格式的注释可以单行或多行。</p><p>您不能在注释内嵌套注释，注释也不能出现在字符串或字符值中。</p><h1 id="C-数据类型"><a href="#C-数据类型" class="headerlink" title="C 数据类型"></a>C 数据类型</h1><p>在 C 语言中，数据类型指的是用于声明不同类型的变量或函数的一个广泛的系统。变量的类型决定了变量存储占用的空间，以及如何解释存储的位模式。</p><blockquote><ul><li><p>为什么要进行数据分类？</p><p>在程序中，数值、文字、声音、图形等都是作为数据处理的</p><p>因为，数值、文字、声音、图形属于不同的数据类型，在程序处理过程中，不同数据类型处理规则也不一样。例如对整数，可进行加、减、乘、除等运算，但对文字数据进行乘、除运算则毫无意义。数据在计算机中都是以二进制存放的，程序怎么区分数值和文字?所以，在程序中，要将不同数据进行分类，以便能够合适的处理</p><p>也就是说，一个数据在使用之前，程序要知道它是什么样的数据，是文字还是数值，这就产生了数据分类的问题，数据类型的概念也就由此而生</p></li></ul></blockquote><p>C 中的类型可分为以下几种：</p><div class="table-container"><table><thead><tr><th style="text-align:left">序号</th><th style="text-align:left">类型与描述</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left"><strong>基本类型：</strong> 它们是算术类型，包括两种类型：整数类型和浮点类型。</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left"><strong>枚举类型：</strong> 它们也是算术类型，被用来定义在程序中只能赋予其一定的离散整数值的变量。</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left"><strong>void 类型：</strong> 类型说明符 <em>void</em> 表明没有可用的值。</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left"><strong>派生类型：</strong> 它们包括：指针类型、数组类型、结构类型、共用体类型和函数类型。</td></tr></tbody></table></div><p>数组类型和结构类型统称为聚合类型。函数的类型指的是函数返回值的类型。在本章节接下来的部分我们将介绍基本类型，其他几种类型会在后边几个章节中进行讲解。</p><p><img src="/images/614-C语言-菜鸟教程/image-20220304202643509.png" alt="基本数据类型"></p><p><img src="/images/614-C语言-菜鸟教程/image-20220304183226977.png" alt="C语言基本数据类型及说明"> </p><h2 id="数值型数据"><a href="#数值型数据" class="headerlink" title="数值型数据"></a>数值型数据</h2><h3 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h3><p>下表列出了关于标准整数类型的存储大小和值范围的细节：</p><div class="table-container"><table><thead><tr><th style="text-align:left">类型</th><th style="text-align:left">存储大小</th><th style="text-align:left">值范围</th></tr></thead><tbody><tr><td style="text-align:left">char</td><td style="text-align:left">1 字节</td><td style="text-align:left">-128 到 127 或 0 到 255</td></tr><tr><td style="text-align:left">unsigned char</td><td style="text-align:left">1 字节</td><td style="text-align:left">0 到 255</td></tr><tr><td style="text-align:left">signed char</td><td style="text-align:left">1 字节</td><td style="text-align:left">-128 到 127</td></tr><tr><td style="text-align:left">int</td><td style="text-align:left">2 或 4 字节</td><td style="text-align:left">-32,768 到 32,767 或 -2,147,483,648 到 2,147,483,647</td></tr><tr><td style="text-align:left">unsigned int</td><td style="text-align:left">2 或 4 字节</td><td style="text-align:left">0 到 65,535 或 0 到 4,294,967,295</td></tr><tr><td style="text-align:left">short</td><td style="text-align:left">2 字节</td><td style="text-align:left">-32,768 到 32,767</td></tr><tr><td style="text-align:left">unsigned short</td><td style="text-align:left">2 字节</td><td style="text-align:left">0 到 65,535</td></tr><tr><td style="text-align:left">long</td><td style="text-align:left">4 字节</td><td style="text-align:left">-2,147,483,648 到 2,147,483,647</td></tr><tr><td style="text-align:left">unsigned long</td><td style="text-align:left">4 字节</td><td style="text-align:left">0 到 4,294,967,295</td></tr></tbody></table></div><blockquote><p>注意，各种类型的存储大小与系统位数有关，但目前通用的以64位系统为主。</p><p>以下列出了32位系统与64位系统的存储大小的差别（windows 相同）：</p><p><img src="/images/614-C语言-菜鸟教程/32-64.jpg" alt="32位系统与64位系统的存储大小的差别（windows 相同）"></p></blockquote><p>为了得到某个类型或某个变量在特定平台上的准确大小，您可以使用 <strong>sizeof</strong> 运算符。表达式 <code>sizeof(type)</code> 得到对象或类型的存储字节大小。下面的实例演示了获取 int 类型的大小：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;limits.h&gt;</span></span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"int 存储大小 : %lu \n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>%lu</code> 为 32 位无符号整数，详细说明查看 <a href="https://www.runoob.com/cprogramming/c-function-printf.html">C 库函数 - printf()</a>。</p><p>当您在 Linux 上编译并执行上面的程序时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">int 存储大小 <span class="token builtin class-name">:</span> <span class="token number">4</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h3><p>下表列出了关于标准浮点类型的存储大小、值范围和精度的细节：</p><div class="table-container"><table><thead><tr><th style="text-align:left">类型</th><th style="text-align:left">存储大小</th><th style="text-align:left">值范围</th><th style="text-align:left">精度</th></tr></thead><tbody><tr><td style="text-align:left">float</td><td style="text-align:left">4 字节</td><td style="text-align:left">1.2E-38 到 3.4E+38</td><td style="text-align:left">6 位有效位</td></tr><tr><td style="text-align:left">double</td><td style="text-align:left">8 字节</td><td style="text-align:left">2.3E-308 到 1.7E+308</td><td style="text-align:left">15 位有效位</td></tr><tr><td style="text-align:left">long double</td><td style="text-align:left">16 字节</td><td style="text-align:left">3.4E-4932 到 1.1E+4932</td><td style="text-align:left">19 位有效位</td></tr></tbody></table></div><p>头文件 <code>float.h</code>定义了宏，在程序中可以使用这些值和其他有关实数二进制表示的细节。下面的实例将输出浮点类型占用的存储空间以及它的范围值：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;float.h&gt;</span></span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"float 存储最大字节数 : %lu \n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"float 最小值: %E\n"</span><span class="token punctuation">,</span> FLT_MIN <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"float 最大值: %E\n"</span><span class="token punctuation">,</span> FLT_MAX <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"精度值: %d\n"</span><span class="token punctuation">,</span> FLT_DIG <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>%E</code>为以指数形式输出单、双精度实数，详细说明查看 <a href="https://www.runoob.com/cprogramming/c-function-printf.html">C 库函数 - printf()</a>。</p><p>当您在 Linux 上编译并执行上面的程序时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">float 存储最大字节数 <span class="token builtin class-name">:</span> <span class="token number">4</span> float 最小值: <span class="token number">1</span>.175494E-38float 最大值: <span class="token number">3</span>.402823E+38精度值: <span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字符型数据char"><a href="#字符型数据char" class="headerlink" title="字符型数据char"></a>字符型数据char</h2><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>在 C 语言中，字符串实际上是使用空字符 <strong>\0</strong> 结尾的一维字符数组。因此，<strong>\0</strong> 是用于标记字符串的结束。</p><p><strong>空字符（Null character</strong>）又称结束符，缩写 <strong>NUL</strong>，是一个数值为 <strong>0</strong> 的控制字符，<strong>\0</strong> 是转义字符，意思是告诉编译器，这不是字符 <strong>0</strong>，而是空字符。</p><p>下面的声明和初始化创建了一个 <strong>RUNOOB</strong> 字符串。由于在数组的末尾存储了空字符 <strong>\0</strong>，所以字符数组的大小比单词 <strong>RUNOOB</strong> 的字符数多一个。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> site<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">'R'</span><span class="token punctuation">,</span> <span class="token char">'U'</span><span class="token punctuation">,</span> <span class="token char">'N'</span><span class="token punctuation">,</span> <span class="token char">'O'</span><span class="token punctuation">,</span> <span class="token char">'O'</span><span class="token punctuation">,</span> <span class="token char">'B'</span><span class="token punctuation">,</span> <span class="token char">'\0'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>依据数组初始化规则，您可以把上面的语句写成以下语句：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> site<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"RUNOOB"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以下是 C/C++ 中定义的字符串的内存表示：</p><p><img src="/images/614-C语言-菜鸟教程/c-strings-2020-12-21.png" alt="C/C++ 中的字符串表示"></p><p>其实，您不需要把 <strong>null</strong> 字符放在字符串常量的末尾。C 编译器会在初始化数组时，自动把 <strong>\0</strong> 放在字符串的末尾。让我们尝试输出上面的字符串：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span> <span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">char</span> site<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">'R'</span><span class="token punctuation">,</span> <span class="token char">'U'</span><span class="token punctuation">,</span> <span class="token char">'N'</span><span class="token punctuation">,</span> <span class="token char">'O'</span><span class="token punctuation">,</span> <span class="token char">'O'</span><span class="token punctuation">,</span> <span class="token char">'B'</span><span class="token punctuation">,</span> <span class="token char">'\0'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"菜鸟教程: %s\n"</span><span class="token punctuation">,</span> site <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">菜鸟教程: RUNOOB<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>C 中有大量操作字符串的函数：</p><div class="table-container"><table><thead><tr><th style="text-align:left">序号</th><th style="text-align:left">函数 &amp; 目的</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left"><strong>strcpy(s1, s2);</strong> 复制字符串 s2 到字符串 s1。</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left"><strong>strcat(s1, s2);</strong> 连接字符串 s2 到字符串 s1 的末尾。</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left"><strong>strlen(s1);</strong> 返回字符串 s1 的长度。</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left"><strong>strcmp(s1, s2);</strong> 如果 s1 和 s2 是相同的，则返回 0；如果 s1<s2 则返回小于="" 0；如果="" s1="">s2 则返回大于 0。</s2></td></tr><tr><td style="text-align:left">5</td><td style="text-align:left"><strong>strchr(s1, ch);</strong> 返回一个指针，指向字符串 s1 中字符 ch 的第一次出现的位置。</td></tr><tr><td style="text-align:left">6</td><td style="text-align:left"><strong>strstr(s1, s2);</strong> 返回一个指针，指向字符串 s1 中字符串 s2 的第一次出现的位置。</td></tr></tbody></table></div><p>下面的实例使用了上述的一些函数：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span> <span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"runoob"</span><span class="token punctuation">;</span>   <span class="token keyword">char</span> str2<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"google"</span><span class="token punctuation">;</span>   <span class="token keyword">char</span> str3<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">int</span>  len <span class="token punctuation">;</span>    <span class="token comment">/* 复制 str1 到 str3 */</span>   <span class="token function">strcpy</span><span class="token punctuation">(</span>str3<span class="token punctuation">,</span> str1<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"strcpy( str3, str1) :  %s\n"</span><span class="token punctuation">,</span> str3 <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* 连接 str1 和 str2 */</span>   <span class="token function">strcat</span><span class="token punctuation">(</span> str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"strcat( str1, str2):   %s\n"</span><span class="token punctuation">,</span> str1 <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* 连接后，str1 的总长度 */</span>   len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"strlen(str1) :  %d\n"</span><span class="token punctuation">,</span> len <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">strcpy<span class="token punctuation">(</span> str3, str1<span class="token punctuation">)</span> <span class="token builtin class-name">:</span>  runoobstrcat<span class="token punctuation">(</span> str1, str2<span class="token punctuation">)</span>:   runoobgooglestrlen<span class="token punctuation">(</span>str1<span class="token punctuation">)</span> <span class="token builtin class-name">:</span>  <span class="token number">12</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>您可以在 C 标准库中找到更多字符串相关的函数。</p><h3 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h3><h2 id="派生类型（构造类型）"><a href="#派生类型（构造类型）" class="headerlink" title="派生类型（构造类型）"></a>派生类型（构造类型）</h2><ol><li>指针类型</li><li>数组类型</li><li>结构类型</li><li>共用体类型</li><li>函数类型</li></ol><h2 id="void-类型"><a href="#void-类型" class="headerlink" title="void 类型"></a>void 类型</h2><p>void 类型指定没有可用的值。它通常用于以下三种情况下：</p><div class="table-container"><table><thead><tr><th style="text-align:left">序号</th><th style="text-align:left">类型与描述</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left"><strong>函数返回为空</strong> C 中有各种函数都不返回值，或者您可以说它们返回空。不返回值的函数的返回类型为空。例如 <code>void exit (int status);</code></td></tr><tr><td style="text-align:left">2</td><td style="text-align:left"><strong>函数参数为空</strong> C 中有各种函数不接受任何参数。不带参数的函数可以接受一个 void。例如 <code>int rand(void);</code></td></tr><tr><td style="text-align:left">3</td><td style="text-align:left"><strong>指针指向 void</strong> 类型为 <code>void *</code> 的指针代表对象的地址，而不是类型。例如，内存分配函数<code>void \*malloc( size_t size );</code>返回指向 void 的指针，可以转换为任何数据类型。</td></tr></tbody></table></div><p>如果现在您还是无法完全理解 void 类型，不用太担心，在后续的章节中我们将会详细讲解这些概念。</p><h1 id="C-变量"><a href="#C-变量" class="headerlink" title="C 变量"></a>C 变量</h1><p>变量其实只不过是程序可操作的存储区的名称。C 中每个变量都有特定的类型，类型决定了变量存储的大小和布局，该范围内的值都可以存储在内存中，运算符可应用于变量上。</p><h2 id="变量的理解-amp-类型"><a href="#变量的理解-amp-类型" class="headerlink" title="变量的理解&amp;类型"></a>变量的理解&amp;类型</h2><p>变量是程序处理的数据对象之一，在使用变量时，要先声明变量的<strong>数据类型</strong>和<strong>变量名</strong>，在声明变量的同时，编译器会为变量分配存储单元，以存放数据。</p><p>故变量包含以下4方面的含义：</p><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">变量的名字</td><td style="text-align:center">标识符</td><td style="text-align:center">如：a</td><td style="text-align:center">用标识符命名，提供了在程序中访问变量的基本途径</td></tr><tr><td style="text-align:center">变量的类型</td><td style="text-align:center">数据类型type</td><td style="text-align:center">int、float等</td><td style="text-align:center">规定了变量的可能使用方式、可能存储的值或可能使用的操作</td></tr><tr><td style="text-align:center">变量的存储位置</td><td style="text-align:center">变量存储单元的首地址</td><td style="text-align:center"></td><td style="text-align:center">变量在计算机里的具体存储位置</td></tr><tr><td style="text-align:center">变量存储的值</td><td style="text-align:center">value</td><td style="text-align:center">如：54546</td></tr></tbody></table></div><blockquote><p>例如：整型变量a（int a）在gcc编译器中占4 byte的内存空间（数据和地址为假设）</p></blockquote><div class="table-container"><table><thead><tr><th>序号</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th><th>11</th><th>12</th><th>13</th><th>14</th><th>15</th><th>16</th><th>17</th><th>18</th><th>19</th><th>20</th><th>21</th><th>22</th><th>23</th><th>24</th><th>25</th><th>26</th><th>27</th><th>28</th><th>29</th><th>30</th><th>31</th><th>32</th></tr></thead><tbody><tr><td>变量名：a</td><td>1</td><td>0</td><td>0</td><td>1</td><td>0</td><td>1</td><td>0</td><td>0</td><td>1</td><td>0</td><td>1</td><td>0</td><td>0</td><td>1</td><td>0</td><td>1</td><td>0</td><td>0</td><td>1</td><td>0</td><td>1</td><td>0</td><td>0</td><td>1</td><td>0</td><td>1</td><td>0</td><td>0</td><td>1</td><td>0</td><td>1</td><td>1</td></tr><tr><td>位地址</td><td>123</td><td>124</td><td>125</td><td>126</td><td>127</td><td>128</td><td>129</td><td>130</td><td>131</td><td>132</td><td>133</td><td>134</td><td>135</td><td>136</td><td>137</td><td>138</td><td>139</td><td>140</td><td>141</td><td>142</td><td>143</td><td>144</td><td>145</td><td>146</td><td>147</td><td>148</td><td>149</td><td>150</td><td>151</td><td>152</td><td>153</td><td>154</td></tr><tr><td>字节地址</td><td>123</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table></div><p>分析以下代码：源代码表示将任意输入的十进制整型数据转化为二进制输出</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//将任意输入的十进制整型数据转化为二进制输出</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token comment">//声明变量a，数据类型为int，名称为a</span>  <span class="token keyword">int</span> b<span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//键盘输入数据，使用&amp;取a的首地址，将键盘输入的数据存储在变量a的存储单元</span>  <span class="token function">itoa</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>c<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  b<span class="token operator">=</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a的二进制数为：%s\n"</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"整型变量a的字节长度为：%d"</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//输入165114156416546后的输出结果</span><span class="token comment">/*165114156416546a的二进制数为：10100010101000111111111000100010整型变量a的字节长度为：4*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>变量的名称可以由字母、数字和下划线字符组成。它必须以字母或下划线开头。大写字母和小写字母是不同的，因为 C 是大小写敏感的。基于前一章讲解的基本类型，有以下几种基本的<strong>变量类型：</strong></p><ol><li>整型变量</li><li>实型变量</li><li>字符型变量</li></ol><div class="table-container"><table><thead><tr><th style="text-align:left">类型</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">char</td><td style="text-align:left">通常是一个字节（八位）, 这是一个整数类型。</td></tr><tr><td style="text-align:left">int</td><td style="text-align:left">整型，4 个字节，取值范围 -2147483648 到 2147483647。</td></tr><tr><td style="text-align:left">float</td><td style="text-align:left">单精度浮点值。单精度是这样的格式，1位符号，8位指数，23位小数。<img src="/images/614-C语言-菜鸟教程/v2-749cc641eb4d5dafd085e8c23f8826aa_hd.png" alt=""></td></tr><tr><td style="text-align:left">double</td><td style="text-align:left">双精度浮点值。双精度是1位符号，11位指数，52位小数。<img src="/images/614-C语言-菜鸟教程/v2-48240f0e1e0dd33ec89100cbe2d30707_hd.png" alt=""></td></tr><tr><td style="text-align:left">void</td><td style="text-align:left">表示类型的缺失(空)。</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:left">变量类型</th><th>关键字</th><th>变量声明语句</th></tr></thead><tbody><tr><td style="text-align:left">整型变量</td><td>int</td><td>int a,b,c;</td></tr><tr><td style="text-align:left">有符号整型变量</td><td>signed int</td><td>signed int a,b,c;</td></tr><tr><td style="text-align:left">无符号整型变量</td><td>unsigned int</td><td>unsigned int a,b,c;</td></tr><tr><td style="text-align:left">长整型变量</td><td>long int</td><td>long int a,b,c;</td></tr><tr><td style="text-align:left">短整型变量</td><td>short int</td><td>short int a,b,c;</td></tr><tr><td style="text-align:left">单精度实型变量</td><td>float</td><td>float a,b,c;</td></tr><tr><td style="text-align:left">双精度实型变量</td><td>double</td><td>double a,b,c;</td></tr><tr><td style="text-align:left">字符型变量</td><td>char</td><td>char a,b,c;</td></tr></tbody></table></div><p>C 语言也允许定义各种其他类型的变量，比如<strong>枚举、指针、数组、结构、共用体等等</strong>，这将会在后续的章节中进行讲解，本章节我们先讲解基本变量类型。</p><blockquote><p>注意：分配给字符型变量的存储单元只有一个字节，用于存放一个字符。 字符变量中不能存放字符串。 字符型变量存放一个字符，实际上是存放字符的ASCII码，是一个整数，其取值范围是-128~127，可以当作小型变量</p></blockquote><h2 id="变量定义-amp-初始化-amp-声明的区别"><a href="#变量定义-amp-初始化-amp-声明的区别" class="headerlink" title="变量定义&amp;初始化&amp;声明的区别"></a>变量定义&amp;初始化&amp;声明的区别</h2><ul><li>定义：告诉编译器在何处创建变量的存储，以及如何创建变量的存储。</li><li>初始化：给变量指定一个初始值</li><li>声明：向编译器保证变量以指定的类型和名称存在，这样编译器在不需要知道变量完整细节的情况下也能继续进一步的编译。变量声明只在编译时有它的意义，在程序连接时编译器需要实际的变量声明。</li></ul><blockquote><p>定义和声明略有区别：</p><ul><li>定义是创建变量</li><li>声明是告诉编译器变量已存在和在哪里（即程序编译时去哪连接数据）<ul><li>比如在内部函数中使用外部函数中定义的变量，这时就不用再定义一个新的变量占用存储空间，直接声明使用外部函数已经定义的变量</li></ul></li></ul></blockquote><h2 id="C-中的变量定义"><a href="#C-中的变量定义" class="headerlink" title="C 中的变量定义"></a>C 中的变量定义</h2><p>变量定义就是告诉编译器在何处创建变量的存储，以及如何创建变量的存储。变量定义指定一个数据类型，并包含了该类型的一个或多个变量的列表，如下所示：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">type variable_list<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在这里，<strong>type</strong> 必须是一个有效的 C 数据类型，可以是 char、w_char、int、float、double 或任何用户自定义的对象，<strong>variable_list</strong> 可以由一个或多个标识符名称组成，多个标识符之间用逗号分隔。下面列出几个有效的声明：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span>    i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span><span class="token keyword">char</span>   c<span class="token punctuation">,</span> ch<span class="token punctuation">;</span><span class="token keyword">float</span>  f<span class="token punctuation">,</span> salary<span class="token punctuation">;</span><span class="token keyword">double</span> d<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>行 <strong>int i, j, k;</strong> 声明并定义了变量 i、j 和 k，这指示编译器创建类型为 int 的名为 i、j、k 的变量。</p><h2 id="C中的变量初始化"><a href="#C中的变量初始化" class="headerlink" title="C中的变量初始化"></a>C中的变量初始化</h2><p>变量可以在声明的时候被初始化（指定一个初始值）。初始化器由一个等号，后跟一个常量表达式组成，如下所示：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">type variable_name <span class="token operator">=</span> value<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下面列举几个实例：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">extern</span> <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> f <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token comment">// d 和 f 的声明与初始化</span><span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> f <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>           <span class="token comment">// 定义并初始化 d 和 f</span>byte z <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">;</span>                <span class="token comment">// 定义并初始化 z</span><span class="token keyword">char</span> x <span class="token operator">=</span> <span class="token char">'x'</span><span class="token punctuation">;</span>               <span class="token comment">// 变量 x 的值为 'x'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>不带初始化的定义：带有静态存储持续时间的变量会被隐式初始化为 NULL（所有字节的值都是 0），其他所有变量的初始值是未定义的。</p><blockquote><p>初始化是指给变量赋初始值。</p><p>在C语言中，声明变量时，C语言不会自动对变量进行初始化。如果一个变量没有被初始化，则变量中存放的就是内存中的随机值。由于变量没有初始化而产生的的错误很难检查，变量声明时可同时对变量进行初始化。</p></blockquote><p>我们通过代码来观察变量的声明时值得变化：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"初始化前：a=%d,b=%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化前，只声明了变量a和b，确定了变量的类型和名称，分配了存储空间，未对其赋值但存放了随机值0和16</span>  a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//初始化赋值a</span>  b<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">//初始化赋值b</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"初始化后：a=%d，b=%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化后，对变量进行了赋值，存放初始化的值10,20</span><span class="token punctuation">}</span><span class="token comment">//运行结果</span><span class="token comment">//初始化前：a=0,b=16</span><span class="token comment">//初始化后：a=10，b=20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="C-中的变量声明"><a href="#C-中的变量声明" class="headerlink" title="C 中的变量声明"></a>C 中的变量声明</h2><p>变量声明向编译器保证变量以指定的类型和名称存在，这样编译器在不需要知道变量完整细节的情况下也能继续进一步的编译。变量声明只在编译时有它的意义，在程序连接时编译器需要实际的变量声明。</p><p>变量的声明有两种情况：</p><ul><li>1、一种是需要建立存储空间的。例如：int a 在声明的时候就已经建立了存储空间。</li><li>2、另一种是不需要建立存储空间的，通过使用<code>extern</code>关键字声明变量名而不定义它。 例如：<code>extern int a</code> 其中变量 a 可以在别的文件中定义的。</li><li>除非有extern关键字，否则都是变量的定义。</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">extern</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">//声明，不是定义</span><span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">//声明，也是定义</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="实例-内部变量与外部变量"><a href="#实例-内部变量与外部变量" class="headerlink" title="实例-内部变量与外部变量"></a>实例-内部变量与外部变量</h3><blockquote><p>内部变量与外部变量</p></blockquote><p>尝试下面的实例，其中，变量在头部就已经被声明，但是定义与初始化在主函数内：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span> <span class="token comment">// 函数外定义变量 x 和 y</span><span class="token keyword">int</span> x<span class="token punctuation">;</span><span class="token keyword">int</span> y<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">addtwonum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// 函数内声明变量 x 和 y 为外部变量</span>    <span class="token keyword">extern</span> <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token keyword">extern</span> <span class="token keyword">int</span> y<span class="token punctuation">;</span>    <span class="token comment">// 给外部变量（全局变量）x 和 y 赋值</span>    x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> result<span class="token punctuation">;</span>    <span class="token comment">// 调用函数 addtwonum</span>    result <span class="token operator">=</span> <span class="token function">addtwonum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"result 为: %d"</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">result 为: <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果需要在一个源文件中引用另外一个源文件中定义的变量，我们只需在引用的文件中将变量加上 extern 关键字的声明即可。</p><p><strong>addtwonum.c 文件代码：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token comment">/*外部变量声明*/</span><span class="token keyword">extern</span> <span class="token keyword">int</span> x <span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> y <span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">addtwonum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>test.c 文件代码：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>  <span class="token comment">/*定义两个全局变量*/</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> y<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">addtwonum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> result<span class="token punctuation">;</span>    result <span class="token operator">=</span> <span class="token function">addtwonum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"result 为: %d\n"</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ gcc addtwonum.c test.c -o main$ ./mainresult 为: <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="C-中的左值（Lvalues）和右值（Rvalues）"><a href="#C-中的左值（Lvalues）和右值（Rvalues）" class="headerlink" title="C 中的左值（Lvalues）和右值（Rvalues）"></a>C 中的左值（Lvalues）和右值（Rvalues）</h2><p>C 中有两种类型的表达式：</p><ol><li><strong>左值（lvalue）：</strong>指向内存位置的表达式被称为左值（lvalue）表达式。左值可以出现在赋值号的左边或右边。</li><li><strong>右值（rvalue）：</strong>术语右值（rvalue）指的是存储在内存中某些地址的数值。右值是不能对其进行赋值的表达式，也就是说，右值可以出现在赋值号的右边，但不能出现在赋值号的左边。</li></ol><p>变量是左值，因此可以出现在赋值号的左边。数值型的字面值是右值，因此不能被赋值，不能出现在赋值号的左边。下面是一个有效的语句：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> g <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是下面这个就不是一个有效的语句，会生成编译时错误：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">10</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="C-常量"><a href="#C-常量" class="headerlink" title="C 常量"></a>C 常量</h1><blockquote><p>请注意，把常量定义为大写字母形式，是一个很好的编程习惯。</p></blockquote><p>常量是固定值，在程序执行期间不会改变。这些固定的值，又叫做<strong>字面量</strong>。</p><p>常量可以是任何的基本数据类型，比如整数常量、浮点常量、字符常量，或字符串字面值，也有枚举常量。</p><p><strong>常量</strong>就像是常规的变量，只不过常量的值在定义后不能进行修改。</p><ul><li>整数常量-整型常量-定点型数据</li><li>浮点常量-实型常量-浮点型常量</li><li>字符常量<ul><li>转义字符</li><li>符号常量</li></ul></li><li>字符串常量</li></ul><h2 id="整数常量"><a href="#整数常量" class="headerlink" title="整数常量"></a>整数常量</h2><p>整数常量可以是十进制、八进制或十六进制的常量。前缀指定基数：0x 或 0X 表示十六进制，0 表示八进制，不带前缀则默认表示十进制。</p><p>整数常量也可以带一个后缀，后缀是 U 和 L 的组合，U 表示无符号整数（unsigned），L 表示长整数（long）。后缀可以是大写，也可以是小写，U 和 L 的顺序任意。</p><p>下面列举几个整数常量的实例：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">212</span>         <span class="token comment">/* 合法的 */</span><span class="token number">215u</span>        <span class="token comment">/* 合法的 */</span><span class="token number">0xFeeL</span>      <span class="token comment">/* 合法的 */</span><span class="token number">078</span>         <span class="token comment">/* 非法的：8 不是八进制的数字 */</span><span class="token number">032UU</span>       <span class="token comment">/* 非法的：不能重复后缀 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下是各种类型的整数常量的实例：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">85</span>         <span class="token comment">/* 十进制 */</span><span class="token number">0213</span>       <span class="token comment">/* 八进制 */</span><span class="token number">0x4b</span>       <span class="token comment">/* 十六进制 */</span><span class="token number">30</span>         <span class="token comment">/* 整数 */</span><span class="token number">30u</span>        <span class="token comment">/* 无符号整数 */</span><span class="token number">30l</span>        <span class="token comment">/* 长整数 */</span><span class="token number">30ul</span>       <span class="token comment">/* 无符号长整数 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="浮点常量"><a href="#浮点常量" class="headerlink" title="浮点常量"></a>浮点常量</h2><p>浮点常量由整数部分、小数点、小数部分和指数部分组成。您可以使用小数形式或者指数形式来表示浮点常量。</p><p>当使用小数形式表示时，必须包含整数部分、小数部分，或同时包含两者。当使用指数形式表示时， 必须包含小数点、指数，或同时包含两者。带符号的指数是用 e 或 E 引入的。</p><ul><li>实型常量(浮点型)<ul><li>一般形式         0.383    //浮点位置不固定</li><li>指数形式         1.75E+1  //浮点位置固定</li></ul></li></ul><p>下面列举几个浮点常量的实例：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">3.14159</span>       <span class="token comment">/* 合法的 */</span><span class="token number">314159E-5L</span>    <span class="token comment">/* 合法的 */</span><span class="token number">510</span>E          <span class="token comment">/* 非法的：不完整的指数 */</span><span class="token number">210f</span>          <span class="token comment">/* 非法的：没有小数或指数 */</span><span class="token punctuation">.</span>e55          <span class="token comment">/* 非法的：缺少整数或分数 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字符常量"><a href="#字符常量" class="headerlink" title="字符常量"></a>字符常量</h2><p>字符常量是括在单引号中，例如，<code>'x'</code> 可以存储在 <strong>char</strong> 类型的简单变量中。</p><p>字符常量可以是一个普通的字符（例如 ‘x’）、一个转义序列（例如 ‘\t’），或一个通用的字符（例如 ‘\u02C0’）。</p><p>字符常量——对应其编码值</p><p>在 C 中，有一些特定的字符，当它们前面有反斜杠时，它们就具有特殊的含义，被用来表示如换行符（\n）或制表符（\t）等。下表列出了一些这样的转义序列码：</p><div class="table-container"><table><thead><tr><th style="text-align:left">转义序列</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left">\\</td><td style="text-align:left">\ 字符</td></tr><tr><td style="text-align:left">\’</td><td style="text-align:left">‘ 字符</td></tr><tr><td style="text-align:left">\”</td><td style="text-align:left">“ 字符</td></tr><tr><td style="text-align:left">\?</td><td style="text-align:left">? 字符</td></tr><tr><td style="text-align:left">\a</td><td style="text-align:left">警报铃声</td></tr><tr><td style="text-align:left">\b</td><td style="text-align:left">退格键</td></tr><tr><td style="text-align:left">\f</td><td style="text-align:left">换页符</td></tr><tr><td style="text-align:left">\n</td><td style="text-align:left">换行符</td></tr><tr><td style="text-align:left">\r</td><td style="text-align:left">回车</td></tr><tr><td style="text-align:left">\t</td><td style="text-align:left">水平制表符</td></tr><tr><td style="text-align:left">\v</td><td style="text-align:left">垂直制表符</td></tr><tr><td style="text-align:left">\ooo</td><td style="text-align:left">一到三位的八进制数</td></tr><tr><td style="text-align:left">\xhh . . .</td><td style="text-align:left">一个或多个数字的十六进制数</td></tr></tbody></table></div><p>下面的实例显示了一些转义序列字符：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello\tWorld\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Hello   World<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="字符串常量"><a href="#字符串常量" class="headerlink" title="字符串常量"></a>字符串常量</h2><p>字符串字面值或常量是括在双引号 <code>""</code> 中的。一个字符串包含类似于字符常量的字符：普通的字符、转义序列和通用的字符。</p><ol><li><p>您可以使用空格做分隔符，把一个很长的字符串常量进行分行。</p><p>下面的实例显示了一些字符串常量。下面这三种形式所显示的字符串是相同的。</p></li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token string">"hello, dear"</span>"hello<span class="token punctuation">,</span> \dear"<span class="token string">"hello, "</span> <span class="token string">"d"</span> <span class="token string">"ear"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>字符串常量</p><ul><li>用一对双引号括起来的零个或多个字符的序列。如：”$#340000”、”BEIJING”、” “(双引号中空格)、””(双引号什么都没有)、”\a”(双引号中有一个转义字符)</li><li>字符串常量在内存存储时，系统自动在每个字符串常量的尾部加一个字符串结束标志字符’\0’。因此，长度为n个字符的字符串常量，在内存中要占用n+1个字符的空间。</li><li><p>如：”good”，4个字符+1个结束标志字符\0</p><ul><li>|     字符      |  g   |  o   |  o   |  d   |  \0  |<br>| :—————-: | :—: | :—: | :—: | :—: | :—: |<br>| ASCII码对应值 | 103  | 111  | 111  | 100  |  \0  |</li></ul></li></ul></li></ol><h2 id="定义常量"><a href="#定义常量" class="headerlink" title="定义常量"></a>定义常量</h2><p>在 C 中，有两种简单的定义常量的方式：</p><ol><li>使用 <strong>#define</strong> 预处理器。</li><li>使用 <strong>const</strong> 关键字。</li></ol><h3 id="define-预处理器"><a href="#define-预处理器" class="headerlink" title="#define 预处理器"></a>#define 预处理器</h3><p>下面是使用 #define 预处理器定义常量的形式：</p><pre class="line-numbers language-none"><code class="language-none">#define identifier value<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>具体请看下面的实例：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LENGTH</span> <span class="token expression"><span class="token number">10</span>   </span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">WIDTH</span>  <span class="token expression"><span class="token number">5</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NEWLINE</span> <span class="token char">'\n'</span></span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> area<span class="token punctuation">;</span>       area <span class="token operator">=</span> LENGTH <span class="token operator">*</span> WIDTH<span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"value of area : %d"</span><span class="token punctuation">,</span> area<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> NEWLINE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">value of area <span class="token builtin class-name">:</span> <span class="token number">50</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="const-关键字"><a href="#const-关键字" class="headerlink" title="const 关键字"></a>const 关键字</h3><p>您可以使用 <strong>const</strong> 前缀声明指定类型的常量，如下所示：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">const</span> type variable <span class="token operator">=</span> value<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/614-C语言-菜鸟教程/c-const-2021-01-15.png" alt=""></p><p>const 声明常量要在一个语句内完成：</p><p><img src="/images/614-C语言-菜鸟教程/c-const-2021-01-15-2.png" alt=""></p><p>具体请看下面的实例：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">const</span> <span class="token keyword">int</span>  LENGTH <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>   <span class="token keyword">const</span> <span class="token keyword">int</span>  WIDTH  <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>   <span class="token keyword">const</span> <span class="token keyword">char</span> NEWLINE <span class="token operator">=</span> <span class="token char">'\n'</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> area<span class="token punctuation">;</span>        area <span class="token operator">=</span> LENGTH <span class="token operator">*</span> WIDTH<span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"value of area : %d"</span><span class="token punctuation">,</span> area<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> NEWLINE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">value of area <span class="token builtin class-name">:</span> <span class="token number">50</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>请注意，把常量定义为大写字母形式，是一个很好的编程习惯。</p></blockquote><h1 id="C-存储类"><a href="#C-存储类" class="headerlink" title="C 存储类"></a>C 存储类</h1><p>存储类定义 C 程序中变量/函数的范围（可见性）和生命周期。这些说明符放置在它们所修饰的类型之前。下面列出 C 程序中可用的存储类：</p><ul><li>auto</li><li>register</li><li>static</li><li>extern</li></ul><h2 id="auto-存储类"><a href="#auto-存储类" class="headerlink" title="auto 存储类"></a>auto 存储类</h2><p><strong>auto</strong> 存储类是所有<strong>局部变量</strong>默认的存储类。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">{</span>   <span class="token keyword">int</span> mount<span class="token punctuation">;</span>   <span class="token keyword">auto</span> <span class="token keyword">int</span> month<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上面的实例定义了两个带有相同存储类的变量，<strong>auto 只能用在函数内，即 auto 只能修饰局部变量</strong>。</p><h2 id="register-存储类"><a href="#register-存储类" class="headerlink" title="register 存储类"></a>register 存储类</h2><p><strong>register</strong> 存储类用于定义存储在寄存器中而不是 RAM 中的局部变量。这意味着变量的最大尺寸等于寄存器的大小（通常是一个字），且不能对它应用一元的 <code>&amp;</code> 运算符（因为它没有内存位置）。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">{</span>   <span class="token keyword">register</span> <span class="token keyword">int</span>  miles<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>寄存器只用于需要快速访问的变量，比如计数器。还应注意的是，定义 <code>register</code> 并不意味着变量将被存储在寄存器中，它意味着变量可能存储在寄存器中，这取决于硬件和实现的限制。</p><h2 id="static-存储类"><a href="#static-存储类" class="headerlink" title="static 存储类"></a>static 存储类</h2><p><strong>static</strong> 存储类指示编译器在程序的生命周期内保持局部变量的存在，而不需要在每次它进入和离开作用域时进行创建和销毁。因此，使用 static 修饰局部变量可以在函数调用之间保持局部变量的值。</p><p>static 修饰符也可以应用于<strong>全局变量</strong>。当 static 修饰全局变量时，会使变量的作用域限制在声明它的文件内。</p><p>全局声明的一个 static 变量或方法可以被任何函数或方法调用，只要这些方法出现在跟 static 变量或方法同一个文件中。</p><p>以下实例演示了 static 修饰全局变量和局部变量的应用：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span> <span class="token comment">/* 函数声明 */</span><span class="token keyword">void</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">static</span> <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token comment">/* 全局变量 - static 是默认的 */</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>count<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">void</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/* 'thingy' 是 'func1' 的局部变量 - 只初始化一次 * 每次调用函数 'func1' 'thingy' 值不会被重置。 */</span>                  <span class="token keyword">static</span> <span class="token keyword">int</span> thingy<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>  thingy<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" thingy 为 %d ， count 为 %d\n"</span><span class="token punctuation">,</span> thingy<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实例中 count 作为全局变量可以在函数内使用，thingy 使用 static 修饰后，不会在每次调用时重置。</p><p>可能您现在还无法理解这个实例，因为我已经使用了函数和全局变量，这两个概念目前为止还没进行讲解。即使您现在不能完全理解，也没有关系，后续的章节我们会详细讲解。当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">thingy 为 <span class="token number">6</span> ， count 为 <span class="token number">9</span>thingy 为 <span class="token number">7</span> ， count 为 <span class="token number">8</span>thingy 为 <span class="token number">8</span> ， count 为 <span class="token number">7</span>thingy 为 <span class="token number">9</span> ， count 为 <span class="token number">6</span>thingy 为 <span class="token number">10</span> ， count 为 <span class="token number">5</span>thingy 为 <span class="token number">11</span> ， count 为 <span class="token number">4</span>thingy 为 <span class="token number">12</span> ， count 为 <span class="token number">3</span>thingy 为 <span class="token number">13</span> ， count 为 <span class="token number">2</span>thingy 为 <span class="token number">14</span> ， count 为 <span class="token number">1</span>thingy 为 <span class="token number">15</span> ， count 为 <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="extern-存储类"><a href="#extern-存储类" class="headerlink" title="extern 存储类"></a>extern 存储类</h2><p><strong>extern</strong> 存储类用于提供一个全局变量的引用，全局变量对所有的程序文件都是可见的。当您使用 <strong>extern</strong> 时，对于无法初始化的变量，会把变量名指向一个之前定义过的存储位置。</p><p>当您有多个文件且定义了一个可以在其他文件中使用的全局变量或函数时，可以在其他文件中使用 <em>extern</em> 来得到已定义的变量或函数的引用。可以这么理解，<em>extern</em> 是用来在另一个文件中声明一个全局变量或函数。</p><p>extern 修饰符通常用于当有两个或多个文件共享相同的全局变量或函数的时候，如下所示：</p><p><strong>第一个文件：main.c</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> count <span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">write_extern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   count <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>   <span class="token function">write_extern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>第二个文件：support.c</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">extern</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">write_extern</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"count is %d\n"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里，第二个文件中的 <em>extern</em> 关键字用于声明已经在第一个文件 main.c 中定义的 <em>count</em>。现在 ，编译这两个文件，如下所示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ gcc main.c support.c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这会产生 <strong>a.out</strong> 可执行程序，当程序被执行时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">count is <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="C-运算符"><a href="#C-运算符" class="headerlink" title="C 运算符"></a>C 运算符</h1><p>运算符是一种告诉编译器执行特定的数学或逻辑操作的符号。C 语言内置了丰富的运算符，并提供了以下类型的运算符：</p><ul><li>算术运算符</li><li>关系运算符</li><li>逻辑运算符</li><li>位运算符</li><li>赋值运算符</li><li>杂项运算符</li></ul><p>本章将逐一介绍算术运算符、关系运算符、逻辑运算符、位运算符、赋值运算符和其他运算符。</p><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>下表显示了 C 语言支持的所有算术运算符。假设变量 <strong>A</strong> 的值为 10，变量 <strong>B</strong> 的值为 20，则：</p><div class="table-container"><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:left">+</td><td style="text-align:left">把两个操作数相加</td><td style="text-align:left">A + B 将得到 30</td></tr><tr><td style="text-align:left">-</td><td style="text-align:left">从第一个操作数中减去第二个操作数</td><td style="text-align:left">A - B 将得到 -10</td></tr><tr><td style="text-align:left">*</td><td style="text-align:left">把两个操作数相乘</td><td style="text-align:left">A * B 将得到 200</td></tr><tr><td style="text-align:left">/</td><td style="text-align:left">分子除以分母</td><td style="text-align:left">B / A 将得到 2</td></tr><tr><td style="text-align:left">%</td><td style="text-align:left">取模运算符，整除后的余数</td><td style="text-align:left">B % A 将得到 0</td></tr><tr><td style="text-align:left">++</td><td style="text-align:left">自增运算符，整数值增加 1</td><td style="text-align:left">A++ 将得到 11</td></tr><tr><td style="text-align:left">—</td><td style="text-align:left">自减运算符，整数值减少 1</td><td style="text-align:left">A— 将得到 9</td></tr></tbody></table></div><p>请看下面的实例，了解 C 语言中所有可用的算术运算符：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> c <span class="token punctuation">;</span>    c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 1 - c 的值是 %d\n"</span><span class="token punctuation">,</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span>   c <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 2 - c 的值是 %d\n"</span><span class="token punctuation">,</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span>   c <span class="token operator">=</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 3 - c 的值是 %d\n"</span><span class="token punctuation">,</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span>   c <span class="token operator">=</span> a <span class="token operator">/</span> b<span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 4 - c 的值是 %d\n"</span><span class="token punctuation">,</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span>   c <span class="token operator">=</span> a <span class="token operator">%</span> b<span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 5 - c 的值是 %d\n"</span><span class="token punctuation">,</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span>   c <span class="token operator">=</span> a<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">// 赋值后再加 1 ，c 为 21，a 为 22</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 6 - c 的值是 %d\n"</span><span class="token punctuation">,</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span>   c <span class="token operator">=</span> a<span class="token operator">--</span><span class="token punctuation">;</span>  <span class="token comment">// 赋值后再减 1 ，c 为 22 ，a 为 21</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 7 - c 的值是 %d\n"</span><span class="token punctuation">,</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Line <span class="token number">1</span> - c 的值是 <span class="token number">31</span>Line <span class="token number">2</span> - c 的值是 <span class="token number">11</span>Line <span class="token number">3</span> - c 的值是 <span class="token number">210</span>Line <span class="token number">4</span> - c 的值是 <span class="token number">2</span>Line <span class="token number">5</span> - c 的值是 <span class="token number">1</span>Line <span class="token number">6</span> - c 的值是 <span class="token number">21</span>Line <span class="token number">7</span> - c 的值是 <span class="token number">22</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下实例演示了 a++ 与 ++a 的区别：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">int</span> c<span class="token punctuation">;</span>   <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>   c <span class="token operator">=</span> a<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"先赋值后运算：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 1 - c 的值是 %d\n"</span><span class="token punctuation">,</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 2 - a 的值是 %d\n"</span><span class="token punctuation">,</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span>   a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>   c <span class="token operator">=</span> a<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 3 - c 的值是 %d\n"</span><span class="token punctuation">,</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 4 - a 的值是 %d\n"</span><span class="token punctuation">,</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"先运算后赋值：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>   c <span class="token operator">=</span> <span class="token operator">++</span>a<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 5 - c 的值是 %d\n"</span><span class="token punctuation">,</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 6 - a 的值是 %d\n"</span><span class="token punctuation">,</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span>   a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>   c <span class="token operator">=</span> <span class="token operator">--</span>a<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 7 - c 的值是 %d\n"</span><span class="token punctuation">,</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 8 - a 的值是 %d\n"</span><span class="token punctuation">,</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上程序执行输出结果为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">先赋值后运算：Line <span class="token number">1</span> - c 的值是 <span class="token number">10</span>Line <span class="token number">2</span> - a 的值是 <span class="token number">11</span>Line <span class="token number">3</span> - c 的值是 <span class="token number">10</span>Line <span class="token number">4</span> - a 的值是 <span class="token number">9</span>先运算后赋值：Line <span class="token number">5</span> - c 的值是 <span class="token number">11</span>Line <span class="token number">6</span> - a 的值是 <span class="token number">11</span>Line <span class="token number">7</span> - c 的值是 <span class="token number">9</span>Line <span class="token number">8</span> - a 的值是 <span class="token number">9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><p>下表显示了 C 语言支持的所有关系运算符。假设变量 <strong>A</strong> 的值为 10，变量 <strong>B</strong> 的值为 20，则：</p><div class="table-container"><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:left">==</td><td style="text-align:left">检查两个操作数的值是否相等，如果相等则条件为真。</td><td style="text-align:left">(A == B) 为假。</td></tr><tr><td style="text-align:left">!=</td><td style="text-align:left">检查两个操作数的值是否相等，如果不相等则条件为真。</td><td style="text-align:left">(A != B) 为真。</td></tr><tr><td style="text-align:left">&gt;</td><td style="text-align:left">检查左操作数的值是否大于右操作数的值，如果是则条件为真。</td><td style="text-align:left">(A &gt; B) 为假。</td></tr><tr><td style="text-align:left">&lt;</td><td style="text-align:left">检查左操作数的值是否小于右操作数的值，如果是则条件为真。</td><td style="text-align:left">(A &lt; B) 为真。</td></tr><tr><td style="text-align:left">&gt;=</td><td style="text-align:left">检查左操作数的值是否大于或等于右操作数的值，如果是则条件为真。</td><td style="text-align:left">(A &gt;= B) 为假。</td></tr><tr><td style="text-align:left">&lt;=</td><td style="text-align:left">检查左操作数的值是否小于或等于右操作数的值，如果是则条件为真。</td><td style="text-align:left">(A &lt;= B) 为真。</td></tr></tbody></table></div><p>请看下面的实例，了解 C 语言中所有可用的关系运算符：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> c <span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> a <span class="token operator">==</span> b <span class="token punctuation">)</span>   <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 1 - a 等于 b\n"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">else</span>   <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 1 - a 不等于 b\n"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span> a <span class="token operator">&lt;</span> b <span class="token punctuation">)</span>   <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 2 - a 小于 b\n"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">else</span>   <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 2 - a 不小于 b\n"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span> a <span class="token operator">&gt;</span> b <span class="token punctuation">)</span>   <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 3 - a 大于 b\n"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">else</span>   <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 3 - a 不大于 b\n"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment">/* 改变 a 和 b 的值 */</span>   a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>   b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span> a <span class="token operator">&lt;=</span> b <span class="token punctuation">)</span>   <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 4 - a 小于或等于 b\n"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span> b <span class="token operator">&gt;=</span> a <span class="token punctuation">)</span>   <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 5 - b 大于或等于 a\n"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Line <span class="token number">1</span> - a 不等于 bLine <span class="token number">2</span> - a 不小于 bLine <span class="token number">3</span> - a 大于 bLine <span class="token number">4</span> - a 小于或等于 bLine <span class="token number">5</span> - b 大于或等于 a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>下表显示了 C 语言支持的所有关系逻辑运算符。假设变量 <strong>A</strong> 的值为 1，变量 <strong>B</strong> 的值为 0，则：</p><div class="table-container"><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:left">&amp;&amp;</td><td style="text-align:left">称为逻辑与运算符。如果两个操作数都非零，则条件为真。</td><td style="text-align:left">(A &amp;&amp; B) 为假。</td></tr><tr><td style="text-align:left">\</td><td style="text-align:left">\</td><td style="text-align:left"></td><td>称为逻辑或运算符。如果两个操作数中有任意一个非零，则条件为真。</td><td>(A \</td><td>\</td><td>B) 为真。</td></tr><tr><td style="text-align:left">!</td><td style="text-align:left">称为逻辑非运算符。用来逆转操作数的逻辑状态。如果条件为真则逻辑非运算符将使其为假。</td><td style="text-align:left">!(A &amp;&amp; B) 为真。</td></tr></tbody></table></div><p>请看下面的实例，了解 C 语言中所有可用的逻辑运算符：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> c <span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> a <span class="token operator">&amp;&amp;</span> b <span class="token punctuation">)</span>   <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 1 - 条件为真\n"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span> a <span class="token operator">||</span> b <span class="token punctuation">)</span>   <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 2 - 条件为真\n"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment">/* 改变 a 和 b 的值 */</span>   a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span> a <span class="token operator">&amp;&amp;</span> b <span class="token punctuation">)</span>   <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 3 - 条件为真\n"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">else</span>   <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 3 - 条件为假\n"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token punctuation">(</span>a <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">)</span> <span class="token punctuation">)</span>   <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 4 - 条件为真\n"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Line <span class="token number">1</span> - 条件为真Line <span class="token number">2</span> - 条件为真Line <span class="token number">3</span> - 条件为假Line <span class="token number">4</span> - 条件为真<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><p>位运算符作用于位，并逐位执行操作。&amp;、 | 和 ^ 的真值表如下所示：</p><div class="table-container"><table><thead><tr><th style="text-align:left">p</th><th style="text-align:left">q</th><th style="text-align:left">p &amp; q</th><th style="text-align:left">p \</th><th style="text-align:left">q</th><th>p ^ q</th></tr></thead><tbody><tr><td style="text-align:left">0</td><td style="text-align:left">0</td><td style="text-align:left">0</td><td style="text-align:left">0</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">0</td><td style="text-align:left">1</td><td style="text-align:left">0</td><td style="text-align:left">1</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">1</td><td style="text-align:left">1</td><td style="text-align:left">1</td><td style="text-align:left">1</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">1</td><td style="text-align:left">0</td><td style="text-align:left">0</td><td style="text-align:left">1</td><td style="text-align:left">1</td></tr></tbody></table></div><p>假设如果 A = 60，且 B = 13，现在以二进制格式表示，它们如下所示：</p><p>A = 0011 1100</p><p>B = 0000 1101</p><p>-————————</p><p>A&amp;B = 0000 1100</p><p>A|B = 0011 1101</p><p>A^B = 0011 0001</p><p>~A = 1100 0011</p><p>下表显示了 C 语言支持的位运算符。假设变量 <strong>A</strong> 的值为 60，变量 <strong>B</strong> 的值为 13，则：</p><div class="table-container"><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:left">&amp;</td><td style="text-align:left">按位与操作，按二进制位进行”与”运算。运算规则：<code>0&amp;0=0;    0&amp;1=0;     1&amp;0=0;      1&amp;1=1;</code></td><td style="text-align:left">(A &amp; B) 将得到 12，即为 0000 1100</td></tr><tr><td style="text-align:left">\</td><td style="text-align:left"></td><td style="text-align:left">按位或运算符，按二进制位进行”或”运算。运算规则：`0</td><td>0=0;    0</td><td>1=1;    1</td><td>0=1;     1</td><td>1=1;`</td><td>(A \</td><td>B) 将得到 61，即为 0011 1101</td></tr><tr><td style="text-align:left">^</td><td style="text-align:left">异或运算符，按二进制位进行”异或”运算。运算规则：<code>0^0=0;    0^1=1;    1^0=1;   1^1=0;</code></td><td style="text-align:left">(A ^ B) 将得到 49，即为 0011 0001</td></tr><tr><td style="text-align:left">~</td><td style="text-align:left">取反运算符，按二进制位进行”取反”运算。运算规则：<code>~1=-2;    ~0=-1;</code></td><td style="text-align:left">(~A ) 将得到 -61，即为 1100 0011，一个有符号二进制数的补码形式。</td></tr><tr><td style="text-align:left">&lt;&lt;</td><td style="text-align:left">二进制左移运算符。将一个运算对象的各二进制位全部左移若干位（左边的二进制位丢弃，右边补0）。</td><td style="text-align:left">A &lt;&lt; 2 将得到 240，即为 1111 0000</td></tr><tr><td style="text-align:left">&gt;&gt;</td><td style="text-align:left">二进制右移运算符。将一个数的各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃。</td><td style="text-align:left">A &gt;&gt; 2 将得到 15，即为 0000 1111</td></tr></tbody></table></div><p>请看下面的实例，了解 C 语言中所有可用的位运算符：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span>    <span class="token comment">/* 60 = 0011 1100 */</span>     <span class="token keyword">unsigned</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span>    <span class="token comment">/* 13 = 0000 1101 */</span>   <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>               c <span class="token operator">=</span> a <span class="token operator">&amp;</span> b<span class="token punctuation">;</span>       <span class="token comment">/* 12 = 0000 1100 */</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 1 - c 的值是 %d\n"</span><span class="token punctuation">,</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span>    c <span class="token operator">=</span> a <span class="token operator">|</span> b<span class="token punctuation">;</span>       <span class="token comment">/* 61 = 0011 1101 */</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 2 - c 的值是 %d\n"</span><span class="token punctuation">,</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span>    c <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>       <span class="token comment">/* 49 = 0011 0001 */</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 3 - c 的值是 %d\n"</span><span class="token punctuation">,</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span>    c <span class="token operator">=</span> <span class="token operator">~</span>a<span class="token punctuation">;</span>          <span class="token comment">/*-61 = 1100 0011 */</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 4 - c 的值是 %d\n"</span><span class="token punctuation">,</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span>    c <span class="token operator">=</span> a <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span>     <span class="token comment">/* 240 = 1111 0000 */</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 5 - c 的值是 %d\n"</span><span class="token punctuation">,</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span>    c <span class="token operator">=</span> a <span class="token operator">&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">;</span>     <span class="token comment">/* 15 = 0000 1111 */</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 6 - c 的值是 %d\n"</span><span class="token punctuation">,</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Line <span class="token number">1</span> - c 的值是 <span class="token number">12</span>Line <span class="token number">2</span> - c 的值是 <span class="token number">61</span>Line <span class="token number">3</span> - c 的值是 <span class="token number">49</span>Line <span class="token number">4</span> - c 的值是 -61Line <span class="token number">5</span> - c 的值是 <span class="token number">240</span>Line <span class="token number">6</span> - c 的值是 <span class="token number">15</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p>下表列出了 C 语言支持的赋值运算符：</p><div class="table-container"><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:left">=</td><td style="text-align:left">简单的赋值运算符，把右边操作数的值赋给左边操作数</td><td style="text-align:left">C = A + B 将把 A + B 的值赋给 C</td></tr><tr><td style="text-align:left">+=</td><td style="text-align:left">加且赋值运算符，把右边操作数加上左边操作数的结果赋值给左边操作数</td><td style="text-align:left">C += A 相当于 C = C + A</td></tr><tr><td style="text-align:left">-=</td><td style="text-align:left">减且赋值运算符，把左边操作数减去右边操作数的结果赋值给左边操作数</td><td style="text-align:left">C -= A 相当于 C = C - A</td></tr><tr><td style="text-align:left">*=</td><td style="text-align:left">乘且赋值运算符，把右边操作数乘以左边操作数的结果赋值给左边操作数</td><td style="text-align:left">C <em>= A 相当于 C = C </em> A</td></tr><tr><td style="text-align:left">/=</td><td style="text-align:left">除且赋值运算符，把左边操作数除以右边操作数的结果赋值给左边操作数</td><td style="text-align:left">C /= A 相当于 C = C / A</td></tr><tr><td style="text-align:left">%=</td><td style="text-align:left">求模且赋值运算符，求两个操作数的模赋值给左边操作数</td><td style="text-align:left">C %= A 相当于 C = C % A</td></tr><tr><td style="text-align:left">&lt;&lt;=</td><td style="text-align:left">左移且赋值运算符</td><td style="text-align:left">C &lt;&lt;= 2 等同于 C = C &lt;&lt; 2</td></tr><tr><td style="text-align:left">&gt;&gt;=</td><td style="text-align:left">右移且赋值运算符</td><td style="text-align:left">C &gt;&gt;= 2 等同于 C = C &gt;&gt; 2</td></tr><tr><td style="text-align:left">&amp;=</td><td style="text-align:left">按位与且赋值运算符</td><td style="text-align:left">C &amp;= 2 等同于 C = C &amp; 2</td></tr><tr><td style="text-align:left">^=</td><td style="text-align:left">按位异或且赋值运算符</td><td style="text-align:left">C ^= 2 等同于 C = C ^ 2</td></tr><tr><td style="text-align:left">丨=</td><td style="text-align:left">按位或且赋值运算符</td><td style="text-align:left">C 丨= 2 等同于 C = C 丨 2</td></tr></tbody></table></div><p>请看下面的实例，了解 C 语言中所有可用的赋值运算符：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> c <span class="token punctuation">;</span>    c <span class="token operator">=</span>  a<span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 1 - =  运算符实例，c 的值 = %d\n"</span><span class="token punctuation">,</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span>    c <span class="token operator">+=</span>  a<span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 2 - += 运算符实例，c 的值 = %d\n"</span><span class="token punctuation">,</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span>    c <span class="token operator">-=</span>  a<span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 3 - -= 运算符实例，c 的值 = %d\n"</span><span class="token punctuation">,</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span>    c <span class="token operator">*=</span>  a<span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 4 - *= 运算符实例，c 的值 = %d\n"</span><span class="token punctuation">,</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span>    c <span class="token operator">/=</span>  a<span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 5 - /= 运算符实例，c 的值 = %d\n"</span><span class="token punctuation">,</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span>    c  <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>   c <span class="token operator">%=</span>  a<span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 6 - %%= 运算符实例，c 的值 = %d\n"</span><span class="token punctuation">,</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span>    c <span class="token operator">&lt;&lt;=</span>  <span class="token number">2</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 7 - &lt;&lt;= 运算符实例，c 的值 = %d\n"</span><span class="token punctuation">,</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span>    c <span class="token operator">&gt;&gt;=</span>  <span class="token number">2</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 8 - &gt;&gt;= 运算符实例，c 的值 = %d\n"</span><span class="token punctuation">,</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span>    c <span class="token operator">&amp;=</span>  <span class="token number">2</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 9 - &amp;= 运算符实例，c 的值 = %d\n"</span><span class="token punctuation">,</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span>    c <span class="token operator">^=</span>  <span class="token number">2</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 10 - ^= 运算符实例，c 的值 = %d\n"</span><span class="token punctuation">,</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span>    c <span class="token operator">|=</span>  <span class="token number">2</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 11 - |= 运算符实例，c 的值 = %d\n"</span><span class="token punctuation">,</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Line <span class="token number">1</span> - <span class="token operator">=</span>  运算符实例，c 的值 <span class="token operator">=</span> <span class="token number">21</span>Line <span class="token number">2</span> - <span class="token operator">+=</span> 运算符实例，c 的值 <span class="token operator">=</span> <span class="token number">42</span>Line <span class="token number">3</span> - -<span class="token operator">=</span> 运算符实例，c 的值 <span class="token operator">=</span> <span class="token number">21</span>Line <span class="token number">4</span> - *<span class="token operator">=</span> 运算符实例，c 的值 <span class="token operator">=</span> <span class="token number">441</span>Line <span class="token number">5</span> - /<span class="token operator">=</span> 运算符实例，c 的值 <span class="token operator">=</span> <span class="token number">21</span>Line <span class="token number">6</span> - %<span class="token operator">=</span> 运算符实例，c 的值 <span class="token operator">=</span> <span class="token number">11</span>Line <span class="token number">7</span> - <span class="token operator">&lt;&lt;</span><span class="token operator">=</span> 运算符实例，c 的值 <span class="token operator">=</span> <span class="token number">44</span>Line <span class="token number">8</span> - <span class="token operator">&gt;&gt;</span><span class="token operator">=</span> 运算符实例，c 的值 <span class="token operator">=</span> <span class="token number">11</span>Line <span class="token number">9</span> - <span class="token operator">&amp;</span><span class="token operator">=</span> 运算符实例，c 的值 <span class="token operator">=</span> <span class="token number">2</span>Line <span class="token number">10</span> - ^<span class="token operator">=</span> 运算符实例，c 的值 <span class="token operator">=</span> <span class="token number">0</span>Line <span class="token number">11</span> - <span class="token operator">|</span><span class="token operator">=</span> 运算符实例，c 的值 <span class="token operator">=</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="杂项运算符-↦-sizeof-amp-三元"><a href="#杂项运算符-↦-sizeof-amp-三元" class="headerlink" title="杂项运算符 ↦ sizeof &amp; 三元"></a>杂项运算符 ↦ sizeof &amp; 三元</h2><p>下表列出了 C 语言支持的其他一些重要的运算符，包括 <strong>sizeof</strong> 和 <strong>? :</strong>。</p><div class="table-container"><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:left">sizeof()</td><td style="text-align:left">返回变量的大小。</td><td style="text-align:left">sizeof(a) 将返回 4，其中 a 是整数。</td></tr><tr><td style="text-align:left">&amp;</td><td style="text-align:left">返回变量的地址。</td><td style="text-align:left">&amp;a; 将给出变量的实际地址。</td></tr><tr><td style="text-align:left">*</td><td style="text-align:left">指向一个变量。</td><td style="text-align:left">*a; 将指向一个变量。</td></tr><tr><td style="text-align:left">? :</td><td style="text-align:left">条件表达式</td><td style="text-align:left">如果条件为真 ? 则值为 X : 否则值为 Y</td></tr></tbody></table></div><p>请看下面的实例，了解 C 语言中所有可用的杂项运算符：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include &lt;stdio.h&gt;</span> int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   int a <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>   short b<span class="token punctuation">;</span>   double c<span class="token punctuation">;</span>   int* ptr<span class="token punctuation">;</span>    /* sizeof 运算符实例 */   printf<span class="token punctuation">(</span><span class="token string">"Line 1 - 变量 a 的大小 = %lu<span class="token entity" title="\n">\n</span>"</span>, sizeof<span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   printf<span class="token punctuation">(</span><span class="token string">"Line 2 - 变量 b 的大小 = %lu<span class="token entity" title="\n">\n</span>"</span>, sizeof<span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   printf<span class="token punctuation">(</span><span class="token string">"Line 3 - 变量 c 的大小 = %lu<span class="token entity" title="\n">\n</span>"</span>, sizeof<span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    /* <span class="token operator">&amp;</span> 和 * 运算符实例 */   ptr <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>    /* <span class="token string">'ptr'</span> 现在包含 <span class="token string">'a'</span> 的地址 */   printf<span class="token punctuation">(</span><span class="token string">"a 的值是 %d<span class="token entity" title="\n">\n</span>"</span>, a<span class="token punctuation">)</span><span class="token punctuation">;</span>   printf<span class="token punctuation">(</span><span class="token string">"*ptr 是 %d<span class="token entity" title="\n">\n</span>"</span>, *ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    /* 三元运算符实例 */   a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>   b <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> ? <span class="token number">20</span>: <span class="token number">30</span><span class="token punctuation">;</span>   printf<span class="token punctuation">(</span> <span class="token string">"b 的值是 %d<span class="token entity" title="\n">\n</span>"</span>, b <span class="token punctuation">)</span><span class="token punctuation">;</span>    b <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span> ? <span class="token number">20</span>: <span class="token number">30</span><span class="token punctuation">;</span>   printf<span class="token punctuation">(</span> <span class="token string">"b 的值是 %d<span class="token entity" title="\n">\n</span>"</span>, b <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Line <span class="token number">1</span> - 变量 a 的大小 <span class="token operator">=</span> <span class="token number">4</span>Line <span class="token number">2</span> - 变量 b 的大小 <span class="token operator">=</span> <span class="token number">2</span>Line <span class="token number">3</span> - 变量 c 的大小 <span class="token operator">=</span> <span class="token number">8</span>a 的值是 <span class="token number">4</span>*ptr 是 <span class="token number">4</span>b 的值是 <span class="token number">30</span>b 的值是 <span class="token number">20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="C-中的运算符优先级"><a href="#C-中的运算符优先级" class="headerlink" title="C 中的运算符优先级"></a>C 中的运算符优先级</h2><p>运算符的优先级确定表达式中项的组合。这会影响到一个表达式如何计算。某些运算符比其他运算符有更高的优先级，例如，乘除运算符具有比加减运算符更高的优先级。</p><p>例如 x = 7 + 3 <em> 2，在这里，x 被赋值为 13，而不是 20，因为运算符 </em> 具有比 + 更高的优先级，所以首先计算乘法 3*2，然后再加上 7。</p><p>下表将按运算符优先级从高到低列出各个运算符，具有较高优先级的运算符出现在表格的上面，具有较低优先级的运算符出现在表格的下面。在表达式中，较高优先级的运算符会优先被计算。</p><div class="table-container"><table><thead><tr><th style="text-align:left">类别</th><th style="text-align:left">运算符</th><th style="text-align:left">结合性</th></tr></thead><tbody><tr><td style="text-align:left">后缀</td><td style="text-align:left">() [] -&gt; . ++ - -</td><td style="text-align:left">从左到右</td></tr><tr><td style="text-align:left">一元</td><td style="text-align:left">+ - ! ~ ++ - - (type)* &amp; sizeof</td><td style="text-align:left">从右到左</td></tr><tr><td style="text-align:left">乘除</td><td style="text-align:left">* / %</td><td style="text-align:left">从左到右</td></tr><tr><td style="text-align:left">加减</td><td style="text-align:left">+ -</td><td style="text-align:left">从左到右</td></tr><tr><td style="text-align:left">移位</td><td style="text-align:left">&lt;&lt; &gt;&gt;</td><td style="text-align:left">从左到右</td></tr><tr><td style="text-align:left">关系</td><td style="text-align:left">&lt; &lt;= &gt; &gt;=</td><td style="text-align:left">从左到右</td></tr><tr><td style="text-align:left">相等</td><td style="text-align:left">== !=</td><td style="text-align:left">从左到右</td></tr><tr><td style="text-align:left">位与 AND</td><td style="text-align:left">&amp;</td><td style="text-align:left">从左到右</td></tr><tr><td style="text-align:left">位异或 XOR</td><td style="text-align:left">^</td><td style="text-align:left">从左到右</td></tr><tr><td style="text-align:left">位或 OR</td><td style="text-align:left">丨</td><td style="text-align:left">从左到右</td></tr><tr><td style="text-align:left">逻辑与 AND</td><td style="text-align:left">&amp;&amp;</td><td style="text-align:left">从左到右</td></tr><tr><td style="text-align:left">逻辑或 OR</td><td style="text-align:left">丨丨</td><td style="text-align:left">从左到右</td></tr><tr><td style="text-align:left">条件</td><td style="text-align:left">?:</td><td style="text-align:left">从右到左</td></tr><tr><td style="text-align:left">赋值</td><td style="text-align:left">= += -= *= /= %= &gt;&gt;=  &lt;&lt;=  &amp;=  ^=  丨=</td><td style="text-align:left">从右到左</td></tr><tr><td style="text-align:left">逗号</td><td style="text-align:left">,</td><td style="text-align:left">从左到右</td></tr></tbody></table></div><p>请看下面的实例，了解 C 语言中运算符的优先级：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> e<span class="token punctuation">;</span>    e <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">*</span> c <span class="token operator">/</span> d<span class="token punctuation">;</span>      <span class="token comment">// ( 30 * 15 ) / 5</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"(a + b) * c / d 的值是 %d\n"</span><span class="token punctuation">,</span>  e <span class="token punctuation">)</span><span class="token punctuation">;</span>    e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">*</span> c<span class="token punctuation">)</span> <span class="token operator">/</span> d<span class="token punctuation">;</span>    <span class="token comment">// (30 * 15 ) / 5</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"((a + b) * c) / d 的值是 %d\n"</span> <span class="token punctuation">,</span>  e <span class="token punctuation">)</span><span class="token punctuation">;</span>    e <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>c <span class="token operator">/</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// (30) * (15/5)</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"(a + b) * (c / d) 的值是 %d\n"</span><span class="token punctuation">,</span>  e <span class="token punctuation">)</span><span class="token punctuation">;</span>    e <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token punctuation">(</span>b <span class="token operator">*</span> c<span class="token punctuation">)</span> <span class="token operator">/</span> d<span class="token punctuation">;</span>     <span class="token comment">//  20 + (150/5)</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a + (b * c) / d 的值是 %d\n"</span> <span class="token punctuation">,</span>  e <span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>a + b<span class="token punctuation">)</span> * c / d 的值是 <span class="token number">90</span><span class="token punctuation">((</span>a + b<span class="token punctuation">)</span> * c<span class="token punctuation">)</span> / d 的值是 <span class="token number">90</span><span class="token punctuation">(</span>a + b<span class="token punctuation">)</span> * <span class="token punctuation">(</span>c / d<span class="token punctuation">)</span> 的值是 <span class="token number">90</span>a + <span class="token punctuation">(</span>b * c<span class="token punctuation">)</span> / d 的值是 <span class="token number">50</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="C-程序组织结构"><a href="#C-程序组织结构" class="headerlink" title="C 程序组织结构"></a>C 程序组织结构</h1><h2 id="C-分支结构-判断-amp-选择"><a href="#C-分支结构-判断-amp-选择" class="headerlink" title="C 分支结构-判断&amp;选择"></a>C 分支结构-判断&amp;选择</h2><p>判断结构要求程序员指定一个或多个要评估或测试的条件，以及条件为真时要执行的语句（必需的）和条件为假时要执行的语句（可选的）。</p><p>C 语言把任何<strong>非零</strong>和<strong>非空</strong>的值假定为 <strong>true</strong>，把<strong>零</strong>或 <strong>null</strong> 假定为 <strong>false</strong>。</p><p>下面是大多数编程语言中典型的判断结构的一般形式：</p><p><img src="/images/614-C语言-菜鸟教程/C-decision-20200923-1.svg" alt="C 中的判断语句"></p><p>C 语言提供了以下类型的判断语句。点击链接查看每个语句的细节。</p><div class="table-container"><table><thead><tr><th style="text-align:left">语句</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://www.runoob.com/cprogramming/c-if.html">if 语句</a></td><td style="text-align:left">一个 <strong>if 语句</strong> 由一个布尔表达式后跟一个或多个语句组成。</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/cprogramming/c-if-else.html">if…else 语句</a></td><td style="text-align:left">一个 <strong>if 语句</strong> 后可跟一个可选的 <strong>else 语句</strong>，else 语句在布尔表达式为假时执行。</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/cprogramming/c-nested-if.html">嵌套 if 语句</a></td><td style="text-align:left">您可以在一个 <strong>if</strong> 或 <strong>else if</strong> 语句内使用另一个 <strong>if</strong> 或 <strong>else if</strong> 语句。</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/cprogramming/c-switch.html">switch 语句</a></td><td style="text-align:left">一个 <strong>switch</strong> 语句允许测试一个变量等于多个值时的情况。</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/cprogramming/c-nested-switch.html">嵌套 switch 语句</a></td><td style="text-align:left">您可以在一个 <strong>switch</strong> 语句内使用另一个 <strong>switch</strong> 语句。</td></tr></tbody></table></div><h3 id="C-if-语句"><a href="#C-if-语句" class="headerlink" title="C if 语句"></a>C if 语句</h3><p>一个 <strong>if 语句</strong> 由一个布尔表达式后跟一个或多个语句组成。</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>C 语言中 <strong>if</strong> 语句的语法：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span><span class="token punctuation">(</span>boolean_expression<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">/* 如果布尔表达式为真将执行的语句 */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果布尔表达式为 <strong>true</strong>，则 if 语句内的代码块将被执行。如果布尔表达式为 <strong>false</strong>，则 if 语句结束后的第一组代码（闭括号后）将被执行。</p><p>C 语言把任何<strong>非零</strong>和<strong>非空</strong>的值假定为 <strong>true</strong>，把<strong>零</strong>或 <strong>null</strong> 假定为 <strong>false</strong>。</p><h4 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h4><p><img src="/images/614-C语言-菜鸟教程/c-if-20200922-1.svg" alt="C 中的 if 语句"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span> <span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">/* 局部变量定义 */</span>   <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment">/* 使用 if 语句检查布尔条件 */</span>   <span class="token keyword">if</span><span class="token punctuation">(</span> a <span class="token operator">&lt;</span> <span class="token number">20</span> <span class="token punctuation">)</span>   <span class="token punctuation">{</span>       <span class="token comment">/* 如果条件为真，则输出下面的语句 */</span>       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a 小于 20\n"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a 的值是 %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">a 小于 <span class="token number">20</span>a 的值是 <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="C-if…else-语句"><a href="#C-if…else-语句" class="headerlink" title="C if…else 语句"></a>C if…else 语句</h3><p>一个 <strong>if 语句</strong> 后可跟一个可选的 <strong>else 语句</strong>，else 语句在布尔表达式为 false 时执行。</p><h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><p>C 语言中 <strong>if…else</strong> 语句的语法：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span><span class="token punctuation">(</span>boolean_expression<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">/* 如果布尔表达式为真将执行的语句 */</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>   <span class="token comment">/* 如果布尔表达式为假将执行的语句 */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果布尔表达式为 <strong>true</strong>，则执行 <strong>if</strong> 块内的代码。如果布尔表达式为 <strong>false</strong>，则执行 <strong>else</strong> 块内的代码。</p><p>C 语言把任何<strong>非零</strong>和<strong>非空</strong>的值假定为 <strong>true</strong>，把<strong>零</strong>或 <strong>null</strong> 假定为 <strong>false</strong>。</p><h4 id="流程图-1"><a href="#流程图-1" class="headerlink" title="流程图"></a>流程图</h4><p><img src="/images/614-C语言-菜鸟教程/c-if-else-20200923.svg" alt="C 中的 if...else 语句"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span> <span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">/* 局部变量定义 */</span>   <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token comment">/* 检查布尔条件 */</span>   <span class="token keyword">if</span><span class="token punctuation">(</span> a <span class="token operator">&lt;</span> <span class="token number">20</span> <span class="token punctuation">)</span>   <span class="token punctuation">{</span>       <span class="token comment">/* 如果条件为真，则输出下面的语句 */</span>       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a 小于 20\n"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">else</span>   <span class="token punctuation">{</span>       <span class="token comment">/* 如果条件为假，则输出下面的语句 */</span>       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a 大于 20\n"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a 的值是 %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">a 大于 <span class="token number">20</span>a 的值是 <span class="token number">100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="if…else-if…else-语句"><a href="#if…else-if…else-语句" class="headerlink" title="if…else if…else 语句"></a>if…else if…else 语句</h4><p>一个 <strong>if</strong> 语句后可跟一个可选的 <strong>else if…else</strong> 语句，这可用于测试多种条件。</p><p>当使用 if…else if…else 语句时，以下几点需要注意：</p><ul><li>一个 if 后可跟零个或一个 else，else 必须在所有 else if 之后。</li><li>一个 if 后可跟零个或多个 else if，else if 必须在 else 之前。</li><li>一旦某个 else if 匹配成功，其他的 else if 或 else 将不会被测试。</li></ul><h4 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h4><p>C 语言中的 <strong>if…else if…else</strong> 语句的语法：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span><span class="token punctuation">(</span>boolean_expression <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">/* 当布尔表达式 1 为真时执行 */</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> boolean_expression <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">/* 当布尔表达式 2 为真时执行 */</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> boolean_expression <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">/* 当布尔表达式 3 为真时执行 */</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>   <span class="token comment">/* 当上面条件都不为真时执行 */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span> <span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">/* 局部变量定义 */</span>   <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token comment">/* 检查布尔条件 */</span>   <span class="token keyword">if</span><span class="token punctuation">(</span> a <span class="token operator">==</span> <span class="token number">10</span> <span class="token punctuation">)</span>   <span class="token punctuation">{</span>       <span class="token comment">/* 如果 if 条件为真，则输出下面的语句 */</span>       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a 的值是 10\n"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> a <span class="token operator">==</span> <span class="token number">20</span> <span class="token punctuation">)</span>   <span class="token punctuation">{</span>       <span class="token comment">/* 如果 else if 条件为真，则输出下面的语句 */</span>       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a 的值是 20\n"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> a <span class="token operator">==</span> <span class="token number">30</span> <span class="token punctuation">)</span>   <span class="token punctuation">{</span>       <span class="token comment">/* 如果 else if 条件为真，则输出下面的语句 */</span>       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a 的值是 30\n"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">else</span>   <span class="token punctuation">{</span>       <span class="token comment">/* 如果上面条件都不为真，则输出下面的语句 */</span>       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"没有匹配的值\n"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a 的准确值是 %d\n"</span><span class="token punctuation">,</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">没有匹配的值a 的准确值是 <span class="token number">100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="C-嵌套-if-语句"><a href="#C-嵌套-if-语句" class="headerlink" title="C 嵌套 if 语句"></a>C 嵌套 if 语句</h3><p>在 C 语言中，<strong>嵌套</strong> if-else 语句是合法的，这意味着您可以在一个 <strong>if</strong> 或 <strong>else if</strong> 语句内使用另一个 <strong>if</strong> 或 <strong>else if</strong> 语句。</p><h4 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h4><p>C 语言中 <strong>嵌套 if</strong> 语句的语法：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span><span class="token punctuation">(</span> boolean_expression <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">/* 当布尔表达式 1 为真时执行 */</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>boolean_expression <span class="token number">2</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>      <span class="token comment">/* 当布尔表达式 2 为真时执行 */</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>您可以嵌套 <strong>else if…else</strong>，方式与嵌套 <em>if</em> 语句相似。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span> <span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">/* 局部变量定义 */</span>   <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>    <span class="token comment">/* 检查布尔条件 */</span>   <span class="token keyword">if</span><span class="token punctuation">(</span> a <span class="token operator">==</span> <span class="token number">100</span> <span class="token punctuation">)</span>   <span class="token punctuation">{</span>       <span class="token comment">/* 如果条件为真，则检查下面的条件 */</span>       <span class="token keyword">if</span><span class="token punctuation">(</span> b <span class="token operator">==</span> <span class="token number">200</span> <span class="token punctuation">)</span>       <span class="token punctuation">{</span>          <span class="token comment">/* 如果条件为真，则输出下面的语句 */</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a 的值是 100，且 b 的值是 200\n"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a 的准确值是 %d\n"</span><span class="token punctuation">,</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"b 的准确值是 %d\n"</span><span class="token punctuation">,</span> b <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">a 的值是 <span class="token number">100</span>，且 b 的值是 <span class="token number">200</span>a 的准确值是 <span class="token number">100</span>b 的准确值是 <span class="token number">200</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="C-switch-语句"><a href="#C-switch-语句" class="headerlink" title="C switch 语句"></a>C switch 语句</h3><p>一个 <strong>switch</strong> 语句允许测试一个变量等于多个值时的情况。每个值称为一个 case，且被测试的变量会对每个 <strong>switch case</strong> 进行检查。</p><h4 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h4><p>C 语言中 <strong>switch</strong> 语句的语法：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">switch</span><span class="token punctuation">(</span>expression<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">case</span> constant<span class="token operator">-</span>expression  <span class="token operator">:</span>       <span class="token function">statement</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">/* 可选的 */</span>    <span class="token keyword">case</span> constant<span class="token operator">-</span>expression  <span class="token operator">:</span>       <span class="token function">statement</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">/* 可选的 */</span>      <span class="token comment">/* 您可以有任意数量的 case 语句 */</span>    <span class="token keyword">default</span> <span class="token operator">:</span> <span class="token comment">/* 可选的 */</span>       <span class="token function">statement</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>switch</strong> 语句必须遵循下面的规则：</p><ul><li><strong>switch</strong> 语句中的 <strong>expression</strong> 是一个常量表达式，必须是一个整型或枚举类型。</li><li>在一个 switch 中可以有任意数量的 case 语句。每个 case 后跟一个要比较的值和一个冒号。</li><li>case 的 <strong>constant-expression</strong> 必须与 switch 中的变量具有相同的数据类型，且必须是一个常量或字面量。</li><li>当被测试的变量等于 case 中的常量时，case 后跟的语句将被执行，直到遇到 <strong>break</strong> 语句为止。</li><li>当遇到 <strong>break</strong> 语句时，switch 终止，控制流将跳转到 switch 语句后的下一行。</li><li>不是每一个 case 都需要包含 <strong>break</strong>。如果 case 语句不包含 <strong>break</strong>，控制流将会 <em>继续</em> 后续的 case，直到遇到 break 为止。</li><li>一个 <strong>switch</strong> 语句可以有一个可选的 <strong>default</strong> case，出现在 switch 的结尾。default case 可用于在上面所有 case 都不为真时执行一个任务。default case 中的 <strong>break</strong> 语句不是必需的。</li></ul><h4 id="流程图-2"><a href="#流程图-2" class="headerlink" title="流程图"></a>流程图</h4><p><img src="/images/614-C语言-菜鸟教程/switch_statement.jpg" alt="C 中的 switch 语句"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span> <span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">/* 局部变量定义 */</span>   <span class="token keyword">char</span> grade <span class="token operator">=</span> <span class="token char">'B'</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span>   <span class="token punctuation">{</span>   <span class="token keyword">case</span> <span class="token char">'A'</span> <span class="token operator">:</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"很棒！\n"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>   <span class="token keyword">case</span> <span class="token char">'B'</span> <span class="token operator">:</span>   <span class="token keyword">case</span> <span class="token char">'C'</span> <span class="token operator">:</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"做得好\n"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>   <span class="token keyword">case</span> <span class="token char">'D'</span> <span class="token operator">:</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"您通过了\n"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>   <span class="token keyword">case</span> <span class="token char">'F'</span> <span class="token operator">:</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"最好再试一下\n"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>   <span class="token keyword">default</span> <span class="token operator">:</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"无效的成绩\n"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"您的成绩是 %c\n"</span><span class="token punctuation">,</span> grade <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">做得好您的成绩是 B<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="C-嵌套-switch-语句"><a href="#C-嵌套-switch-语句" class="headerlink" title="C 嵌套 switch 语句"></a>C 嵌套 switch 语句</h3><p>您可以把一个 <strong>switch</strong> 作为一个外部 <strong>switch</strong> 的语句序列的一部分，即可以在一个 <strong>switch</strong> 语句内使用另一个 <strong>switch</strong> 语句。即使内部和外部 switch 的 case 常量包含共同的值，也没有矛盾。</p><h4 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h4><p>C 语言中 <strong>嵌套 switch</strong> 语句的语法：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">switch</span><span class="token punctuation">(</span>ch1<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">case</span> <span class="token char">'A'</span><span class="token operator">:</span>       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"这个 A 是外部 switch 的一部分"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">switch</span><span class="token punctuation">(</span>ch2<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">case</span> <span class="token char">'A'</span><span class="token operator">:</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"这个 A 是内部 switch 的一部分"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token keyword">case</span> <span class="token char">'B'</span><span class="token operator">:</span> <span class="token comment">/* 内部 B case 代码 */</span>      <span class="token punctuation">}</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>   <span class="token keyword">case</span> <span class="token char">'B'</span><span class="token operator">:</span> <span class="token comment">/* 外部 B case 代码 */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span> <span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">/* 局部变量定义 */</span>   <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token number">100</span><span class="token operator">:</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"这是外部 switch 的一部分\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">switch</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">200</span><span class="token operator">:</span>               <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"这是内部 switch 的一部分\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a 的准确值是 %d\n"</span><span class="token punctuation">,</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"b 的准确值是 %d\n"</span><span class="token punctuation">,</span> b <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">这是外部 switch 的一部分这是内部 switch 的一部分a 的准确值是 <span class="token number">100</span>b 的准确值是 <span class="token number">200</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="运算符-三元运算符"><a href="#运算符-三元运算符" class="headerlink" title="? : 运算符(三元运算符)"></a>? : 运算符(三元运算符)</h4><p>我们已经在前面的章节中讲解了 <strong>条件运算符 ? :</strong>，可以用来替代 <strong>if…else</strong> 语句。它的一般形式如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Exp1 <span class="token operator">?</span> Exp2 <span class="token operator">:</span> Exp3<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，Exp1、Exp2 和 Exp3 是表达式。请注意，冒号的使用和位置。</p><p>? 表达式的值是由 Exp1 决定的。如果 Exp1 为真，则计算 Exp2 的值，结果即为整个表达式的值。如果 Exp1 为假，则计算 Exp3 的值，结果即为整个表达式的值。</p><p><img src="/images/614-C语言-菜鸟教程/Conditional-Statement-in-C-Programming-Lanuage-Ternary-Operator.png" alt=""></p><p>以下实例通过输入一个数字来判断它是否为奇数或偶数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入一个数字 : "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">(</span>num<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"偶数"</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"奇数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="C-循环结构"><a href="#C-循环结构" class="headerlink" title="C 循环结构"></a>C 循环结构</h2><p>有的时候，我们可能需要多次执行同一块代码。一般情况下，语句是按顺序执行的：函数中的第一个语句先执行，接着是第二个语句，依此类推。</p><p>编程语言提供了更为复杂执行路径的多种控制结构。</p><p>循环语句允许我们多次执行一个语句或语句组，下面是大多数编程语言中循环语句的流程图：</p><p><img src="/images/614-C语言-菜鸟教程/loop.png" alt="循环结构"></p><p>C 语言提供了以下几种循环类型。点击链接查看每个类型的细节。</p><div class="table-container"><table><thead><tr><th style="text-align:left">循环类型</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://www.runoob.com/cprogramming/c-while-loop.html">while 循环</a></td><td style="text-align:left">当给定条件为真时，重复语句或语句组。它会在执行循环主体之前测试条件。</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/cprogramming/c-for-loop.html">for 循环</a></td><td style="text-align:left">多次执行一个语句序列，简化管理循环变量的代码。</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/cprogramming/c-do-while-loop.html">do…while 循环</a></td><td style="text-align:left">除了它是在循环主体结尾测试条件外，其他与 while 语句类似。</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/cprogramming/c-nested-loops.html">嵌套循环</a></td><td style="text-align:left">您可以在 while、for 或 do..while 循环内使用一个或多个循环。</td></tr></tbody></table></div><h3 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h3><p>只要给定的条件为真，C 语言中的 <strong>while</strong> 循环语句会重复执行一个目标语句。</p><h4 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h4><p>C 语言中 <strong>while</strong> 循环的语法：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">while</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">statement</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在这里，<strong>statement(s)</strong> 可以是一个单独的语句，也可以是几个语句组成的代码块。</p><p><strong>condition</strong> 可以是任意的表达式，当为任意非零值时都为 true。当条件为 true 时执行循环。 当条件为 false 时，退出循环，程序流将继续执行紧接着循环的下一条语句。</p><h4 id="流程图-3"><a href="#流程图-3" class="headerlink" title="流程图"></a>流程图</h4><p><img src="/images/614-C语言-菜鸟教程/BFE13459-897C-41A5-AE94-D71B0CA50FB6.jpg" alt="C 中的 while 循环"></p><p>在这里，<em>while</em> 循环的关键点是循环可能一次都不会执行。当条件为 false 时，会跳过循环主体，直接执行紧接着 while 循环的下一条语句。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span> <span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">/* 局部变量定义 */</span>   <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>   <span class="token comment">/* while 循环执行 */</span>   <span class="token keyword">while</span><span class="token punctuation">(</span> a <span class="token operator">&lt;</span> <span class="token number">20</span> <span class="token punctuation">)</span>   <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a 的值： %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>      a<span class="token operator">++</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">a 的值： <span class="token number">10</span>a 的值： <span class="token number">11</span>a 的值： <span class="token number">12</span>a 的值： <span class="token number">13</span>a 的值： <span class="token number">14</span>a 的值： <span class="token number">15</span>a 的值： <span class="token number">16</span>a 的值： <span class="token number">17</span>a 的值： <span class="token number">18</span>a 的值： <span class="token number">19</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h3><p><strong>for</strong> 循环允许您编写一个执行指定次数的循环控制结构。</p><h4 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h4><p>C 语言中 <strong>for</strong> 循环的语法：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span> <span class="token punctuation">(</span> init<span class="token punctuation">;</span> condition<span class="token punctuation">;</span> increment <span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">statement</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>下面是 for 循环的控制流：</p><ol><li><strong>init</strong> 会首先被执行，且只会执行一次。这一步允许您声明并初始化任何循环控制变量。您也可以不在这里写任何语句，只要有一个分号出现即可。</li><li>接下来，会判断 <strong>condition</strong>。如果为真，则执行循环主体。如果为假，则不执行循环主体，且控制流会跳转到紧接着 for 循环的下一条语句。</li><li>在执行完 for 循环主体后，控制流会跳回上面的 <strong>increment</strong> 语句。该语句允许您更新循环控制变量。该语句可以留空，只要在条件后有一个分号出现即可。</li><li>条件再次被判断。如果为真，则执行循环，这个过程会不断重复（循环主体，然后增加步值，再然后重新判断条件）。在条件变为假时，for 循环终止。</li></ol><h4 id="流程图-4"><a href="#流程图-4" class="headerlink" title="流程图"></a>流程图</h4><p><img src="/images/614-C语言-菜鸟教程/69978E61-0BA5-4D66-A115-D3AD15B16F47.jpg" alt="C 中的 for 循环"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span> <span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">/* for 循环执行 */</span>   <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> a <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span>   <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a 的值： %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">a 的值： <span class="token number">10</span>a 的值： <span class="token number">11</span>a 的值： <span class="token number">12</span>a 的值： <span class="token number">13</span>a 的值： <span class="token number">14</span>a 的值： <span class="token number">15</span>a 的值： <span class="token number">16</span>a 的值： <span class="token number">17</span>a 的值： <span class="token number">18</span>a 的值： <span class="token number">19</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="do…while-循环"><a href="#do…while-循环" class="headerlink" title="do…while 循环"></a>do…while 循环</h3><p>不像 <strong>for</strong> 和 <strong>while</strong> 循环，它们是在循环头部测试循环条件。在 C 语言中，<strong>do…while</strong> 循环是在循环的尾部检查它的条件。</p><p><strong>do…while</strong> 循环与 while 循环类似，但是 do…while 循环会确保至少执行一次循环。</p><h4 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h4><p>C 语言中 <strong>do…while</strong> 循环的语法：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">do</span><span class="token punctuation">{</span>   <span class="token function">statement</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span> condition <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请注意，条件表达式出现在循环的尾部，所以循环中的 statement(s) 会在条件被测试之前至少执行一次。</p><p>如果条件为真，控制流会跳转回上面的 do，然后重新执行循环中的 statement(s)。这个过程会不断重复，直到给定条件变为假为止。</p><h4 id="流程图-5"><a href="#流程图-5" class="headerlink" title="流程图"></a>流程图</h4><p><img src="/images/614-C语言-菜鸟教程/B2FE1EC7-6477-439B-8F50-82D537673799.jpg" alt="C 中的 do...while 循环"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span> <span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">/* 局部变量定义 */</span>   <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>   <span class="token comment">/* do 循环执行，在条件被测试之前至少执行一次 */</span>   <span class="token keyword">do</span>   <span class="token punctuation">{</span>       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a 的值： %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>       a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span> a <span class="token operator">&lt;</span> <span class="token number">20</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">a 的值： <span class="token number">10</span>a 的值： <span class="token number">11</span>a 的值： <span class="token number">12</span>a 的值： <span class="token number">13</span>a 的值： <span class="token number">14</span>a 的值： <span class="token number">15</span>a 的值： <span class="token number">16</span>a 的值： <span class="token number">17</span>a 的值： <span class="token number">18</span>a 的值： <span class="token number">19</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="C-嵌套循环"><a href="#C-嵌套循环" class="headerlink" title="C 嵌套循环"></a>C 嵌套循环</h3><p>C 语言允许在一个循环内使用另一个循环，下面演示几个实例来说明这个概念。</p><h4 id="语法-9"><a href="#语法-9" class="headerlink" title="语法"></a>语法</h4><p>C 语言中 <strong>嵌套 for 循环</strong> 语句的语法：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span> <span class="token punctuation">(</span>initialization<span class="token punctuation">;</span> condition<span class="token punctuation">;</span> increment<span class="token operator">/</span>decrement<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">statement</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>initialization<span class="token punctuation">;</span> condition<span class="token punctuation">;</span> increment<span class="token operator">/</span>decrement<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">statement</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>流程图：</p><p><img src="/images/614-C语言-菜鸟教程/c-nested-loops-20200922-1.svg" alt=""></p><p>C 语言中 <strong>嵌套 while 循环</strong> 语句的语法：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">while</span> <span class="token punctuation">(</span>condition1<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">statement</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>condition2<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">statement</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>流程图：</p><p><img src="/images/614-C语言-菜鸟教程/c-nested-loops-20200922-2.svg" alt=""></p><p>C 语言中 <strong>嵌套 do…while 循环</strong> 语句的语法：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">do</span><span class="token punctuation">{</span>    <span class="token function">statement</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">do</span>    <span class="token punctuation">{</span>        <span class="token function">statement</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token keyword">while</span> <span class="token punctuation">(</span>condition2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token keyword">while</span> <span class="token punctuation">(</span>condition1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>流程图：</p><p><img src="/images/614-C语言-菜鸟教程/c-nested-loops-20200922-3.svg" alt=""></p><p>关于嵌套循环有一点值得注意，您可以在任何类型的循环内嵌套其他任何类型的循环。比如，一个 for 循环可以嵌套在一个 while 循环内，反之亦然。</p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>下面的程序使用了一个嵌套的 for 循环来查找 2 到 100 中的质数：</p><ul><li>for 嵌套实例</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span> <span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">/* 局部变量定义 */</span>   <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>i<span class="token operator">/</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>i<span class="token operator">%</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// 如果找到，则不是质数</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">&gt;</span> <span class="token punctuation">(</span>i<span class="token operator">/</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d 是质数\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">2</span> 是质数<span class="token number">3</span> 是质数<span class="token number">5</span> 是质数<span class="token number">7</span> 是质数<span class="token number">11</span> 是质数<span class="token number">13</span> 是质数<span class="token number">17</span> 是质数<span class="token number">19</span> 是质数<span class="token number">23</span> 是质数<span class="token number">29</span> 是质数<span class="token number">31</span> 是质数<span class="token number">37</span> 是质数<span class="token number">41</span> 是质数<span class="token number">43</span> 是质数<span class="token number">47</span> 是质数<span class="token number">53</span> 是质数<span class="token number">59</span> 是质数<span class="token number">61</span> 是质数<span class="token number">67</span> 是质数<span class="token number">71</span> 是质数<span class="token number">73</span> 是质数<span class="token number">79</span> 是质数<span class="token number">83</span> 是质数<span class="token number">89</span> 是质数<span class="token number">97</span> 是质数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>while 嵌套实例</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> i <span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span><span class="token number">1</span> <span class="token number">2</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>do-while 嵌套实例</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> i <span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">***************<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="循环控制语句"><a href="#循环控制语句" class="headerlink" title="循环控制语句"></a>循环控制语句</h3><p>循环控制语句改变你代码的执行顺序。通过它你可以实现代码的跳转。</p><p>C 提供了下列的循环控制语句。点击链接查看每个语句的细节。</p><div class="table-container"><table><thead><tr><th style="text-align:left">控制语句</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://www.runoob.com/cprogramming/c-break-statement.html">break 语句</a></td><td style="text-align:left">终止<strong>循环</strong>或 <strong>switch</strong> 语句，程序流将继续执行紧接着循环或 switch 的下一条语句。</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/cprogramming/c-continue-statement.html">continue 语句</a></td><td style="text-align:left">告诉一个循环体立刻停止本次循环迭代，重新开始下次循环迭代。</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/cprogramming/c-goto-statement.html">goto 语句</a></td><td style="text-align:left">将控制转移到被标记的语句。但是不建议在程序中使用 goto 语句。</td></tr></tbody></table></div><h4 id="无限循环"><a href="#无限循环" class="headerlink" title="无限循环"></a>无限循环</h4><p>如果条件永远不为假，则循环将变成无限循环。<strong>for</strong> 循环在传统意义上可用于实现无限循环。由于构成循环的三个表达式中任何一个都不是必需的，您可以将某些条件表达式留空来构成一个无限循环。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span> <span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token punctuation">)</span>   <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"该循环会永远执行下去！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当条件表达式不存在时，它被假设为真。您也可以设置一个初始值和增量表达式，但是一般情况下，C 程序员偏向于使用 for(;;) 结构来表示一个无限循环。</p><p><strong>注意：</strong>您可以按 <strong>Ctrl + C</strong> 键终止一个无限循环。</p><h2 id="C-程序控制语句"><a href="#C-程序控制语句" class="headerlink" title="C 程序控制语句"></a>C 程序控制语句</h2><div class="table-container"><table><thead><tr><th style="text-align:left">控制语句</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://www.runoob.com/cprogramming/c-break-statement.html">break 语句</a></td><td style="text-align:left">终止<strong>循环</strong>或 <strong>switch</strong> 语句，程序流将继续执行紧接着循环或 switch 的下一条语句。</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/cprogramming/c-continue-statement.html">continue 语句</a></td><td style="text-align:left">告诉一个循环体立刻停止本次循环迭代，重新开始下次循环迭代。</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/cprogramming/c-goto-statement.html">goto 语句</a></td><td style="text-align:left">将控制转移到被标记的语句。但是不建议在程序中使用 goto 语句。</td></tr></tbody></table></div><h3 id="break-语句"><a href="#break-语句" class="headerlink" title="break 语句"></a>break 语句</h3><p>C 语言中 <strong>break</strong> 语句有以下两种用法：</p><ol><li>当 <strong>break</strong> 语句出现在一个循环内时，循环会立即终止，且程序流将继续执行紧接着循环的下一条语句。</li><li>它可用于终止 <strong>switch</strong> 语句中的一个 case。</li></ol><p>如果您使用的是嵌套循环（即一个循环内嵌套另一个循环），break 语句会停止执行最内层的循环，然后开始执行该块之后的下一行代码。</p><h4 id="语法-10"><a href="#语法-10" class="headerlink" title="语法"></a>语法</h4><p>C 语言中 <strong>break</strong> 语句的语法：</p><pre class="line-numbers language-none"><code class="language-none">break;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/614-C语言-菜鸟教程/c-break-statement-works.jpg" alt=""></p><h4 id="流程图-6"><a href="#流程图-6" class="headerlink" title="流程图"></a>流程图</h4><p><img src="/images/614-C语言-菜鸟教程/E5A591EF-6515-4BCB-AEAA-A97ABEFC5D7D.jpg" alt=""></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span> <span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">/* 局部变量定义 */</span>   <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>   <span class="token comment">/* while 循环执行 */</span>   <span class="token keyword">while</span><span class="token punctuation">(</span> a <span class="token operator">&lt;</span> <span class="token number">20</span> <span class="token punctuation">)</span>   <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a 的值： %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>      a<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span> a <span class="token operator">&gt;</span> <span class="token number">15</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>         <span class="token comment">/* 使用 break 语句终止循环 */</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">a 的值： <span class="token number">10</span>a 的值： <span class="token number">11</span>a 的值： <span class="token number">12</span>a 的值： <span class="token number">13</span>a 的值： <span class="token number">14</span>a 的值： <span class="token number">15</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="continue-语句"><a href="#continue-语句" class="headerlink" title="continue 语句"></a>continue 语句</h3><p>C 语言中的 <strong>continue</strong> 语句有点像 <strong>break</strong> 语句。但它不是强制终止，continue 会跳过当前循环中的代码，强迫开始下一次循环。</p><p>对于 <strong>for</strong> 循环，<strong>continue</strong> 语句执行后自增语句仍然会执行。对于 <strong>while</strong> 和 <strong>do…while</strong> 循环，<strong>continue</strong> 语句重新执行条件判断语句。</p><h4 id="语法-11"><a href="#语法-11" class="headerlink" title="语法"></a>语法</h4><p>C 语言中 <strong>continue</strong> 语句的语法：</p><pre class="line-numbers language-none"><code class="language-none">continue;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/614-C语言-菜鸟教程/c-continue-statement-works.jpg" alt=""></p><h4 id="流程图-7"><a href="#流程图-7" class="headerlink" title="流程图"></a>流程图</h4><p><img src="/images/614-C语言-菜鸟教程/8962A4F1-B78C-4877-B328-903366EA1470.jpg" alt="C continue 语句"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span> <span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">/* 局部变量定义 */</span>   <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>   <span class="token comment">/* do 循环执行 */</span>   <span class="token keyword">do</span>   <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span> a <span class="token operator">==</span> <span class="token number">15</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>         <span class="token comment">/* 跳过迭代 */</span>         a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token keyword">continue</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a 的值： %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>      a<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span> a <span class="token operator">&lt;</span> <span class="token number">20</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">a 的值： <span class="token number">10</span>a 的值： <span class="token number">11</span>a 的值： <span class="token number">12</span>a 的值： <span class="token number">13</span>a 的值： <span class="token number">14</span>a 的值： <span class="token number">16</span>a 的值： <span class="token number">17</span>a 的值： <span class="token number">18</span>a 的值： <span class="token number">19</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="goto-语句"><a href="#goto-语句" class="headerlink" title="goto 语句"></a>goto 语句</h3><p>C 语言中的 <strong>goto</strong> 语句允许把控制无条件转移到同一函数内的被标记的语句。</p><p><strong>注意：</strong>在任何编程语言中，都不建议使用 goto 语句。因为它使得程序的控制流难以跟踪，使程序难以理解和难以修改。任何使用 goto 语句的程序可以改写成不需要使用 goto 语句的写法。</p><h4 id="语法-12"><a href="#语法-12" class="headerlink" title="语法"></a>语法</h4><p>C 语言中 <strong>goto</strong> 语句的语法：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">goto</span> label<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>label<span class="token operator">:</span> statement<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在这里，<strong>label</strong> 可以是任何除 C 关键字以外的纯文本，它可以设置在 C 程序中 <strong>goto</strong> 语句的前面或者后面。</p><p><img src="/images/614-C语言-菜鸟教程/goto.png" alt=""></p><h4 id="流程图-8"><a href="#流程图-8" class="headerlink" title="流程图"></a>流程图</h4><p><img src="/images/614-C语言-菜鸟教程/c-goto-20200923-1.png" alt="C goto 语句"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span> <span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">/* 局部变量定义 */</span>   <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>   <span class="token comment">/* do 循环执行 */</span>   LOOP<span class="token operator">:</span><span class="token keyword">do</span>   <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span> a <span class="token operator">==</span> <span class="token number">15</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>         <span class="token comment">/* 跳过迭代 */</span>         a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token keyword">goto</span> LOOP<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a 的值： %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>      a<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span> a <span class="token operator">&lt;</span> <span class="token number">20</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">a 的值： <span class="token number">10</span>a 的值： <span class="token number">11</span>a 的值： <span class="token number">12</span>a 的值： <span class="token number">13</span>a 的值： <span class="token number">14</span>a 的值： <span class="token number">16</span>a 的值： <span class="token number">17</span>a 的值： <span class="token number">18</span>a 的值： <span class="token number">19</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="C-函数"><a href="#C-函数" class="headerlink" title="C 函数"></a>C 函数</h1><p>函数是一组一起执行一个任务的语句。每个 C 程序都至少有一个函数，即主函数 <strong>main()</strong> ，所有简单的程序都可以定义其他额外的函数。</p><p>您可以把代码划分到不同的函数中。如何划分代码到不同的函数中是由您来决定的，但在逻辑上，划分通常是根据每个函数执行一个特定的任务来进行的。</p><p>函数<strong>声明</strong>告诉编译器函数的名称、返回类型和参数。函数<strong>定义</strong>提供了函数的实际主体。</p><p>C 标准库提供了大量的程序可以调用的内置函数。例如，函数 <strong>strcat()</strong> 用来连接两个字符串，函数 <strong>memcpy()</strong> 用来复制内存到另一个位置。</p><p>函数还有很多叫法，比如方法、子例程或程序，等等。</p><h2 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h2><p>C 语言中的函数定义的一般形式如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">return_type <span class="token function">function_name</span><span class="token punctuation">(</span> parameter list <span class="token punctuation">)</span><span class="token punctuation">{</span>   body of the function<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在 C 语言中，函数由一个函数头和一个函数主体组成。下面列出一个函数的所有组成部分：</p><ul><li><strong>返回类型：</strong>一个函数可以返回一个值。<strong>return_type</strong> 是函数返回的值的数据类型。有些函数执行所需的操作而不返回值，在这种情况下，return_type 是关键字 <strong>void</strong>。</li><li><strong>函数名称：</strong>这是函数的实际名称。函数名和参数列表一起构成了函数签名。</li><li><strong>参数：</strong>参数就像是占位符。当函数被调用时，您向参数传递一个值，这个值被称为实际参数。参数列表包括函数参数的类型、顺序、数量。参数是可选的，也就是说，函数可能不包含参数。</li><li><strong>函数主体：</strong>函数主体包含一组定义函数执行任务的语句。</li></ul><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>以下是 <strong>max()</strong> 函数的源代码。该函数有两个参数 num1 和 num2，会返回这两个数中较大的那个数：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* 函数返回两个数中较大的那个数 */</span><span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">/* 局部变量声明 */</span>   <span class="token keyword">int</span> result<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num1 <span class="token operator">&gt;</span> num2<span class="token punctuation">)</span>      result <span class="token operator">=</span> num1<span class="token punctuation">;</span>   <span class="token keyword">else</span>      result <span class="token operator">=</span> num2<span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h2><p>函数<strong>声明</strong>会告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义。</p><p>函数声明包括以下几个部分：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">return_type <span class="token function">function_name</span><span class="token punctuation">(</span> parameter list <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>针对上面定义的函数 max()，以下是函数声明：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在函数声明中，参数的名称并不重要，只有参数的类型是必需的，因此下面也是有效的声明：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当您在一个源文件中定义函数且在另一个文件中调用函数时，函数声明是必需的。在这种情况下，您应该在调用函数的文件顶部声明函数。</p><h2 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h2><p>创建 C 函数时，会定义函数做什么，然后通过调用函数来完成已定义的任务。</p><p>当程序调用函数时，程序控制权会转移给被调用的函数。被调用的函数执行已定义的任务，当函数的返回语句被执行时，或到达函数的结束括号时，会把程序控制权交还给主程序。</p><p>调用函数时，传递所需参数，如果函数返回一个值，则可以存储返回值。例如：</p><h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span> <span class="token comment">/* 函数声明 */</span><span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">/* 局部变量定义 */</span>   <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> ret<span class="token punctuation">;</span>    <span class="token comment">/* 调用函数来获取最大值 */</span>   ret <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"Max value is : %d\n"</span><span class="token punctuation">,</span> ret <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment">/* 函数返回两个数中较大的那个数 */</span><span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">/* 局部变量声明 */</span>   <span class="token keyword">int</span> result<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num1 <span class="token operator">&gt;</span> num2<span class="token punctuation">)</span>      result <span class="token operator">=</span> num1<span class="token punctuation">;</span>   <span class="token keyword">else</span>      result <span class="token operator">=</span> num2<span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把 max() 函数和 main() 函数放一块，编译源代码。当运行最后的可执行文件时，会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Max value is <span class="token builtin class-name">:</span> <span class="token number">200</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h2><p>如果函数要使用参数，则必须声明接受参数值的变量。这些变量称为函数的<strong>形式参数</strong>。</p><p>形式参数就像函数内的其他局部变量，在进入函数时被创建，退出函数时被销毁。</p><p>当调用函数时，有两种向函数传递参数的方式：</p><div class="table-container"><table><thead><tr><th style="text-align:left">调用类型</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://www.runoob.com/cprogramming/c-function-call-by-value.html">传值调用</a></td><td style="text-align:left">该方法把参数的实际值复制给函数的形式参数。在这种情况下，修改函数内的形式参数不会影响实际参数。</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/cprogramming/c-function-call-by-pointer.html">引用调用</a></td><td style="text-align:left">通过指针传递方式，形参为指向实参地址的指针，当对形参的指向操作时，就相当于对实参本身进行的操作。</td></tr></tbody></table></div><p>默认情况下，C 使用<strong>传值调用</strong>来传递参数。一般来说，这意味着函数内的代码不能改变用于调用函数的实际参数。</p><h3 id="传值方式调用函数"><a href="#传值方式调用函数" class="headerlink" title="传值方式调用函数"></a>传值方式调用函数</h3><p>向函数传递参数的<strong>传值调用</strong>方法，把参数的实际值复制给函数的形式参数。在这种情况下，修改函数内的形式参数不会影响实际参数。</p><p>默认情况下，C 语言使用<em>传值调用</em>方法来传递参数。一般来说，这意味着函数内的代码不会改变用于调用函数的实际参数。函数 <strong>swap()</strong> 定义如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* 函数定义 */</span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">int</span> temp<span class="token punctuation">;</span>   temp <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token comment">/* 保存 x 的值 */</span>   x <span class="token operator">=</span> y<span class="token punctuation">;</span>    <span class="token comment">/* 把 y 赋值给 x */</span>   y <span class="token operator">=</span> temp<span class="token punctuation">;</span> <span class="token comment">/* 把 temp 赋值给 y */</span>     <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在，让我们通过传递实际参数来调用函数 <strong>swap()</strong>：</p><h4 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span> <span class="token comment">/* 函数声明 */</span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">/* 局部变量定义 */</span>   <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"交换前，a 的值： %d\n"</span><span class="token punctuation">,</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"交换前，b 的值： %d\n"</span><span class="token punctuation">,</span> b <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* 调用函数来交换值 */</span>   <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"交换后，a 的值： %d\n"</span><span class="token punctuation">,</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"交换后，b 的值： %d\n"</span><span class="token punctuation">,</span> b <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-none"><code class="language-none">交换前，a 的值： 100交换前，b 的值： 200交换后，a 的值： 100交换后，b 的值： 200<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上面的实例表明了，虽然在函数内改变了 a 和 b 的值，但是实际上 a 和 b 的值没有发生变化。</p><h3 id="引用方式调用函数"><a href="#引用方式调用函数" class="headerlink" title="引用方式调用函数"></a>引用方式调用函数</h3><p>通过引用传递方式，形参为指向实参地址的指针，当对形参的指向操作时，就相当于对实参本身进行的操作。</p><p>传递指针可以让多个函数访问指针所引用的对象，而不用把对象声明为全局可访问。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* 函数定义 */</span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>x<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">int</span> temp<span class="token punctuation">;</span>   temp <span class="token operator">=</span> <span class="token operator">*</span>x<span class="token punctuation">;</span>    <span class="token comment">/* 保存地址 x 的值 */</span>   <span class="token operator">*</span>x <span class="token operator">=</span> <span class="token operator">*</span>y<span class="token punctuation">;</span>      <span class="token comment">/* 把 y 赋值给 x */</span>   <span class="token operator">*</span>y <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token comment">/* 把 temp 赋值给 y */</span>     <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如需了解 C 中指针的更多细节，请访问 <a href="https://www.runoob.com/cprogramming/c-pointers.html">C - 指针</a> 章节。</p><p>现在，让我们通过引用传值来调用函数 <strong>swap()</strong>：</p><h4 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span> <span class="token comment">/* 函数声明 */</span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>x<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">/* 局部变量定义 */</span>   <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"交换前，a 的值： %d\n"</span><span class="token punctuation">,</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"交换前，b 的值： %d\n"</span><span class="token punctuation">,</span> b <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* 调用函数来交换值    * &amp;a 表示指向 a 的指针，即变量 a 的地址    * &amp;b 表示指向 b 的指针，即变量 b 的地址   */</span>   <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"交换后，a 的值： %d\n"</span><span class="token punctuation">,</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"交换后，b 的值： %d\n"</span><span class="token punctuation">,</span> b <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">交换前，a 的值： <span class="token number">100</span>交换前，b 的值： <span class="token number">200</span>交换后，a 的值： <span class="token number">200</span>交换后，b 的值： <span class="token number">100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上面的实例表明了，与传值调用不同，引用调用在函数内改变了 a 和 b 的值，实际上也改变了函数外 a 和 b 的值。</p><h1 id="C-作用域规则"><a href="#C-作用域规则" class="headerlink" title="C 作用域规则"></a>C 作用域规则</h1><p>任何一种编程中，作用域是程序中定义的变量所存在的区域，超过该区域变量就不能被访问。C 语言中有三个地方可以声明变量：</p><ol><li>在函数或块内部的<strong>局部</strong>变量</li><li>在所有函数外部的<strong>全局</strong>变量</li><li>在<strong>形式</strong>参数的函数参数定义中</li></ol><p>让我们来看看什么是<strong>局部</strong>变量、<strong>全局</strong>变量和<strong>形式</strong>参数。</p><h2 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h2><p>在某个函数或块的内部声明的变量称为局部变量。它们只能被该函数或该代码块内部的语句使用。局部变量在函数外部是不可知的。下面是使用局部变量的实例。在这里，所有的变量 a、b 和 c 是 main() 函数的局部变量。</p><ul><li>实例</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span> <span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">/* 局部变量声明 */</span>  <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>  <span class="token keyword">int</span> c<span class="token punctuation">;</span>   <span class="token comment">/* 实际初始化 */</span>  a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>  c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>   <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">"value of a = %d, b = %d and c = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><p>全局变量是定义在函数外部，通常是在程序的顶部。全局变量在整个程序生命周期内都是有效的，在任意的函数内部能访问全局变量。</p><p>全局变量可以被任何函数访问。也就是说，全局变量在声明后整个程序中都是可用的。下面是使用全局变量和局部变量的实例：</p><ul><li>实例</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span> <span class="token comment">/* 全局变量声明 */</span><span class="token keyword">int</span> g<span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">/* 局部变量声明 */</span>  <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>   <span class="token comment">/* 实际初始化 */</span>  a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>  g <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>   <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">"value of a = %d, b = %d and g = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> g<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在程序中，局部变量和全局变量的名称可以相同，但是在函数内，如果两个名字相同，会使用局部变量值，全局变量不会被使用。下面是一个实例：</p><p>在程序中，局部变量和全局变量的</p><ul><li>实例</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span> <span class="token comment">/* 全局变量声明 */</span><span class="token keyword">int</span> g <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">/* 局部变量声明 */</span>  <span class="token keyword">int</span> g <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>   <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">"value of g = %d\n"</span><span class="token punctuation">,</span>  g<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">value of g <span class="token operator">=</span> <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="形式参数"><a href="#形式参数" class="headerlink" title="形式参数"></a>形式参数</h2><p>函数的参数，形式参数，被当作该函数内的局部变量，如果与全局变量同名它们会优先使用。下面是一个实例：</p><ul><li>实例</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span> <span class="token comment">/* 全局变量声明 */</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">/* 在主函数中的局部变量声明 */</span>  <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">"value of a in main() = %d\n"</span><span class="token punctuation">,</span>  a<span class="token punctuation">)</span><span class="token punctuation">;</span>  c <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">"value of c in main() = %d\n"</span><span class="token punctuation">,</span>  c<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment">/* 添加两个整数的函数 */</span><span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">"value of a in sum() = %d\n"</span><span class="token punctuation">,</span>  a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">"value of b in sum() = %d\n"</span><span class="token punctuation">,</span>  b<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">value of a <span class="token keyword">in</span> main<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">10</span>value of a <span class="token keyword">in</span> sum<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">10</span>value of b <span class="token keyword">in</span> sum<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">20</span>value of c <span class="token keyword">in</span> main<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">30</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>全局变量与局部变量在内存中的区别</strong>：</p><ul><li>全局变量保存在内存的全局存储区中，占用静态的存储单元；</li><li>局部变量保存在栈中，只有在所在函数被调用时才动态地为变量分配存储单元。</li></ul><p>更多内容可参考：<a href="https://www.runoob.com/w3cnote/cpp-static-usage.html">C/C++ 中 static 的用法全局变量与局部变量</a></p></blockquote><h2 id="初始化局部变量和全局变量"><a href="#初始化局部变量和全局变量" class="headerlink" title="初始化局部变量和全局变量"></a>初始化局部变量和全局变量</h2><p>当局部变量被定义时，系统不会对其初始化，您必须自行对其初始化。定义全局变量时，系统会自动对其初始化，如下所示：</p><div class="table-container"><table><thead><tr><th style="text-align:left">数据类型</th><th style="text-align:left">初始化默认值</th></tr></thead><tbody><tr><td style="text-align:left">int</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">char</td><td style="text-align:left">‘\0’</td></tr><tr><td style="text-align:left">float</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">double</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">pointer</td><td style="text-align:left">NULL</td></tr></tbody></table></div><p>正确地初始化变量是一个良好的编程习惯，否则有时候程序可能会产生意想不到的结果，因为未初始化的变量会导致一些在内存位置中已经可用的垃圾值。</p><h1 id="C-数组"><a href="#C-数组" class="headerlink" title="C 数组"></a>C 数组</h1><p>C 语言支持<strong>数组</strong>数据结构，它可以存储一个固定大小的相同类型元素的顺序集合。数组是用来存储一系列数据，但它往往被认为是一系列相同类型的变量。</p><p>数组的声明并不是声明一个个单独的变量，比如 runoob0、runoob1、…、runoob99，而是声明一个数组变量，比如 runoob，然后使用 runoob[0]、runoob[1]、…、runoob[99] 来代表一个个单独的变量。</p><p>所有的数组都是由连续的内存位置组成。最低的地址对应第一个元素，最高的地址对应最后一个元素。</p><p><img src="/images/614-C语言-菜鸟教程/c-arrays-2021-1-18-3.png" alt="C 中的数组"></p><p>数组中的特定元素可以通过索引访问，第一个索引值为 0。</p><p><img src="/images/614-C语言-菜鸟教程/c-array-2021-01-18-2.png" alt=""></p><h2 id="声明数组"><a href="#声明数组" class="headerlink" title="声明数组"></a>声明数组</h2><p>在 C 中要声明一个数组，需要指定元素的类型和元素的数量，如下所示：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">type arrayName <span class="token punctuation">[</span> arraySize <span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这叫做一维数组。<strong>arraySize</strong> 必须是一个大于零的整数常量，<strong>type</strong> 可以是任意有效的 C 数据类型。例如，要声明一个类型为 double 的包含 10 个元素的数组 <strong>balance</strong>，声明语句如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">double</span> balance<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在 <em>balance</em> 是一个可用的数组，可以容纳 10 个类型为 double 的数字。</p><h2 id="初始化数组"><a href="#初始化数组" class="headerlink" title="初始化数组"></a>初始化数组</h2><p>在 C 中，您可以逐个初始化数组，也可以使用一个初始化语句，如下所示：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">double</span> balance<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1000.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">3.4</span><span class="token punctuation">,</span> <span class="token number">7.0</span><span class="token punctuation">,</span> <span class="token number">50.0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>大括号 { } 之间的值的数目不能大于我们在数组声明时在方括号 [ ] 中指定的元素数目。</p><p>如果您省略掉了数组的大小，数组的大小则为初始化时元素的个数。因此，如果：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">double</span> balance<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1000.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">3.4</span><span class="token punctuation">,</span> <span class="token number">7.0</span><span class="token punctuation">,</span> <span class="token number">50.0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>您将创建一个数组，它与前一个实例中所创建的数组是完全相同的。下面是一个为数组中某个元素赋值的实例：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">balance<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">50.0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上述的语句把数组中第五个元素的值赋为 50.0。所有的数组都是以 0 作为它们第一个元素的索引，也被称为基索引，数组的最后一个索引是数组的总大小减去 1。以下是上面所讨论的数组的的图形表示：</p><p><img src="/images/614-C语言-菜鸟教程/c-arrays-2021-1-18-4.png" alt="数组表示"></p><p>下图是一个长度为 <strong>10</strong> 的数组，第一个元素的索引值为 <strong>0</strong>，第九个元素 <strong>runoob</strong> 的索引值为 <strong>8</strong>:</p><p><img src="/images/614-C语言-菜鸟教程/c-array-2021-01-18-2.png" alt=""></p><h2 id="访问数组元素"><a href="#访问数组元素" class="headerlink" title="访问数组元素"></a>访问数组元素</h2><p>数组元素可以通过数组名称加索引进行访问。元素的索引是放在方括号内，跟在数组名称的后边。例如：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">double</span> salary <span class="token operator">=</span> balance<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的语句将把数组中第 10 个元素的值赋给 salary 变量。下面的实例使用了上述的三个概念，即，声明数组、数组赋值、访问数组：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span> <span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">int</span> n<span class="token punctuation">[</span> <span class="token number">10</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">/* n 是一个包含 10 个整数的数组 */</span>   <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token comment">/* 初始化数组元素 */</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>   <span class="token punctuation">{</span>      n<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">/* 设置元素 i 为 i + 100 */</span>   <span class="token punctuation">}</span>      <span class="token comment">/* 输出数组中每个元素的值 */</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">)</span>   <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Element[%d] = %d\n"</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> n<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Element<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span>Element<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">101</span>Element<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">102</span>Element<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">103</span>Element<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">104</span>Element<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">105</span>Element<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">106</span>Element<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">107</span>Element<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">108</span>Element<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">109</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="C-中数组详解"><a href="#C-中数组详解" class="headerlink" title="C 中数组详解"></a>C 中数组详解</h2><p>在 C 中，数组是非常重要的，我们需要了解更多有关数组的细节。下面列出了 C 程序员必须清楚的一些与数组相关的重要概念：</p><div class="table-container"><table><thead><tr><th style="text-align:left">概念</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://www.runoob.com/cprogramming/c-multi-dimensional-arrays.html">多维数组</a></td><td style="text-align:left">C 支持多维数组。多维数组最简单的形式是二维数组。</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/cprogramming/c-passing-arrays-to-functions.html">传递数组给函数</a></td><td style="text-align:left">您可以通过指定不带索引的数组名称来给函数传递一个指向数组的指针。</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/cprogramming/c-return-arrays-from-function.html">从函数返回数组</a></td><td style="text-align:left">C 允许从函数返回数组。</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/cprogramming/c-pointer-to-an-array.html">指向数组的指针</a></td><td style="text-align:left">您可以通过指定不带索引的数组名称来生成一个指向数组中第一个元素的指针。</td></tr></tbody></table></div><h1 id="C-enum-枚举"><a href="#C-enum-枚举" class="headerlink" title="C enum(枚举)"></a>C enum(枚举)</h1><p>枚举是 C 语言中的一种基本数据类型，它可以让数据更简洁，更易读。</p><p>枚举语法定义格式为：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">enum</span>　枚举名　<span class="token punctuation">{</span>枚举元素<span class="token number">1</span><span class="token punctuation">,</span>枚举元素<span class="token number">2</span><span class="token punctuation">,</span>……<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来我们举个例子，比如：一星期有 7 天，如果不用枚举，我们需要使用 #define 来为每个整数定义一个别名：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MON</span>  <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TUE</span>  <span class="token expression"><span class="token number">2</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">WED</span>  <span class="token expression"><span class="token number">3</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">THU</span>  <span class="token expression"><span class="token number">4</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FRI</span>  <span class="token expression"><span class="token number">5</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SAT</span>  <span class="token expression"><span class="token number">6</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SUN</span>  <span class="token expression"><span class="token number">7</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个看起来代码量就比较多，接下来我们看看使用枚举的方式：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">enum</span> <span class="token class-name">DAY</span><span class="token punctuation">{</span>      MON<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> TUE<span class="token punctuation">,</span> WED<span class="token punctuation">,</span> THU<span class="token punctuation">,</span> FRI<span class="token punctuation">,</span> SAT<span class="token punctuation">,</span> SUN<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这样看起来是不是更简洁了。</p><p><strong>注意：</strong>第一个枚举成员的默认值为整型的 0，后续枚举成员的值在前一个成员上加 1。我们在这个实例中把第一个枚举成员的值定义为 1，第二个就为 2，以此类推。</p><blockquote><p>可以在定义枚举类型时改变枚举元素的值：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">enum</span> <span class="token class-name">season</span> <span class="token punctuation">{</span>spring<span class="token punctuation">,</span> summer<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> autumn<span class="token punctuation">,</span> winter<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>没有指定值的枚举元素，其值为前一元素加 1。也就说 spring 的值为 0，summer 的值为 3，autumn 的值为 4，winter 的值为 5</p></blockquote><h3 id="枚举变量的定义"><a href="#枚举变量的定义" class="headerlink" title="枚举变量的定义"></a>枚举变量的定义</h3><p>前面我们只是声明了枚举类型，接下来我们看看如何定义枚举变量。</p><p>我们可以通过以下三种方式来定义枚举变量</p><p><strong>1、先定义枚举类型，再定义枚举变量</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">enum</span> <span class="token class-name">DAY</span><span class="token punctuation">{</span>      MON<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> TUE<span class="token punctuation">,</span> WED<span class="token punctuation">,</span> THU<span class="token punctuation">,</span> FRI<span class="token punctuation">,</span> SAT<span class="token punctuation">,</span> SUN<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">enum</span> <span class="token class-name">DAY</span> day<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2、定义枚举类型的同时定义枚举变量</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">enum</span> <span class="token class-name">DAY</span><span class="token punctuation">{</span>      MON<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> TUE<span class="token punctuation">,</span> WED<span class="token punctuation">,</span> THU<span class="token punctuation">,</span> FRI<span class="token punctuation">,</span> SAT<span class="token punctuation">,</span> SUN<span class="token punctuation">}</span> day<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3、省略枚举名称，直接定义枚举变量</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">enum</span><span class="token punctuation">{</span>      MON<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> TUE<span class="token punctuation">,</span> WED<span class="token punctuation">,</span> THU<span class="token punctuation">,</span> FRI<span class="token punctuation">,</span> SAT<span class="token punctuation">,</span> SUN<span class="token punctuation">}</span> day<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>实例</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span> <span class="token keyword">enum</span> <span class="token class-name">DAY</span><span class="token punctuation">{</span>      MON<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> TUE<span class="token punctuation">,</span> WED<span class="token punctuation">,</span> THU<span class="token punctuation">,</span> FRI<span class="token punctuation">,</span> SAT<span class="token punctuation">,</span> SUN<span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">enum</span> <span class="token class-name">DAY</span> day<span class="token punctuation">;</span>    day <span class="token operator">=</span> WED<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>day<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上实例输出结果为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在C 语言中，枚举类型是被当做 int 或者 unsigned int 类型来处理的，所以按照 C 语言规范是没有办法遍历枚举类型的。</p><p>不过在一些特殊的情况下，枚举类型必须连续是可以实现有条件的遍历。</p><p>以下实例使用 for 来遍历枚举的元素：</p><ul><li>实例</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span> <span class="token keyword">enum</span> <span class="token class-name">DAY</span><span class="token punctuation">{</span>      MON<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> TUE<span class="token punctuation">,</span> WED<span class="token punctuation">,</span> THU<span class="token punctuation">,</span> FRI<span class="token punctuation">,</span> SAT<span class="token punctuation">,</span> SUN<span class="token punctuation">}</span> day<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// 遍历枚举元素</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>day <span class="token operator">=</span> MON<span class="token punctuation">;</span> day <span class="token operator">&lt;=</span> SUN<span class="token punctuation">;</span> day<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"枚举元素：%d \n"</span><span class="token punctuation">,</span> day<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上实例输出结果为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">枚举元素：1 枚举元素：2 枚举元素：3 枚举元素：4 枚举元素：5 枚举元素：6 枚举元素：7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下枚举类型不连续，这种枚举无法遍历。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">enum</span><span class="token punctuation">{</span>    ENUM_0<span class="token punctuation">,</span>    ENUM_10 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>    ENUM_11<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>枚举在 switch 中的使用：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">enum</span> <span class="token class-name">color</span> <span class="token punctuation">{</span> red<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue <span class="token punctuation">}</span><span class="token punctuation">;</span>     <span class="token keyword">enum</span>  <span class="token class-name">color</span> favorite_color<span class="token punctuation">;</span>     <span class="token comment">/* 用户输入数字来选择颜色 */</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入你喜欢的颜色: (1. red, 2. green, 3. blue): "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%u"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>favorite_color<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">/* 输出结果 */</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>favorite_color<span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token keyword">case</span> red<span class="token operator">:</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"你喜欢的颜色是红色"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> green<span class="token operator">:</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"你喜欢的颜色是绿色"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> blue<span class="token operator">:</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"你喜欢的颜色是蓝色"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"你没有选择你喜欢的颜色"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上实例输出结果为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">请输入你喜欢的颜色: <span class="token punctuation">(</span><span class="token number">1</span>. red, <span class="token number">2</span>. green, <span class="token number">3</span>. blue<span class="token punctuation">)</span>: <span class="token number">1</span>你喜欢的颜色是红色<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="将整数转换为枚举"><a href="#将整数转换为枚举" class="headerlink" title="将整数转换为枚举"></a>将整数转换为枚举</h3><p>以下实例将整数转换为枚举：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">enum</span> <span class="token class-name">day</span>    <span class="token punctuation">{</span>        saturday<span class="token punctuation">,</span>        sunday<span class="token punctuation">,</span>        monday<span class="token punctuation">,</span>        tuesday<span class="token punctuation">,</span>        wednesday<span class="token punctuation">,</span>        thursday<span class="token punctuation">,</span>        friday    <span class="token punctuation">}</span> workday<span class="token punctuation">;</span>     <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">enum</span> <span class="token class-name">day</span> weekend<span class="token punctuation">;</span>    weekend <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token keyword">enum</span> <span class="token class-name">day</span> <span class="token punctuation">)</span> a<span class="token punctuation">;</span>  <span class="token comment">//类型转换</span>    <span class="token comment">//weekend = a; //错误</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"weekend:%d"</span><span class="token punctuation">,</span>weekend<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上实例输出结果为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">weekend:1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="C-指针"><a href="#C-指针" class="headerlink" title="C 指针"></a>C 指针</h1><p>学习 C 语言的指针既简单又有趣。通过指针，可以简化一些 C 编程任务的执行，还有一些任务，如动态内存分配，没有指针是无法执行的。所以，想要成为一名优秀的 C 程序员，学习指针是很有必要的。</p><p>正如您所知道的，每一个变量都有一个内存位置，每一个内存位置都定义了可使用 <strong>&amp;</strong> 运算符访问的地址，它表示了在内存中的一个地址。</p><p>请看下面的实例，它将输出定义的变量地址：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span> <span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> var_runoob <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>              <span class="token comment">// 定义指针变量</span>    p <span class="token operator">=</span> <span class="token operator">&amp;</span>var_runoob<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"var_runoob 变量的地址： %p\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">var_runoob 变量的地址： 0x7ffeeaae08d8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/614-C语言-菜鸟教程/c-pointer.png" alt=""></p><p>通过上面的实例，我们了解了什么是内存地址以及如何访问它。接下来让我们看看什么是指针。</p><h2 id="什么是指针？"><a href="#什么是指针？" class="headerlink" title="什么是指针？"></a>什么是指针？</h2><p>指针也就是内存地址，指针变量是用来存放内存地址的变量。就像其他变量或常量一样，您必须在使用指针存储其他变量地址之前，对其进行声明。指针变量声明的一般形式为：</p><pre class="line-numbers language-none"><code class="language-none">type *var_name;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在这里，<strong>type</strong> 是指针的基类型，它必须是一个有效的 C 数据类型，<strong>var_name</strong> 是指针变量的名称。用来声明指针的星号 <strong>*</strong> 与乘法中使用的星号是相同的。但是，在这个语句中，星号是用来指定一个变量是指针。以下是有效的指针声明：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span>    <span class="token operator">*</span>ip<span class="token punctuation">;</span>    <span class="token comment">/* 一个整型的指针 */</span><span class="token keyword">double</span> <span class="token operator">*</span>dp<span class="token punctuation">;</span>    <span class="token comment">/* 一个 double 型的指针 */</span><span class="token keyword">float</span>  <span class="token operator">*</span>fp<span class="token punctuation">;</span>    <span class="token comment">/* 一个浮点型的指针 */</span><span class="token keyword">char</span>   <span class="token operator">*</span>ch<span class="token punctuation">;</span>    <span class="token comment">/* 一个字符型的指针 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>所有实际数据类型，不管是整型、浮点型、字符型，还是其他的数据类型，对应指针的值的类型都是一样的，都是一个代表内存地址的长的十六进制数。</p><p>不同数据类型的指针之间唯一的不同是，指针所指向的变量或常量的数据类型不同。</p><h2 id="如何使用指针？"><a href="#如何使用指针？" class="headerlink" title="如何使用指针？"></a>如何使用指针？</h2><p>使用指针时会频繁进行以下几个操作：定义一个指针变量、把变量地址赋值给指针、访问指针变量中可用地址的值。这些是通过使用一元运算符 <strong>*</strong> 来返回位于操作数所指定地址的变量的值。下面的实例涉及到了这些操作：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span> <span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">int</span>  var <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>   <span class="token comment">/* 实际变量的声明 */</span>   <span class="token keyword">int</span>  <span class="token operator">*</span>ip<span class="token punctuation">;</span>        <span class="token comment">/* 指针变量的声明 */</span>    ip <span class="token operator">=</span> <span class="token operator">&amp;</span>var<span class="token punctuation">;</span>  <span class="token comment">/* 在指针变量中存储 var 的地址 */</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"var 变量的地址: %p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>var  <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* 在指针变量中存储的地址 */</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ip 变量存储的地址: %p\n"</span><span class="token punctuation">,</span> ip <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* 使用指针访问值 */</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*ip 变量的值: %d\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>ip <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">var 变量的地址: 0x7ffeeef168d8<span class="token function">ip</span> 变量存储的地址: 0x7ffeeef168d8*ip 变量的值: <span class="token number">20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="C-中的-NULL-指针"><a href="#C-中的-NULL-指针" class="headerlink" title="C 中的 NULL 指针"></a>C 中的 NULL 指针</h2><p>在变量声明的时候，如果没有确切的地址可以赋值，为指针变量赋一个 NULL 值是一个良好的编程习惯。赋为 NULL 值的指针被称为<strong>空</strong>指针。</p><p>NULL 指针是一个定义在标准库中的值为零的常量。请看下面的程序：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span> <span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">int</span>  <span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ptr 的地址是 %p\n"</span><span class="token punctuation">,</span> ptr  <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ptr 的地址是 0x0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在大多数的操作系统上，程序不允许访问地址为 0 的内存，因为该内存是操作系统保留的。然而，内存地址 0 有特别重要的意义，它表明该指针不指向一个可访问的内存位置。但按照惯例，如果指针包含空值（零值），则假定它不指向任何东西。</p><p>如需检查一个空指针，您可以使用 if 语句，如下所示：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span>     <span class="token comment">/* 如果 p 非空，则完成 */</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ptr<span class="token punctuation">)</span>    <span class="token comment">/* 如果 p 为空，则完成 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="C-指针详解"><a href="#C-指针详解" class="headerlink" title="C 指针详解"></a>C 指针详解</h2><p>在 C 中，有很多指针相关的概念，这些概念都很简单，但是都很重要。下面列出了 C 程序员必须清楚的一些与指针相关的重要概念：</p><div class="table-container"><table><thead><tr><th style="text-align:left">概念</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://www.runoob.com/cprogramming/c-pointer-arithmetic.html">指针的算术运算</a></td><td style="text-align:left">可以对指针进行四种算术运算：++、—、+、-</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/cprogramming/c-array-of-pointers.html">指针数组</a></td><td style="text-align:left">可以定义用来存储指针的数组。</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/cprogramming/c-pointer-to-pointer.html">指向指针的指针</a></td><td style="text-align:left">C 允许指向指针的指针。</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/cprogramming/c-passing-pointers-to-functions.html">传递指针给函数</a></td><td style="text-align:left">通过引用或地址传递参数，使传递的参数在调用函数中被改变。</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/cprogramming/c-return-pointer-from-functions.html">从函数返回指针</a></td><td style="text-align:left">C 允许函数返回指针到局部变量、静态变量和动态内存分配。</td></tr></tbody></table></div><h2 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h2><p>函数指针是指向函数的指针变量。</p><p>通常我们说的指针变量是指向一个整型、字符型或数组等变量，而函数指针是指向函数。</p><p>函数指针可以像一般函数一样，用于调用函数、传递参数。</p><p>函数指针变量的声明：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>fun_ptr<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 声明一个指向同样参数、返回值的函数指针类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h3><p>以下实例声明了函数指针变量 p，指向函数 max</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span> <span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">&gt;</span> y <span class="token operator">?</span> x <span class="token operator">:</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">/* p 是函数指针 */</span>    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span> max<span class="token punctuation">;</span> <span class="token comment">// &amp;可以省略</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入三个数字:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token operator">&amp;</span> b<span class="token punctuation">,</span> <span class="token operator">&amp;</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">/* 与直接调用函数等价，d = max(max(a, b), c) */</span>    d <span class="token operator">=</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token function">p</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"最大的数字是: %d\n"</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译执行，输出结果如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">请输入三个数字:1 <span class="token number">2</span> <span class="token number">3</span>最大的数字是: <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><h3 id="函数指针作为某个函数的参数"><a href="#函数指针作为某个函数的参数" class="headerlink" title="函数指针作为某个函数的参数"></a>函数指针作为某个函数的参数</h3><p>函数指针变量可以作为某个函数的参数来使用的，回调函数就是一个通过函数指针调用的函数。</p><p>简单讲：回调函数是由别人的函数执行时调用你实现的函数。</p><blockquote><p>以下是来自知乎作者常溪玲的解说：</p><p>你到一个商店买东西，刚好你要的东西没有货，于是你在店员那里留下了你的电话，过了几天店里有货了，店员就打了你的电话，然后你接到电话后就到店里去取了货。在这个例子里，你的电话号码就叫回调函数，你把电话留给店员就叫登记回调函数，店里后来有货了叫做触发了回调关联的事件，店员给你打电话叫做调用回调函数，你到店里去取货叫做响应回调事件。</p></blockquote><h3 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h3><p>实例中 populate_array 函数定义了三个参数，其中第三个参数是函数的指针，通过该函数来设置数组的值。</p><p>实例中我们定义了回调函数 getNextRandomValue，它返回一个随机值，它作为一个函数指针传递给 populate_array 函数。</p><p>populate_array 将调用 10 次回调函数，并将回调函数的返回值赋值给数组。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span>  </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span> <span class="token comment">// 回调函数</span><span class="token keyword">void</span> <span class="token function">populate_array</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>array<span class="token punctuation">,</span> <span class="token class-name">size_t</span> arraySize<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>getNextValue<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arraySize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">getNextValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment">// 获取随机值</span><span class="token keyword">int</span> <span class="token function">getNextRandomValue</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> myarray<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">/* getNextRandomValue 不能加括号，否则无法编译，因为加上括号之后相当于传入此参数时传入了 int , 而不是函数指针*/</span>    <span class="token function">populate_array</span><span class="token punctuation">(</span>myarray<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> getNextRandomValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> myarray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译执行，输出结果如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">16807</span> <span class="token number">282475249</span> <span class="token number">1622650073</span> <span class="token number">984943658</span> <span class="token number">1144108930</span> <span class="token number">470211272</span> <span class="token number">101027544</span> <span class="token number">1457850878</span> <span class="token number">1458777923</span> <span class="token number">2007237709</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="C-结构体"><a href="#C-结构体" class="headerlink" title="C 结构体"></a>C 结构体</h1><p>C 数组允许定义可存储相同类型数据项的变量，<strong>结构</strong>是 C 编程中另一种用户自定义的可用的数据类型，它允许您存储不同类型的数据项。</p><p>结构用于表示一条记录，假设您想要跟踪图书馆中书本的动态，您可能需要跟踪每本书的下列属性：</p><ul><li>Title</li><li>Author</li><li>Subject</li><li>Book ID</li></ul><h2 id="定义结构"><a href="#定义结构" class="headerlink" title="定义结构"></a>定义结构</h2><p>为了定义结构，您必须使用 <strong>struct</strong> 语句。struct 语句定义了一个包含多个成员的新的数据类型，struct 语句的格式如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">tag</span> <span class="token punctuation">{</span>     member<span class="token operator">-</span>list    member<span class="token operator">-</span>list     member<span class="token operator">-</span>list      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> variable<span class="token operator">-</span>list <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>tag</strong> 是结构体标签。</p><p><strong>member-list</strong> 是标准的变量定义，比如 int i; 或者 float f，或者其他有效的变量定义。</p><p><strong>variable-list</strong> 结构变量，定义在结构的末尾，最后一个分号之前，您可以指定一个或多个结构变量。下面是声明 Book 结构的方式：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">Books</span><span class="token punctuation">{</span>   <span class="token keyword">char</span>  title<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">char</span>  author<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">char</span>  subject<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">int</span>   book_id<span class="token punctuation">;</span><span class="token punctuation">}</span> book<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在一般情况下，<strong>tag、member-list、variable-list</strong> 这 3 部分至少要出现 2 个。以下为实例：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//此声明声明了拥有3个成员的结构体，分别为整型的a，字符型的b和双精度的c</span><span class="token comment">//同时又声明了结构体变量s1</span><span class="token comment">//这个结构体并没有标明其标签</span><span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token keyword">char</span> b<span class="token punctuation">;</span>    <span class="token keyword">double</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span> s1<span class="token punctuation">;</span> <span class="token comment">//此声明声明了拥有3个成员的结构体，分别为整型的a，字符型的b和双精度的c</span><span class="token comment">//结构体的标签被命名为SIMPLE,没有声明变量</span><span class="token keyword">struct</span> <span class="token class-name">SIMPLE</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token keyword">char</span> b<span class="token punctuation">;</span>    <span class="token keyword">double</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//用SIMPLE标签的结构体，另外声明了变量t1、t2、t3</span><span class="token keyword">struct</span> <span class="token class-name">SIMPLE</span> t1<span class="token punctuation">,</span> t2<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>t3<span class="token punctuation">;</span> <span class="token comment">//也可以用typedef创建新类型</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token keyword">char</span> b<span class="token punctuation">;</span>    <span class="token keyword">double</span> c<span class="token punctuation">;</span> <span class="token punctuation">}</span> Simple2<span class="token punctuation">;</span><span class="token comment">//现在可以用Simple2作为类型声明新的结构体变量</span>Simple2 u1<span class="token punctuation">,</span> u2<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>u3<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的声明中，第一个和第二声明被编译器当作两个完全不同的类型，即使他们的成员列表是一样的，如果令 t3=&amp;s1，则是非法的。</p><p>结构体的成员可以包含其他结构体，也可以包含指向自己结构体类型的指针，而通常这种指针的应用是为了实现一些更高级的数据结构如链表和树等。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//此结构体的声明包含了其他的结构体</span><span class="token keyword">struct</span> <span class="token class-name">COMPLEX</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> string<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">SIMPLE</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">//此结构体的声明包含了指向自己类型的指针</span><span class="token keyword">struct</span> <span class="token class-name">NODE</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> string<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">NODE</span> <span class="token operator">*</span>next_node<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果两个结构体互相包含，则需要对其中一个结构体进行不完整声明，如下所示：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">B</span><span class="token punctuation">;</span>    <span class="token comment">//对结构体B进行不完整声明</span> <span class="token comment">//结构体A中包含指向结构体B的指针</span><span class="token keyword">struct</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> <span class="token class-name">B</span> <span class="token operator">*</span>partner<span class="token punctuation">;</span>    <span class="token comment">//other members;</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">//结构体B中包含指向结构体A的指针，在A声明完后，B也随之进行声明</span><span class="token keyword">struct</span> <span class="token class-name">B</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> <span class="token class-name">A</span> <span class="token operator">*</span>partner<span class="token punctuation">;</span>    <span class="token comment">//other members;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="结构体变量的初始化"><a href="#结构体变量的初始化" class="headerlink" title="结构体变量的初始化"></a>结构体变量的初始化</h2><p>和其它类型变量一样，对结构体变量可以在定义时指定初始值。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span> <span class="token keyword">struct</span> <span class="token class-name">Books</span><span class="token punctuation">{</span>   <span class="token keyword">char</span>  title<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">char</span>  author<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">char</span>  subject<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">int</span>   book_id<span class="token punctuation">;</span><span class="token punctuation">}</span> book <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"C 语言"</span><span class="token punctuation">,</span> <span class="token string">"RUNOOB"</span><span class="token punctuation">,</span> <span class="token string">"编程语言"</span><span class="token punctuation">,</span> <span class="token number">123456</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"title : %s\nauthor: %s\nsubject: %s\nbook_id: %d\n"</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span>title<span class="token punctuation">,</span> book<span class="token punctuation">.</span>author<span class="token punctuation">,</span> book<span class="token punctuation">.</span>subject<span class="token punctuation">,</span> book<span class="token punctuation">.</span>book_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行输出结果为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">title <span class="token builtin class-name">:</span> C 语言author: RUNOOBsubject: 编程语言book_id: <span class="token number">123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="访问结构成员"><a href="#访问结构成员" class="headerlink" title="访问结构成员"></a>访问结构成员</h2><p>为了访问结构的成员，我们使用<strong>成员访问运算符（.）</strong>。成员访问运算符是结构变量名称和我们要访问的结构成员之间的一个句号。您可以使用 <strong>struct</strong> 关键字来定义结构类型的变量。下面的实例演示了结构的用法：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span> <span class="token keyword">struct</span> <span class="token class-name">Books</span><span class="token punctuation">{</span>   <span class="token keyword">char</span>  title<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">char</span>  author<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">char</span>  subject<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">int</span>   book_id<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">struct</span> <span class="token class-name">Books</span> Book1<span class="token punctuation">;</span>        <span class="token comment">/* 声明 Book1，类型为 Books */</span>   <span class="token keyword">struct</span> <span class="token class-name">Books</span> Book2<span class="token punctuation">;</span>        <span class="token comment">/* 声明 Book2，类型为 Books */</span>    <span class="token comment">/* Book1 详述 */</span>   <span class="token function">strcpy</span><span class="token punctuation">(</span> Book1<span class="token punctuation">.</span>title<span class="token punctuation">,</span> <span class="token string">"C Programming"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">strcpy</span><span class="token punctuation">(</span> Book1<span class="token punctuation">.</span>author<span class="token punctuation">,</span> <span class="token string">"Nuha Ali"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span> Book1<span class="token punctuation">.</span>subject<span class="token punctuation">,</span> <span class="token string">"C Programming Tutorial"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   Book1<span class="token punctuation">.</span>book_id <span class="token operator">=</span> <span class="token number">6495407</span><span class="token punctuation">;</span>    <span class="token comment">/* Book2 详述 */</span>   <span class="token function">strcpy</span><span class="token punctuation">(</span> Book2<span class="token punctuation">.</span>title<span class="token punctuation">,</span> <span class="token string">"Telecom Billing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">strcpy</span><span class="token punctuation">(</span> Book2<span class="token punctuation">.</span>author<span class="token punctuation">,</span> <span class="token string">"Zara Ali"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">strcpy</span><span class="token punctuation">(</span> Book2<span class="token punctuation">.</span>subject<span class="token punctuation">,</span> <span class="token string">"Telecom Billing Tutorial"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   Book2<span class="token punctuation">.</span>book_id <span class="token operator">=</span> <span class="token number">6495700</span><span class="token punctuation">;</span>    <span class="token comment">/* 输出 Book1 信息 */</span>   <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"Book 1 title : %s\n"</span><span class="token punctuation">,</span> Book1<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"Book 1 author : %s\n"</span><span class="token punctuation">,</span> Book1<span class="token punctuation">.</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"Book 1 subject : %s\n"</span><span class="token punctuation">,</span> Book1<span class="token punctuation">.</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"Book 1 book_id : %d\n"</span><span class="token punctuation">,</span> Book1<span class="token punctuation">.</span>book_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* 输出 Book2 信息 */</span>   <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"Book 2 title : %s\n"</span><span class="token punctuation">,</span> Book2<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"Book 2 author : %s\n"</span><span class="token punctuation">,</span> Book2<span class="token punctuation">.</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"Book 2 subject : %s\n"</span><span class="token punctuation">,</span> Book2<span class="token punctuation">.</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"Book 2 book_id : %d\n"</span><span class="token punctuation">,</span> Book2<span class="token punctuation">.</span>book_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>当上面的代码被编译和执行时，它会产生下列结果：Book <span class="token number">1</span> title <span class="token operator">:</span> C ProgrammingBook <span class="token number">1</span> author <span class="token operator">:</span> Nuha AliBook <span class="token number">1</span> subject <span class="token operator">:</span> C Programming TutorialBook <span class="token number">1</span> book_id <span class="token operator">:</span> <span class="token number">6495407</span>Book <span class="token number">2</span> title <span class="token operator">:</span> Telecom BillingBook <span class="token number">2</span> author <span class="token operator">:</span> Zara AliBook <span class="token number">2</span> subject <span class="token operator">:</span> Telecom Billing TutorialBook <span class="token number">2</span> book_id <span class="token operator">:</span> <span class="token number">6495700</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Book <span class="token number">1</span> title <span class="token builtin class-name">:</span> C ProgrammingBook <span class="token number">1</span> author <span class="token builtin class-name">:</span> Nuha AliBook <span class="token number">1</span> subject <span class="token builtin class-name">:</span> C Programming TutorialBook <span class="token number">1</span> book_id <span class="token builtin class-name">:</span> <span class="token number">6495407</span>Book <span class="token number">2</span> title <span class="token builtin class-name">:</span> Telecom BillingBook <span class="token number">2</span> author <span class="token builtin class-name">:</span> Zara AliBook <span class="token number">2</span> subject <span class="token builtin class-name">:</span> Telecom Billing TutorialBook <span class="token number">2</span> book_id <span class="token builtin class-name">:</span> <span class="token number">6495700</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="结构作为函数参数"><a href="#结构作为函数参数" class="headerlink" title="结构作为函数参数"></a>结构作为函数参数</h2><p>您可以把结构作为函数参数，传参方式与其他类型的变量或指针类似。您可以使用上面实例中的方式来访问结构变量：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span> <span class="token keyword">struct</span> <span class="token class-name">Books</span><span class="token punctuation">{</span>   <span class="token keyword">char</span>  title<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">char</span>  author<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">char</span>  subject<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">int</span>   book_id<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">/* 函数声明 */</span><span class="token keyword">void</span> <span class="token function">printBook</span><span class="token punctuation">(</span> <span class="token keyword">struct</span> <span class="token class-name">Books</span> book <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">struct</span> <span class="token class-name">Books</span> Book1<span class="token punctuation">;</span>        <span class="token comment">/* 声明 Book1，类型为 Books */</span>   <span class="token keyword">struct</span> <span class="token class-name">Books</span> Book2<span class="token punctuation">;</span>        <span class="token comment">/* 声明 Book2，类型为 Books */</span>    <span class="token comment">/* Book1 详述 */</span>   <span class="token function">strcpy</span><span class="token punctuation">(</span> Book1<span class="token punctuation">.</span>title<span class="token punctuation">,</span> <span class="token string">"C Programming"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">strcpy</span><span class="token punctuation">(</span> Book1<span class="token punctuation">.</span>author<span class="token punctuation">,</span> <span class="token string">"Nuha Ali"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span> Book1<span class="token punctuation">.</span>subject<span class="token punctuation">,</span> <span class="token string">"C Programming Tutorial"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   Book1<span class="token punctuation">.</span>book_id <span class="token operator">=</span> <span class="token number">6495407</span><span class="token punctuation">;</span>    <span class="token comment">/* Book2 详述 */</span>   <span class="token function">strcpy</span><span class="token punctuation">(</span> Book2<span class="token punctuation">.</span>title<span class="token punctuation">,</span> <span class="token string">"Telecom Billing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">strcpy</span><span class="token punctuation">(</span> Book2<span class="token punctuation">.</span>author<span class="token punctuation">,</span> <span class="token string">"Zara Ali"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">strcpy</span><span class="token punctuation">(</span> Book2<span class="token punctuation">.</span>subject<span class="token punctuation">,</span> <span class="token string">"Telecom Billing Tutorial"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   Book2<span class="token punctuation">.</span>book_id <span class="token operator">=</span> <span class="token number">6495700</span><span class="token punctuation">;</span>    <span class="token comment">/* 输出 Book1 信息 */</span>   <span class="token function">printBook</span><span class="token punctuation">(</span> Book1 <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* 输出 Book2 信息 */</span>   <span class="token function">printBook</span><span class="token punctuation">(</span> Book2 <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">printBook</span><span class="token punctuation">(</span> <span class="token keyword">struct</span> <span class="token class-name">Books</span> book <span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"Book title : %s\n"</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"Book author : %s\n"</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"Book subject : %s\n"</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"Book book_id : %d\n"</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span>book_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Book title <span class="token builtin class-name">:</span> C ProgrammingBook author <span class="token builtin class-name">:</span> Nuha AliBook subject <span class="token builtin class-name">:</span> C Programming TutorialBook book_id <span class="token builtin class-name">:</span> <span class="token number">6495407</span>Book title <span class="token builtin class-name">:</span> Telecom BillingBook author <span class="token builtin class-name">:</span> Zara AliBook subject <span class="token builtin class-name">:</span> Telecom Billing TutorialBook book_id <span class="token builtin class-name">:</span> <span class="token number">6495700</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="指向结构的指针"><a href="#指向结构的指针" class="headerlink" title="指向结构的指针"></a>指向结构的指针</h2><p>您可以定义指向结构的指针，方式与定义指向其他类型变量的指针相似，如下所示：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">Books</span> <span class="token operator">*</span>struct_pointer<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在，您可以在上述定义的指针变量中存储结构变量的地址。为了查找结构变量的地址，请把 &amp; 运算符放在结构名称的前面，如下所示：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">struct_pointer <span class="token operator">=</span> <span class="token operator">&amp;</span>Book1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为了使用指向该结构的指针访问结构的成员，您必须使用 -&gt; 运算符，如下所示：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">struct_pointer<span class="token operator">-&gt;</span>title<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>让我们使用结构指针来重写上面的实例，这将有助于您理解结构指针的概念：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span> <span class="token keyword">struct</span> <span class="token class-name">Books</span><span class="token punctuation">{</span>   <span class="token keyword">char</span>  title<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">char</span>  author<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">char</span>  subject<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">int</span>   book_id<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">/* 函数声明 */</span><span class="token keyword">void</span> <span class="token function">printBook</span><span class="token punctuation">(</span> <span class="token keyword">struct</span> <span class="token class-name">Books</span> <span class="token operator">*</span>book <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">struct</span> <span class="token class-name">Books</span> Book1<span class="token punctuation">;</span>        <span class="token comment">/* 声明 Book1，类型为 Books */</span>   <span class="token keyword">struct</span> <span class="token class-name">Books</span> Book2<span class="token punctuation">;</span>        <span class="token comment">/* 声明 Book2，类型为 Books */</span>    <span class="token comment">/* Book1 详述 */</span>   <span class="token function">strcpy</span><span class="token punctuation">(</span> Book1<span class="token punctuation">.</span>title<span class="token punctuation">,</span> <span class="token string">"C Programming"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">strcpy</span><span class="token punctuation">(</span> Book1<span class="token punctuation">.</span>author<span class="token punctuation">,</span> <span class="token string">"Nuha Ali"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span> Book1<span class="token punctuation">.</span>subject<span class="token punctuation">,</span> <span class="token string">"C Programming Tutorial"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   Book1<span class="token punctuation">.</span>book_id <span class="token operator">=</span> <span class="token number">6495407</span><span class="token punctuation">;</span>    <span class="token comment">/* Book2 详述 */</span>   <span class="token function">strcpy</span><span class="token punctuation">(</span> Book2<span class="token punctuation">.</span>title<span class="token punctuation">,</span> <span class="token string">"Telecom Billing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">strcpy</span><span class="token punctuation">(</span> Book2<span class="token punctuation">.</span>author<span class="token punctuation">,</span> <span class="token string">"Zara Ali"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">strcpy</span><span class="token punctuation">(</span> Book2<span class="token punctuation">.</span>subject<span class="token punctuation">,</span> <span class="token string">"Telecom Billing Tutorial"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   Book2<span class="token punctuation">.</span>book_id <span class="token operator">=</span> <span class="token number">6495700</span><span class="token punctuation">;</span>    <span class="token comment">/* 通过传 Book1 的地址来输出 Book1 信息 */</span>   <span class="token function">printBook</span><span class="token punctuation">(</span> <span class="token operator">&amp;</span>Book1 <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* 通过传 Book2 的地址来输出 Book2 信息 */</span>   <span class="token function">printBook</span><span class="token punctuation">(</span> <span class="token operator">&amp;</span>Book2 <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">printBook</span><span class="token punctuation">(</span> <span class="token keyword">struct</span> <span class="token class-name">Books</span> <span class="token operator">*</span>book <span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"Book title : %s\n"</span><span class="token punctuation">,</span> book<span class="token operator">-&gt;</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"Book author : %s\n"</span><span class="token punctuation">,</span> book<span class="token operator">-&gt;</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"Book subject : %s\n"</span><span class="token punctuation">,</span> book<span class="token operator">-&gt;</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"Book book_id : %d\n"</span><span class="token punctuation">,</span> book<span class="token operator">-&gt;</span>book_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Book title <span class="token builtin class-name">:</span> C ProgrammingBook author <span class="token builtin class-name">:</span> Nuha AliBook subject <span class="token builtin class-name">:</span> C Programming TutorialBook book_id <span class="token builtin class-name">:</span> <span class="token number">6495407</span>Book title <span class="token builtin class-name">:</span> Telecom BillingBook author <span class="token builtin class-name">:</span> Zara AliBook subject <span class="token builtin class-name">:</span> Telecom Billing TutorialBook book_id <span class="token builtin class-name">:</span> <span class="token number">6495700</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="C-共用体"><a href="#C-共用体" class="headerlink" title="C 共用体"></a>C 共用体</h1><p><strong>共用体</strong>是一种特殊的数据类型，允许您在相同的内存位置存储不同的数据类型。您可以定义一个带有多成员的共用体，但是任何时候只能有一个成员带有值。共用体提供了一种使用相同的内存位置的有效方式。</p><h2 id="定义共用体"><a href="#定义共用体" class="headerlink" title="定义共用体"></a>定义共用体</h2><p>为了定义共用体，您必须使用 <strong>union</strong> 语句，方式与定义结构类似。union 语句定义了一个新的数据类型，带有多个成员。union 语句的格式如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">union</span> <span class="token punctuation">[</span><span class="token keyword">union</span> tag<span class="token punctuation">]</span><span class="token punctuation">{</span>   member definition<span class="token punctuation">;</span>   member definition<span class="token punctuation">;</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>   member definition<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token punctuation">[</span>one or more <span class="token keyword">union</span> variables<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>union tag</strong> 是可选的，每个 member definition 是标准的变量定义，比如 int i; 或者 float f; 或者其他有效的变量定义。在共用体定义的末尾，最后一个分号之前，您可以指定一个或多个共用体变量，这是可选的。下面定义一个名为 Data 的共用体类型，有三个成员 i、f 和 str：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">union</span> Data<span class="token punctuation">{</span>   <span class="token keyword">int</span> i<span class="token punctuation">;</span>   <span class="token keyword">float</span> f<span class="token punctuation">;</span>   <span class="token keyword">char</span>  str<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span> data<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在，<strong>Data</strong> 类型的变量可以存储一个整数、一个浮点数，或者一个字符串。这意味着一个变量（相同的内存位置）可以存储多个多种类型的数据。您可以根据需要在一个共用体内使用任何内置的或者用户自定义的数据类型。</p><p>共用体占用的内存应足够存储共用体中最大的成员。例如，在上面的实例中，Data 将占用 20 个字节的内存空间，因为在各个成员中，字符串所占用的空间是最大的。下面的实例将显示上面的共用体占用的总内存大小：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span> <span class="token keyword">union</span> Data<span class="token punctuation">{</span>   <span class="token keyword">int</span> i<span class="token punctuation">;</span>   <span class="token keyword">float</span> f<span class="token punctuation">;</span>   <span class="token keyword">char</span>  str<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">union</span> Data data<span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"Memory size occupied by data : %d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Memory size occupied by data <span class="token builtin class-name">:</span> <span class="token number">20</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="访问共用体成员"><a href="#访问共用体成员" class="headerlink" title="访问共用体成员"></a>访问共用体成员</h2><p>为了访问共用体的成员，我们使用<strong>成员访问运算符（.）</strong>。成员访问运算符是共用体变量名称和我们要访问的共用体成员之间的一个句号。您可以使用 <strong>union</strong> 关键字来定义共用体类型的变量。下面的实例演示了共用体的用法：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span> <span class="token keyword">union</span> Data<span class="token punctuation">{</span>   <span class="token keyword">int</span> i<span class="token punctuation">;</span>   <span class="token keyword">float</span> f<span class="token punctuation">;</span>   <span class="token keyword">char</span>  str<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">union</span> Data data<span class="token punctuation">;</span>            data<span class="token punctuation">.</span>i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>   data<span class="token punctuation">.</span>f <span class="token operator">=</span> <span class="token number">220.5</span><span class="token punctuation">;</span>   <span class="token function">strcpy</span><span class="token punctuation">(</span> data<span class="token punctuation">.</span>str<span class="token punctuation">,</span> <span class="token string">"C Programming"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"data.i : %d\n"</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"data.f : %f\n"</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"data.str : %s\n"</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">data.i <span class="token builtin class-name">:</span> <span class="token number">1917853763</span>data.f <span class="token builtin class-name">:</span> <span class="token number">4122360580327794860452759994368.000000</span>data.str <span class="token builtin class-name">:</span> C Programming<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在这里，我们可以看到共用体的 <strong>i</strong> 和 <strong>f</strong> 成员的值有损坏，因为最后赋给变量的值占用了内存位置，这也是 <strong>str</strong> 成员能够完好输出的原因。现在让我们再来看一个相同的实例，这次我们在同一时间只使用一个变量，这也演示了使用共用体的主要目的：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span> <span class="token keyword">union</span> Data<span class="token punctuation">{</span>   <span class="token keyword">int</span> i<span class="token punctuation">;</span>   <span class="token keyword">float</span> f<span class="token punctuation">;</span>   <span class="token keyword">char</span>  str<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">union</span> Data data<span class="token punctuation">;</span>            data<span class="token punctuation">.</span>i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"data.i : %d\n"</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      data<span class="token punctuation">.</span>f <span class="token operator">=</span> <span class="token number">220.5</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"data.f : %f\n"</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">strcpy</span><span class="token punctuation">(</span> data<span class="token punctuation">.</span>str<span class="token punctuation">,</span> <span class="token string">"C Programming"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"data.str : %s\n"</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">data.i <span class="token builtin class-name">:</span> <span class="token number">10</span>data.f <span class="token builtin class-name">:</span> <span class="token number">220.500000</span>data.str <span class="token builtin class-name">:</span> C Programming<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在这里，所有的成员都能完好输出，因为同一时间只用到一个成员。</p><h1 id="C-位域"><a href="#C-位域" class="headerlink" title="C 位域"></a>C 位域</h1><p>如果程序的结构中包含多个开关量，只有 <strong>TRUE/FALSE</strong> 变量，如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span><span class="token punctuation">{</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> widthValidated<span class="token punctuation">;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> heightValidated<span class="token punctuation">;</span><span class="token punctuation">}</span> status<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种结构需要 8 字节的内存空间，但在实际上，在每个变量中，我们只存储 0 或 1。在这种情况下，C 语言提供了一种更好的利用内存空间的方式。如果您在结构内使用这样的变量，您可以定义变量的宽度来告诉编译器，您将只使用这些字节。例如，上面的结构可以重写成：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span><span class="token punctuation">{</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> widthValidated <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> heightValidated <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span> status<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在，上面的结构中，status 变量将占用 4 个字节的内存空间，但是只有 2 位被用来存储值。如果您用了 32 个变量，每一个变量宽度为 1 位，那么 status 结构将使用 4 个字节，但只要您再多用一个变量，如果使用了 33 个变量，那么它将分配内存的下一段来存储第 33 个变量，这个时候就开始使用 8 个字节。让我们看看下面的实例来理解这个概念：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span> <span class="token comment">/* 定义简单的结构 */</span><span class="token keyword">struct</span><span class="token punctuation">{</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> widthValidated<span class="token punctuation">;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> heightValidated<span class="token punctuation">;</span><span class="token punctuation">}</span> status1<span class="token punctuation">;</span> <span class="token comment">/* 定义位域结构 */</span><span class="token keyword">struct</span><span class="token punctuation">{</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> widthValidated <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> heightValidated <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span> status2<span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"Memory size occupied by status1 : %d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>status1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"Memory size occupied by status2 : %d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>status2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Memory size occupied by status1 <span class="token builtin class-name">:</span> <span class="token number">8</span>Memory size occupied by status2 <span class="token builtin class-name">:</span> <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="位域声明"><a href="#位域声明" class="headerlink" title="位域声明"></a>位域声明</h2><p>有些信息在存储时，并不需要占用一个完整的字节，而只需占几个或一个二进制位。例如在存放一个开关量时，只有 0 和 1 两种状态，用 1 位二进位即可。为了节省存储空间，并使处理简便，C 语言又提供了一种数据结构，称为”位域”或”位段”。</p><p>所谓”位域”是把一个字节中的二进位划分为几个不同的区域，并说明每个区域的位数。每个域有一个域名，允许在程序中按域名进行操作。这样就可以把几个不同的对象用一个字节的二进制位域来表示。</p><p>典型的实例：</p><ul><li>用 1 位二进位存放一个开关量时，只有 0 和 1 两种状态。</li><li>读取外部文件格式——可以读取非标准的文件格式。例如：9 位的整数。</li></ul><h3 id="位域的定义和位域变量的说明"><a href="#位域的定义和位域变量的说明" class="headerlink" title="位域的定义和位域变量的说明"></a>位域的定义和位域变量的说明</h3><p>位域定义与结构定义相仿，其形式为：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> 位域结构名 <span class="token punctuation">{</span> 位域列表<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中位域列表的形式为：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">type <span class="token punctuation">[</span>member_name<span class="token punctuation">]</span> <span class="token operator">:</span> width <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下面是有关位域中变量元素的描述：</p><div class="table-container"><table><thead><tr><th style="text-align:left">元素</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">type</td><td style="text-align:left">只能为 int(整型)，unsigned int(无符号整型)，signed int(有符号整型) 三种类型，决定了如何解释位域的值。</td></tr><tr><td style="text-align:left">member_name</td><td style="text-align:left">位域的名称。</td></tr><tr><td style="text-align:left">width</td><td style="text-align:left">位域中位的数量。宽度必须小于或等于指定类型的位宽度。</td></tr></tbody></table></div><p>带有预定义宽度的变量被称为<strong>位域</strong>。位域可以存储多于 1 位的数，例如，需要一个变量来存储从 0 到 7 的值，您可以定义一个宽度为 3 位的位域，如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span><span class="token punctuation">{</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> age <span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span> Age<span class="token punctuation">;</span>c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上面的结构定义指示 C 编译器，age 变量将只使用 3 位来存储这个值，如果您试图使用超过 3 位，则无法完成。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">bs</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token operator">:</span><span class="token number">8</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c<span class="token operator">:</span><span class="token number">6</span><span class="token punctuation">;</span><span class="token punctuation">}</span>data<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>data 为 bs 变量，共占两个字节。其中位域 a 占 8 位，位域 b 占 2 位，位域 c 占 6 位。</p><p>让我们再来看一个实例：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">packed_struct</span> <span class="token punctuation">{</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> f1<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> f2<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> f3<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> f4<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> type<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> my_int<span class="token operator">:</span><span class="token number">9</span><span class="token punctuation">;</span><span class="token punctuation">}</span> pack<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里，packed_struct 包含了 6 个成员：四个 1 位的标识符 f1..f4、一个 4 位的 type 和一个 9 位的 my_int。</p><p>让我们来看下面的实例：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span> <span class="token keyword">struct</span><span class="token punctuation">{</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> age <span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span> Age<span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>   Age<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"Sizeof( Age ) : %d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Age<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"Age.age : %d\n"</span><span class="token punctuation">,</span> Age<span class="token punctuation">.</span>age <span class="token punctuation">)</span><span class="token punctuation">;</span>    Age<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"Age.age : %d\n"</span><span class="token punctuation">,</span> Age<span class="token punctuation">.</span>age <span class="token punctuation">)</span><span class="token punctuation">;</span>    Age<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token comment">// 二进制表示为 1000 有四位，超出</span>   <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"Age.age : %d\n"</span><span class="token punctuation">,</span> Age<span class="token punctuation">.</span>age <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译时，它会带有警告，当上面的代码被执行时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Sizeof<span class="token punctuation">(</span> Age <span class="token punctuation">)</span> <span class="token builtin class-name">:</span> <span class="token number">4</span>Age.age <span class="token builtin class-name">:</span> <span class="token number">4</span>Age.age <span class="token builtin class-name">:</span> <span class="token number">7</span>Age.age <span class="token builtin class-name">:</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>对于位域的定义尚有以下几点说明：</strong></p><ul><li><p>一个位域存储在同一个字节中，如一个字节所剩空间不够存放另一位域时，则会从下一单元起存放该位域。也可以有意使某位域从下一单元开始。例如：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">bs</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> a<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span>  <span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">;</span>    <span class="token comment">/* 空域 */</span>    <span class="token keyword">unsigned</span> b<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">;</span>    <span class="token comment">/* 从下一单元开始存放 */</span>    <span class="token keyword">unsigned</span> c<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个位域定义中，a 占第一字节的 4 位，后 4 位填 0 表示不使用，b 从第二字节开始，占用 4 位，c 占用 4 位。</p></li><li><p>位域的宽度不能超过它所依附的数据类型的长度，成员变量都是有类型的，这个类型限制了成员变量的最大长度，<strong>:</strong> 后面的数字不能超过这个长度。</p></li><li><p>位域可以是无名位域，这时它只用来作填充或调整位置。无名的位域是不能使用的。例如：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">k</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span>  <span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment">/* 该 2 位不能使用 */</span>    <span class="token keyword">int</span> b<span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>从以上分析可以看出，位域在本质上就是一种结构类型，不过其成员是按二进位分配的。</p><h3 id="位域的使用"><a href="#位域的使用" class="headerlink" title="位域的使用"></a>位域的使用</h3><p>位域的使用和结构成员的使用相同，其一般形式为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">位域变量名.位域名位域变量名-<span class="token operator">&gt;</span>位域名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>位域允许用各种格式输出。</p><p>请看下面的实例：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> <span class="token class-name">bs</span><span class="token punctuation">{</span>        <span class="token keyword">unsigned</span> a<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">unsigned</span> b<span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">unsigned</span> c<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> bit<span class="token punctuation">,</span><span class="token operator">*</span>pbit<span class="token punctuation">;</span>    bit<span class="token punctuation">.</span>a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">/* 给位域赋值（应注意赋值不能超过该位域的允许范围） */</span>    bit<span class="token punctuation">.</span>b<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">;</span>    <span class="token comment">/* 给位域赋值（应注意赋值不能超过该位域的允许范围） */</span>    bit<span class="token punctuation">.</span>c<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">;</span>    <span class="token comment">/* 给位域赋值（应注意赋值不能超过该位域的允许范围） */</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d,%d,%d\n"</span><span class="token punctuation">,</span>bit<span class="token punctuation">.</span>a<span class="token punctuation">,</span>bit<span class="token punctuation">.</span>b<span class="token punctuation">,</span>bit<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* 以整型量格式输出三个域的内容 */</span>    pbit<span class="token operator">=</span><span class="token operator">&amp;</span>bit<span class="token punctuation">;</span>    <span class="token comment">/* 把位域变量 bit 的地址送给指针变量 pbit */</span>    pbit<span class="token operator">-&gt;</span>a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">/* 用指针方式给位域 a 重新赋值，赋为 0 */</span>    pbit<span class="token operator">-&gt;</span>b<span class="token operator">&amp;=</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token comment">/* 使用了复合的位运算符 "&amp;="，相当于：pbit-&gt;b=pbit-&gt;b&amp;3，位域 b 中原有值为 7，与 3 作按位与运算的结果为 3（111&amp;011=011，十进制值为 3） */</span>    pbit<span class="token operator">-&gt;</span>c<span class="token operator">|=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">/* 使用了复合位运算符"|="，相当于：pbit-&gt;c=pbit-&gt;c|1，其结果为 15 */</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d,%d,%d\n"</span><span class="token punctuation">,</span>pbit<span class="token operator">-&gt;</span>a<span class="token punctuation">,</span>pbit<span class="token operator">-&gt;</span>b<span class="token punctuation">,</span>pbit<span class="token operator">-&gt;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* 用指针方式输出了这三个域的值 */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上例程序中定义了位域结构 bs，三个位域为 a、b、c。说明了 bs 类型的变量 bit 和指向 bs 类型的指针变量 pbit。这表示位域也是可以使用指针的。</p><h1 id="C-typedef"><a href="#C-typedef" class="headerlink" title="C typedef"></a>C typedef</h1><p>C 语言提供了 <strong>typedef</strong> 关键字，您可以使用它来为类型取一个新的名字。下面的实例为单字节数字定义了一个术语 <strong>BYTE</strong>：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> BYTE<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在这个类型定义之后，标识符 BYTE 可作为类型 <strong>unsigned char</strong> 的缩写，例如：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">BYTE  b1<span class="token punctuation">,</span> b2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>按照惯例，定义时会大写字母，以便提醒用户类型名称是一个象征性的缩写，但您也可以使用小写字母，如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> byte<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>您也可以使用 <strong>typedef</strong> 来为用户自定义的数据类型取一个新的名字。例如，您可以对结构体使用 typedef 来定义一个新的数据类型名字，然后使用这个新的数据类型来直接定义结构变量，如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span> <span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Books</span><span class="token punctuation">{</span>   <span class="token keyword">char</span>  title<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">char</span>  author<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">char</span>  subject<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">int</span>   book_id<span class="token punctuation">;</span><span class="token punctuation">}</span> Book<span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>   Book book<span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span> book<span class="token punctuation">.</span>title<span class="token punctuation">,</span> <span class="token string">"C 教程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">strcpy</span><span class="token punctuation">(</span> book<span class="token punctuation">.</span>author<span class="token punctuation">,</span> <span class="token string">"Runoob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span> book<span class="token punctuation">.</span>subject<span class="token punctuation">,</span> <span class="token string">"编程语言"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   book<span class="token punctuation">.</span>book_id <span class="token operator">=</span> <span class="token number">12345</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"书标题 : %s\n"</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"书作者 : %s\n"</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"书类目 : %s\n"</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"书 ID : %d\n"</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span>book_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">书标题 <span class="token builtin class-name">:</span> C 教程书作者 <span class="token builtin class-name">:</span> Runoob书类目 <span class="token builtin class-name">:</span> 编程语言书 ID <span class="token builtin class-name">:</span> <span class="token number">12345</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="typedef-vs-define"><a href="#typedef-vs-define" class="headerlink" title="typedef vs #define"></a>typedef vs #define</h2><p><strong>#define</strong> 是 C 指令，用于为各种数据类型定义别名，与 <strong>typedef</strong> 类似，但是它们有以下几点不同：</p><ul><li><strong>typedef</strong> 仅限于为类型定义符号名称，<strong>#define</strong> 不仅可以为类型定义别名，也能为数值定义别名，比如您可以定义 1 为 ONE。</li><li><strong>typedef</strong> 是由编译器执行解释的，<strong>#define</strong> 语句是由预编译器进行处理的。</li></ul><p>下面是 #define 的最简单的用法：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TRUE</span>  <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FALSE</span> <span class="token expression"><span class="token number">0</span></span></span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"TRUE 的值: %d\n"</span><span class="token punctuation">,</span> TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"FALSE 的值: %d\n"</span><span class="token punctuation">,</span> FALSE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">TRUE 的值: <span class="token number">1</span>FALSE 的值: <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="C-输入-amp-输出"><a href="#C-输入-amp-输出" class="headerlink" title="C 输入 &amp; 输出"></a>C 输入 &amp; 输出</h1><p>当我们提到<strong>输入</strong>时，这意味着要向程序填充一些数据。输入可以是以文件的形式或从命令行中进行。C 语言提供了一系列内置的函数来读取给定的输入，并根据需要填充到程序中。</p><p>当我们提到<strong>输出</strong>时，这意味着要在屏幕上、打印机上或任意文件中显示一些数据。C 语言提供了一系列内置的函数来输出数据到计算机屏幕上和保存数据到文本文件或二进制文件中。</p><h2 id="标准文件"><a href="#标准文件" class="headerlink" title="标准文件"></a>标准文件</h2><p>C 语言把所有的设备都当作文件。所以设备（比如显示器）被处理的方式与文件相同。以下三个文件会在程序执行时自动打开，以便访问键盘和屏幕。</p><div class="table-container"><table><thead><tr><th style="text-align:left">标准文件</th><th style="text-align:left">文件指针</th><th style="text-align:left">设备</th></tr></thead><tbody><tr><td style="text-align:left">标准输入</td><td style="text-align:left">stdin</td><td style="text-align:left">键盘</td></tr><tr><td style="text-align:left">标准输出</td><td style="text-align:left">stdout</td><td style="text-align:left">屏幕</td></tr><tr><td style="text-align:left">标准错误</td><td style="text-align:left">stderr</td><td style="text-align:left">您的屏幕</td></tr></tbody></table></div><p>文件指针是访问文件的方式，本节将讲解如何从屏幕读取值以及如何把结果输出到屏幕上。</p><p>C 语言中的 I/O (输入/输出) 通常使用 printf() 和 scanf() 两个函数。</p><p>scanf() 函数用于从标准输入（键盘）读取并格式化， printf() 函数发送格式化输出到标准输出（屏幕）。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span>      <span class="token comment">// 执行 printf() 函数需要该库</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"菜鸟教程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//显示引号中的内容</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译以上程序，输出结果为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">菜鸟教程<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>实例解析：</strong></p><ul><li>所有的 C 语言程序都需要包含 <strong>main()</strong> 函数。 代码从 <strong>main()</strong> 函数开始执行。</li><li><strong>printf()</strong> 用于格式化输出到屏幕。<strong>printf()</strong> 函数在 <strong>“stdio.h”</strong> 头文件中声明。</li><li><strong>stdio.h</strong> 是一个头文件 (标准输入输出头文件) and <strong>#include</strong> 是一个预处理命令，用来引入头文件。 当编译器遇到 <strong>printf()</strong> 函数时，如果没有找到 <strong>stdio.h</strong> 头文件，会发生编译错误。</li><li><strong>return 0;</strong> 语句用于表示退出程序。</li></ul><p><strong>%d 格式化输出整数</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> testInteger <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Number = %d"</span><span class="token punctuation">,</span> testInteger<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译以上程序，输出结果为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Number <span class="token operator">=</span> <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 printf() 函数的引号中使用 “%d” (整型) 来匹配整型变量 testInteger 并输出到屏幕。</p><p><strong>%f 格式化输出浮点型数据</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">float</span> f<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Enter a number: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// %f 匹配浮点型数据</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%f"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Value = %f"</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="getchar-amp-putchar-函数"><a href="#getchar-amp-putchar-函数" class="headerlink" title="getchar() &amp; putchar() 函数"></a>getchar() &amp; putchar() 函数</h2><p><strong>int getchar(void)</strong> 函数从屏幕读取下一个可用的字符，并把它返回为一个整数。这个函数在同一个时间内只会读取一个单一的字符。您可以在循环内使用这个方法，以便从屏幕上读取多个字符。</p><p><strong>int putchar(int c)</strong> 函数把字符输出到屏幕上，并返回相同的字符。这个函数在同一个时间内只会输出一个单一的字符。您可以在循环内使用这个方法，以便在屏幕上输出多个字符。</p><p>请看下面的实例：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">int</span> c<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"Enter a value :"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   c <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"\nYou entered: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">putchar</span><span class="token punctuation">(</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会等待您输入一些文本，当您输入一个文本并按下回车键时，程序会继续并只会读取一个单一的字符，显示如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$./a.outEnter a value :runoobYou entered: r<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="gets-amp-puts-函数"><a href="#gets-amp-puts-函数" class="headerlink" title="gets() &amp; puts() 函数"></a>gets() &amp; puts() 函数</h2><p><strong>char *gets(char *s)</strong> 函数从 <strong>stdin</strong> 读取一行到 <strong>s</strong> 所指向的缓冲区，直到一个终止符或 EOF。</p><p><strong>int puts(const char *s)</strong> 函数把字符串 s 和一个尾随的换行符写入到 <strong>stdout</strong>。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"Enter a value :"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">gets</span><span class="token punctuation">(</span> str <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"\nYou entered: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">puts</span><span class="token punctuation">(</span> str <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会等待您输入一些文本，当您输入一个文本并按下回车键时，程序会继续并读取一整行直到该行结束，显示如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$./a.outEnter a value :runoobYou entered: runoob<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="scanf-和-printf-函数"><a href="#scanf-和-printf-函数" class="headerlink" title="scanf() 和 printf() 函数"></a>scanf() 和 printf() 函数</h2><p><strong>int scanf(const char *format, …)</strong> 函数从标准输入流 <strong>stdin</strong> 读取输入，并根据提供的 <strong>format</strong> 来浏览输入。</p><p><strong>int printf(const char *format, …)</strong> 函数把输出写入到标准输出流 <strong>stdout</strong> ，并根据提供的格式产生输出。</p><p><strong>format</strong> 可以是一个简单的常量字符串，但是您可以分别指定 %s、%d、%c、%f 等来输出或读取字符串、整数、字符或浮点数。还有许多其他可用的格式选项，可以根据需要使用。如需了解完整的细节，可以查看这些函数的参考手册。现在让我们通过下面这个简单的实例来加深理解：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"Enter a value :"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s %d"</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"\nYou entered: %s %d "</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会等待您输入一些文本，当您输入一个文本并按下回车键时，程序会继续并读取输入，显示如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$./a.outEnter a value :runoob <span class="token number">123</span>You entered: runoob <span class="token number">123</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在这里，应当指出的是，scanf() 期待输入的格式与您给出的 %s 和 %d 相同，这意味着您必须提供有效的输入，比如 “string integer”，如果您提供的是 “string string” 或 “integer integer”，它会被认为是错误的输入。另外，在读取字符串时，只要遇到一个空格，scanf() 就会停止读取，所以 “this is test” 对 scanf() 来说是三个字符串。</p><h1 id="C-文件读写"><a href="#C-文件读写" class="headerlink" title="C 文件读写"></a>C 文件读写</h1><p>上一章我们讲解了 C 语言处理的标准输入和输出设备。本章我们将介绍 C 程序员如何创建、打开、关闭文本文件或二进制文件。</p><p>一个文件，无论它是文本文件还是二进制文件，都是代表了一系列的字节。C 语言不仅提供了访问顶层的函数，也提供了底层（OS）调用来处理存储设备上的文件。本章将讲解文件管理的重要调用。</p><h2 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h2><p>您可以使用 <strong>fopen( )</strong> 函数来创建一个新的文件或者打开一个已有的文件，这个调用会初始化类型 <strong>FILE</strong> 的一个对象，类型 <strong>FILE</strong> 包含了所有用来控制流的必要的信息。下面是这个函数调用的原型：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">FILE <span class="token operator">*</span><span class="token function">fopen</span><span class="token punctuation">(</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> filename<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> mode <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在这里，<strong>filename</strong> 是字符串，用来命名文件，访问模式 <strong>mode</strong> 的值可以是下列值中的一个：</p><div class="table-container"><table><thead><tr><th style="text-align:left">模式</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">r</td><td style="text-align:left">打开一个已有的文本文件，允许读取文件。</td></tr><tr><td style="text-align:left">w</td><td style="text-align:left">打开一个文本文件，允许写入文件。如果文件不存在，则会创建一个新文件。在这里，您的程序会从文件的开头写入内容。如果文件存在，则该会被截断为零长度，重新写入。</td></tr><tr><td style="text-align:left">a</td><td style="text-align:left">打开一个文本文件，以追加模式写入文件。如果文件不存在，则会创建一个新文件。在这里，您的程序会在已有的文件内容中追加内容。</td></tr><tr><td style="text-align:left">r+</td><td style="text-align:left">打开一个文本文件，允许读写文件。</td></tr><tr><td style="text-align:left">w+</td><td style="text-align:left">打开一个文本文件，允许读写文件。如果文件已存在，则文件会被截断为零长度，如果文件不存在，则会创建一个新文件。</td></tr><tr><td style="text-align:left">a+</td><td style="text-align:left">打开一个文本文件，允许读写文件。如果文件不存在，则会创建一个新文件。读取会从文件的开头开始，写入则只能是追加模式。</td></tr></tbody></table></div><p>如果处理的是二进制文件，则需使用下面的访问模式来取代上面的访问模式：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token string">"rb"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">,</span> <span class="token string">"ab"</span><span class="token punctuation">,</span> <span class="token string">"rb+"</span><span class="token punctuation">,</span> <span class="token string">"r+b"</span><span class="token punctuation">,</span> <span class="token string">"wb+"</span><span class="token punctuation">,</span> <span class="token string">"w+b"</span><span class="token punctuation">,</span> <span class="token string">"ab+"</span><span class="token punctuation">,</span> <span class="token string">"a+b"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h2><p>为了关闭文件，请使用 fclose( ) 函数。函数的原型如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">fclose</span><span class="token punctuation">(</span> FILE <span class="token operator">*</span>fp <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果成功关闭文件，<strong>fclose( )</strong> 函数返回零，如果关闭文件时发生错误，函数返回 <strong>EOF</strong>。这个函数实际上，会清空缓冲区中的数据，关闭文件，并释放用于该文件的所有内存。EOF 是一个定义在头文件 <strong>stdio.h</strong> 中的常量。</p><p>C 标准库提供了各种函数来按字符或者以固定长度字符串的形式读写文件。</p><h2 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h2><p>下面是把字符写入到流中的最简单的函数：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">fputc</span><span class="token punctuation">(</span> <span class="token keyword">int</span> c<span class="token punctuation">,</span> FILE <span class="token operator">*</span>fp <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>函数 <strong>fputc()</strong> 把参数 c 的字符值写入到 fp 所指向的输出流中。如果写入成功，它会返回写入的字符，如果发生错误，则会返回 <strong>EOF</strong>。您可以使用下面的函数来把一个以 null 结尾的字符串写入到流中：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">fputs</span><span class="token punctuation">(</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> FILE <span class="token operator">*</span>fp <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>函数 <strong>fputs()</strong> 把字符串 <strong>s</strong> 写入到 fp 所指向的输出流中。如果写入成功，它会返回一个非负值，如果发生错误，则会返回 <strong>EOF</strong>。您也可以使用 <strong>int fprintf(FILE *fp,const char *format, …)</strong> 函数把一个字符串写入到文件中。尝试下面的实例：</p><blockquote><p><strong>注意：</strong>请确保您有可用的 <strong>tmp</strong> 目录，如果不存在该目录，则需要在您的计算机上先创建该目录。</p><p><strong>/tmp</strong> 一般是 Linux 系统上的临时目录，如果你在 Windows 系统上运行，则需要修改为本地环境中已存在的目录，例如: <strong>C:\tmp</strong>、<strong>D:\tmp</strong>等。</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   FILE <span class="token operator">*</span>fp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"/tmp/test.txt"</span><span class="token punctuation">,</span> <span class="token string">"w+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">fprintf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token string">"This is testing for fprintf...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token string">"This is testing for fputs...\n"</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会在 /tmp 目录中创建一个新的文件 <strong>test.txt</strong>，并使用两个不同的函数写入两行。接下来让我们来读取这个文件。</p><h2 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h2><p>下面是从文件读取单个字符的最简单的函数：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">fgetc</span><span class="token punctuation">(</span> FILE <span class="token operator">*</span> fp <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>fgetc()</strong> 函数从 fp 所指向的输入文件中读取一个字符。返回值是读取的字符，如果发生错误则返回 <strong>EOF</strong>。下面的函数允许您从流中读取一个字符串：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">fgets</span><span class="token punctuation">(</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> FILE <span class="token operator">*</span>fp <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>函数 <strong>fgets()</strong> 从 fp 所指向的输入流中读取 n - 1 个字符。它会把读取的字符串复制到缓冲区 <strong>buf</strong>，并在最后追加一个 <strong>null</strong> 字符来终止字符串。</p><p>如果这个函数在读取最后一个字符之前就遇到一个换行符 ‘\n’ 或文件的末尾 EOF，则只会返回读取到的字符，包括换行符。您也可以使用 <strong>int fscanf(FILE *fp, const char *format, …)</strong> 函数来从文件中读取字符串，但是在遇到第一个空格和换行符时，它会停止读取。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   FILE <span class="token operator">*</span>fp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>   <span class="token keyword">char</span> buff<span class="token punctuation">[</span><span class="token number">255</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"/tmp/test.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">fscanf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token string">"%s"</span><span class="token punctuation">,</span> buff<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1: %s\n"</span><span class="token punctuation">,</span> buff <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fgets</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>FILE<span class="token operator">*</span><span class="token punctuation">)</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"2: %s\n"</span><span class="token punctuation">,</span> buff <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">fgets</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>FILE<span class="token operator">*</span><span class="token punctuation">)</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"3: %s\n"</span><span class="token punctuation">,</span> buff <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会读取上一部分创建的文件，产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>: This<span class="token number">2</span>: is testing <span class="token keyword">for</span> fprintf<span class="token punctuation">..</span>.<span class="token number">3</span>: This is testing <span class="token keyword">for</span> fputs<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>首先，<strong>fscanf()</strong> 方法只读取了 <strong>This</strong>，因为它在后边遇到了一个空格。其次，调用 <strong>fgets()</strong> 读取剩余的部分，直到行尾。最后，调用 <strong>fgets()</strong> 完整地读取第二行。</p><h2 id="二进制-I-O-函数"><a href="#二进制-I-O-函数" class="headerlink" title="二进制 I/O 函数"></a>二进制 I/O 函数</h2><p>下面两个函数用于二进制输入和输出：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">size_t</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size_of_elements<span class="token punctuation">,</span>              <span class="token class-name">size_t</span> number_of_elements<span class="token punctuation">,</span> FILE <span class="token operator">*</span>a_file<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token class-name">size_t</span> <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size_of_elements<span class="token punctuation">,</span>              <span class="token class-name">size_t</span> number_of_elements<span class="token punctuation">,</span> FILE <span class="token operator">*</span>a_file<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这两个函数都是用于存储块的读写 - 通常是数组或结构体。</p><h1 id="C-预处理器"><a href="#C-预处理器" class="headerlink" title="C 预处理器"></a>C 预处理器</h1><p><strong>C 预处理器</strong>不是编译器的组成部分，但是它是编译过程中一个单独的步骤。简言之，C 预处理器只不过是一个文本替换工具而已，它们会指示编译器在实际编译之前完成所需的预处理。我们将把 C 预处理器（C Preprocessor）简写为 CPP。</p><p>所有的预处理器命令都是以井号（#）开头。它必须是第一个非空字符，为了增强可读性，预处理器指令应从第一列开始。下面列出了所有重要的预处理器指令：</p><div class="table-container"><table><thead><tr><th style="text-align:left">指令</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">#define</td><td style="text-align:left">定义宏</td></tr><tr><td style="text-align:left">#include</td><td style="text-align:left">包含一个源代码文件</td></tr><tr><td style="text-align:left">#undef</td><td style="text-align:left">取消已定义的宏</td></tr><tr><td style="text-align:left">#ifdef</td><td style="text-align:left">如果宏已经定义，则返回真</td></tr><tr><td style="text-align:left">#ifndef</td><td style="text-align:left">如果宏没有定义，则返回真</td></tr><tr><td style="text-align:left">#if</td><td style="text-align:left">如果给定条件为真，则编译下面代码</td></tr><tr><td style="text-align:left">#else</td><td style="text-align:left">#if 的替代方案</td></tr><tr><td style="text-align:left">#elif</td><td style="text-align:left">如果前面的 #if 给定条件不为真，当前条件为真，则编译下面代码</td></tr><tr><td style="text-align:left">#endif</td><td style="text-align:left">结束一个 #if……#else 条件编译块</td></tr><tr><td style="text-align:left">#error</td><td style="text-align:left">当遇到标准错误时，输出错误消息</td></tr><tr><td style="text-align:left">#pragma</td><td style="text-align:left">使用标准化方法，向编译器发布特殊的命令到编译器中</td></tr></tbody></table></div><h2 id="预处理器实例"><a href="#预处理器实例" class="headerlink" title="预处理器实例"></a>预处理器实例</h2><p>分析下面的实例来理解不同的指令。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_ARRAY_LENGTH</span> <span class="token expression"><span class="token number">20</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个指令告诉 CPP 把所有的 MAX_ARRAY_LENGTH 替换为 20。使用 <em>#define</em> 定义常量来增强可读性。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"myheader.h"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这些指令告诉 CPP 从<strong>系统库</strong>中获取 stdio.h，并添加文本到当前的源文件中。下一行告诉 CPP 从本地目录中获取 <strong>myheader.h</strong>，并添加内容到当前的源文件中。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span>  <span class="token expression">FILE_SIZE</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FILE_SIZE</span> <span class="token expression"><span class="token number">42</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这个指令告诉 CPP 取消已定义的 FILE_SIZE，并定义它为 42。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">MESSAGE</span></span>   <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MESSAGE</span> <span class="token string">"You wish!"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这个指令告诉 CPP 只有当 MESSAGE 未定义时，才定义 MESSAGE。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">DEBUG</span></span>   <span class="token comment">/* Your debugging statements here */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这个指令告诉 CPP 如果定义了 DEBUG，则执行处理语句。在编译时，如果您向 gcc 编译器传递了 <em>-DDEBUG</em> 开关量，这个指令就非常有用。它定义了 DEBUG，您可以在编译期间随时开启或关闭调试。</p><h2 id="预定义宏"><a href="#预定义宏" class="headerlink" title="预定义宏"></a>预定义宏</h2><p>ANSI C 定义了许多宏。在编程中您可以使用这些宏，但是不能直接修改这些预定义的宏。</p><div class="table-container"><table><thead><tr><th style="text-align:left">宏</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><strong>DATE</strong></td><td style="text-align:left">当前日期，一个以 “MMM DD YYYY” 格式表示的字符常量。</td></tr><tr><td style="text-align:left"><strong>TIME</strong></td><td style="text-align:left">当前时间，一个以 “HH:MM:SS” 格式表示的字符常量。</td></tr><tr><td style="text-align:left"><strong>FILE</strong></td><td style="text-align:left">这会包含当前文件名，一个字符串常量。</td></tr><tr><td style="text-align:left"><strong>LINE</strong></td><td style="text-align:left">这会包含当前行号，一个十进制常量。</td></tr><tr><td style="text-align:left"><strong>STDC</strong></td><td style="text-align:left">当编译器以 ANSI 标准编译时，则定义为 1。</td></tr></tbody></table></div><p>让我们来尝试下面的实例：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"File :%s\n"</span><span class="token punctuation">,</span> <span class="token constant">__FILE__</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Date :%s\n"</span><span class="token punctuation">,</span> <span class="token constant">__DATE__</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Time :%s\n"</span><span class="token punctuation">,</span> <span class="token constant">__TIME__</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line :%d\n"</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ANSI :%d\n"</span><span class="token punctuation">,</span> __STDC__ <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码（在文件 <strong>test.c</strong> 中）被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">File <span class="token operator">:</span>test<span class="token punctuation">.</span>cDate <span class="token operator">:</span>Jun <span class="token number">2</span> <span class="token number">2012</span>Time <span class="token operator">:</span><span class="token number">03</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">24</span>Line <span class="token operator">:</span><span class="token number">8</span>ANSI <span class="token operator">:</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="预处理器运算符"><a href="#预处理器运算符" class="headerlink" title="预处理器运算符"></a>预处理器运算符</h2><p>C 预处理器提供了下列的运算符来帮助您创建宏：</p><h5 id="宏延续运算符（-）"><a href="#宏延续运算符（-）" class="headerlink" title="宏延续运算符（\）"></a>宏延续运算符（\）</h5><p>一个宏通常写在一个单行上。但是如果宏太长，一个单行容纳不下，则使用宏延续运算符（\）。例如：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name function">message_for</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>  </span><span class="token punctuation">\</span>    <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span>#a </span><span class="token string">" and "</span> <span class="token expression"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">b</span> </span></span><span class="token string">": We love you!\n"</span><span class="token expression"><span class="token punctuation">)</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="字符串常量化运算符（-）"><a href="#字符串常量化运算符（-）" class="headerlink" title="字符串常量化运算符（#）"></a>字符串常量化运算符（#）</h5><p>在宏定义中，当需要把一个宏的参数转换为字符串常量时，则使用字符串常量化运算符（#）。在宏中使用的该运算符有一个特定的参数或参数列表。例如：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name function">message_for</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>  </span><span class="token punctuation">\</span>    <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span>#a </span><span class="token string">" and "</span> <span class="token expression"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">b</span> </span></span><span class="token string">": We love you!\n"</span><span class="token expression"><span class="token punctuation">)</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">message_for</span><span class="token punctuation">(</span>Carole<span class="token punctuation">,</span> Debra<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Carole and Debra<span class="token operator">:</span> We love you<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="标记粘贴运算符（-）"><a href="#标记粘贴运算符（-）" class="headerlink" title="标记粘贴运算符（##）"></a>标记粘贴运算符（##）</h5><p>宏定义内的标记粘贴运算符（##）会合并两个参数。它允许在宏定义中两个独立的标记被合并为一个标记。例如：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">tokenpaster</span><span class="token expression"><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token function">printf</span> <span class="token punctuation">(</span></span><span class="token string">"token"</span> <span class="token expression"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">n</span> </span></span><span class="token string">" = %d"</span><span class="token expression"><span class="token punctuation">,</span> token</span><span class="token punctuation">##</span><span class="token expression">n<span class="token punctuation">)</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">int</span> token34 <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>      <span class="token function">tokenpaster</span><span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">token34 <span class="token operator">=</span> <span class="token number">40</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这是怎么发生的，因为这个实例会从编译器产生下列的实际输出：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">"token34 = %d"</span><span class="token punctuation">,</span> token34<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个实例演示了 token##n 会连接到 token34 中，在这里，我们使用了<strong>字符串常量化运算符（#）</strong>和<strong>标记粘贴运算符（##）</strong>。</p><h5 id="defined-运算符"><a href="#defined-运算符" class="headerlink" title="defined() 运算符"></a>defined() 运算符</h5><p>预处理器 <strong>defined</strong> 运算符是用在常量表达式中的，用来确定一个标识符是否已经使用 #define 定义过。如果指定的标识符已定义，则值为真（非零）。如果指定的标识符未定义，则值为假（零）。下面的实例演示了 defined() 运算符的用法：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token operator">!</span><span class="token function">defined</span> <span class="token punctuation">(</span>MESSAGE<span class="token punctuation">)</span></span></span>   <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MESSAGE</span> <span class="token string">"You wish!"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Here is the message: %s\n"</span><span class="token punctuation">,</span> MESSAGE<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Here is the message<span class="token operator">:</span> You wish<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="参数化的宏"><a href="#参数化的宏" class="headerlink" title="参数化的宏"></a>参数化的宏</h2><p>CPP 一个强大的功能是可以使用参数化的宏来模拟函数。例如，下面的代码是计算一个数的平方：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们可以使用宏重写上面的代码，如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">square</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在使用带有参数的宏之前，必须使用 <strong>#define</strong> 指令定义。参数列表是括在圆括号内，且必须紧跟在宏名称的后边。宏名称和左圆括号之间不允许有空格。例如：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">MAX</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Max between 20 and 10 is %d\n"</span><span class="token punctuation">,</span> <span class="token function">MAX</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Max between <span class="token number">20</span> and <span class="token number">10</span> is <span class="token number">20</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="C-头文件"><a href="#C-头文件" class="headerlink" title="C 头文件"></a>C 头文件</h1><p>头文件是扩展名为 <strong>.h</strong> 的文件，包含了 C 函数声明和宏定义，被多个源文件中引用共享。有两种类型的头文件：程序员编写的头文件和编译器自带的头文件。</p><p>在程序中要使用头文件，需要使用 C 预处理指令 <strong>#include</strong> 来引用它。前面我们已经看过 <strong>stdio.h</strong> 头文件，它是编译器自带的头文件。</p><p>引用头文件相当于复制头文件的内容，但是我们不会直接在源文件中复制头文件的内容，因为这么做很容易出错，特别在程序是由多个源文件组成的时候。</p><p>A simple practice in C 或 C++ 程序中，建议把所有的常量、宏、系统全局变量和函数原型写在头文件中，在需要的时候随时引用这些头文件。</p><h2 id="引用头文件的语法"><a href="#引用头文件的语法" class="headerlink" title="引用头文件的语法"></a>引用头文件的语法</h2><p>使用预处理指令 <strong>#include</strong> 可以引用用户和系统头文件。它的形式有以下两种：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;file&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这种形式用于引用系统头文件。它在系统目录的标准列表中搜索名为 file 的文件。在编译源代码时，您可以通过 -I 选项把目录前置在该列表前。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"file"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这种形式用于引用用户头文件。它在包含当前文件的目录中搜索名为 file 的文件。在编译源代码时，您可以通过 -I 选项把目录前置在该列表前。</p><h2 id="引用头文件的操作"><a href="#引用头文件的操作" class="headerlink" title="引用头文件的操作"></a>引用头文件的操作</h2><p><strong>#include</strong> 指令会指示 C 预处理器浏览指定的文件作为输入。预处理器的输出包含了已经生成的输出，被引用文件生成的输出以及 <strong>#include</strong> 指令之后的文本输出。例如，如果您有一个头文件 header.h，如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">test</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>和一个使用了头文件的主程序 <em>program.c</em>，如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> x<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"header.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">puts</span> <span class="token punctuation">(</span><span class="token function">test</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译器会看到如下的代码信息：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> x<span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">test</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">puts</span> <span class="token punctuation">(</span><span class="token function">test</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="只引用一次头文件"><a href="#只引用一次头文件" class="headerlink" title="只引用一次头文件"></a>只引用一次头文件</h2><p>如果一个头文件被引用两次，编译器会处理两次头文件的内容，这将产生错误。为了防止这种情况，标准的做法是把文件的整个内容放在条件编译语句中，如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">HEADER_FILE</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">HEADER_FILE</span></span>the entire header file file<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种结构就是通常所说的包装器 <strong>#ifndef</strong>。当再次引用头文件时，条件为假，因为 HEADER_FILE 已定义。此时，预处理器会跳过文件的整个内容，编译器会忽略它。</p><h2 id="有条件引用"><a href="#有条件引用" class="headerlink" title="有条件引用"></a>有条件引用</h2><p>有时需要从多个不同的头文件中选择一个引用到程序中。例如，需要指定在不同的操作系统上使用的配置参数。您可以通过一系列条件来实现这点，如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">SYSTEM_1</span></span>   <span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">"system_1.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression">SYSTEM_2</span></span>   <span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">"system_2.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression">SYSTEM_3</span></span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是如果头文件比较多的时候，这么做是很不妥当的，预处理器使用宏来定义头文件的名称。这就是所谓的<strong>有条件引用</strong>。它不是用头文件的名称作为 <strong>#include</strong> 的直接参数，您只需要使用宏名称代替即可：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SYSTEM_H</span> <span class="token string">"system_1.h"</span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token expression">SYSTEM_H</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>SYSTEM_H 会扩展，预处理器会查找 system_1.h，就像 <strong>#include</strong> 最初编写的那样。SYSTEM_H 可通过 -D 选项被您的 Makefile 定义。</p><h1 id="C-强制类型转换"><a href="#C-强制类型转换" class="headerlink" title="C 强制类型转换"></a>C 强制类型转换</h1><p>强制类型转换是把变量从一种类型转换为另一种数据类型。例如，如果您想存储一个 long 类型的值到一个简单的整型中，您需要把 long 类型强制转换为 int 类型。您可以使用<strong>强制类型转换运算符</strong>来把值显式地从一种类型转换为另一种类型，如下所示：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">(</span>type_name<span class="token punctuation">)</span> expression<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>请看下面的实例，使用强制类型转换运算符把一个整数变量除以另一个整数变量，得到一个浮点数：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">,</span> count <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>   <span class="token keyword">double</span> mean<span class="token punctuation">;</span>    mean <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> sum <span class="token operator">/</span> count<span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Value of mean : %f\n"</span><span class="token punctuation">,</span> mean <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Value of mean <span class="token builtin class-name">:</span> <span class="token number">3.400000</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里要注意的是强制类型转换运算符的优先级大于除法，因此 <strong>sum</strong> 的值首先被转换为 <strong>double</strong> 型，然后除以 count，得到一个类型为 double 的值。</p><p>类型转换可以是隐式的，由编译器自动执行，也可以是显式的，通过使用<strong>强制类型转换运算符</strong>来指定。在编程时，有需要类型转换的时候都用上强制类型转换运算符，是一种良好的编程习惯。</p><h2 id="整数提升"><a href="#整数提升" class="headerlink" title="整数提升"></a>整数提升</h2><p>整数提升是指把小于 <strong>int</strong> 或 <strong>unsigned int</strong> 的整数类型转换为 <strong>int</strong> 或 <strong>unsigned int</strong> 的过程。请看下面的实例，在 int 中添加一个字符：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">int</span>  i <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">;</span>   <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token char">'c'</span><span class="token punctuation">;</span> <span class="token comment">/* ascii 值是 99 */</span>   <span class="token keyword">int</span> sum<span class="token punctuation">;</span>    sum <span class="token operator">=</span> i <span class="token operator">+</span> c<span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Value of sum : %d\n"</span><span class="token punctuation">,</span> sum <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Value of <span class="token function">sum</span> <span class="token builtin class-name">:</span> <span class="token number">116</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在这里，sum 的值为 116，因为编译器进行了整数提升，在执行实际加法运算时，把 ‘c’ 的值转换为对应的 ascii 值。</p><h2 id="常用的算术转换"><a href="#常用的算术转换" class="headerlink" title="常用的算术转换"></a>常用的算术转换</h2><p><strong>常用的算术转换</strong>是隐式地把值强制转换为相同的类型。编译器首先执行<strong>整数提升</strong>，如果操作数类型不同，则它们会被转换为下列层次中出现的最高层次的类型：</p><p><img src="/images/614-C语言-菜鸟教程/usual_arithmetic_conversion-164733461098852.png" alt="Usual Arithmetic Conversion"></p><p>常用的算术转换不适用于赋值运算符、逻辑运算符 &amp;&amp; 和 ||。让我们看看下面的实例来理解这个概念：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">int</span>  i <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">;</span>   <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token char">'c'</span><span class="token punctuation">;</span> <span class="token comment">/* ascii 值是 99 */</span>   <span class="token keyword">float</span> sum<span class="token punctuation">;</span>    sum <span class="token operator">=</span> i <span class="token operator">+</span> c<span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Value of sum : %f\n"</span><span class="token punctuation">,</span> sum <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Value of <span class="token function">sum</span> <span class="token builtin class-name">:</span> <span class="token number">116.000000</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在这里，c 首先被转换为整数，但是由于最后的值是 float 型的，所以会应用常用的算术转换，编译器会把 i 和 c 转换为浮点型，并把它们相加得到一个浮点数。</p><h1 id="C-错误处理"><a href="#C-错误处理" class="headerlink" title="C 错误处理"></a>C 错误处理</h1><p>C 语言不提供对错误处理的直接支持，但是作为一种系统编程语言，它以返回值的形式允许您访问底层数据。在发生错误时，大多数的 C 或 UNIX 函数调用返回 1 或 NULL，同时会设置一个错误代码 <strong>errno</strong>，该错误代码是全局变量，表示在函数调用期间发生了错误。您可以在 errno.h 头文件中找到各种各样的错误代码。</p><p>所以，C 程序员可以通过检查返回值，然后根据返回值决定采取哪种适当的动作。开发人员应该在程序初始化时，把 errno 设置为 0，这是一种良好的编程习惯。0 值表示程序中没有错误。</p><h2 id="errno、perror-和-strerror"><a href="#errno、perror-和-strerror" class="headerlink" title="errno、perror() 和 strerror()"></a>errno、perror() 和 strerror()</h2><p>C 语言提供了 <strong>perror()</strong> 和 <strong>strerror()</strong> 函数来显示与 <strong>errno</strong> 相关的文本消息。</p><ul><li><strong>perror()</strong> 函数显示您传给它的字符串，后跟一个冒号、一个空格和当前 errno 值的文本表示形式。</li><li><strong>strerror()</strong> 函数，返回一个指针，指针指向当前 errno 值的文本表示形式。</li></ul><p>让我们来模拟一种错误情况，尝试打开一个不存在的文件。您可以使用多种方式来输出错误消息，在这里我们使用函数来演示用法。另外有一点需要注意，您应该使用 <strong>stderr</strong> 文件流来输出所有的错误。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span> <span class="token keyword">extern</span> <span class="token keyword">int</span> errno <span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   FILE <span class="token operator">*</span> pf<span class="token punctuation">;</span>   <span class="token keyword">int</span> errnum<span class="token punctuation">;</span>   pf <span class="token operator">=</span> <span class="token function">fopen</span> <span class="token punctuation">(</span><span class="token string">"unexist.txt"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>pf <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>      errnum <span class="token operator">=</span> errno<span class="token punctuation">;</span>      <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"错误号: %d\n"</span><span class="token punctuation">,</span> errno<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"通过 perror 输出错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"打开文件错误: %s\n"</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span> errnum <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">else</span>   <span class="token punctuation">{</span>      <span class="token function">fclose</span> <span class="token punctuation">(</span>pf<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">错误号: <span class="token number">2</span>通过 perror 输出错误: No such <span class="token function">file</span> or directory打开文件错误: No such <span class="token function">file</span> or directory<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="被零除的错误"><a href="#被零除的错误" class="headerlink" title="被零除的错误"></a>被零除的错误</h2><p>在进行除法运算时，如果不检查除数是否为零，则会导致一个运行时错误。</p><p>为了避免这种情况发生，下面的代码在进行除法运算前会先检查除数是否为零：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">int</span> dividend <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> divisor <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> quotient<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> divisor <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"除数为 0 退出运行...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   quotient <span class="token operator">=</span> dividend <span class="token operator">/</span> divisor<span class="token punctuation">;</span>   <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"quotient 变量的值为 : %d\n"</span><span class="token punctuation">,</span> quotient <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">除数为 <span class="token number">0</span> 退出运行<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="程序退出状态"><a href="#程序退出状态" class="headerlink" title="程序退出状态"></a>程序退出状态</h2><p>通常情况下，程序成功执行完一个操作正常退出的时候会带有值 EXIT_SUCCESS。在这里，EXIT_SUCCESS 是宏，它被定义为 0。</p><p>如果程序中存在一种错误情况，当您退出程序时，会带有状态值 EXIT_FAILURE，被定义为 -1。所以，上面的程序可以写成：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">int</span> dividend <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> divisor <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> quotient<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> divisor <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"除数为 0 退出运行...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   quotient <span class="token operator">=</span> dividend <span class="token operator">/</span> divisor<span class="token punctuation">;</span>   <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"quotient 变量的值为: %d\n"</span><span class="token punctuation">,</span> quotient <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_SUCCESS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">quotient 变量的值为 <span class="token builtin class-name">:</span> <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="C-递归"><a href="#C-递归" class="headerlink" title="C 递归"></a>C 递归</h1><p>递归指的是在函数的定义中使用函数自身的方法。</p><blockquote><p>举个例子：<br>从前有座山，山里有座庙，庙里有个老和尚，正在给小和尚讲故事呢！故事是什么呢？”从前有座山，山里有座庙，庙里有个老和尚，正在给小和尚讲故事呢！故事是什么呢？’从前有座山，山里有座庙，庙里有个老和尚，正在给小和尚讲故事呢！故事是什么呢？……’”</p></blockquote><p>语法格式如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">recursion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   statements<span class="token punctuation">;</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>   <span class="token function">recursion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 函数调用自身 */</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">recursion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>流程图：</p><p><img src="/images/614-C语言-菜鸟教程/recursion_0.png" alt=""></p><p>C 语言支持递归，即一个函数可以调用其自身。但在使用递归时，程序员需要注意定义一个从函数退出的条件，否则会进入死循环。</p><p>递归函数在解决许多数学问题上起了至关重要的作用，比如计算一个数的阶乘、生成斐波那契数列，等等。</p><h2 id="数的阶乘"><a href="#数的阶乘" class="headerlink" title="数的阶乘"></a>数的阶乘</h2><p>下面的实例使用递归函数计算一个给定的数的阶乘：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span> <span class="token keyword">double</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> i <span class="token operator">*</span> <span class="token function">factorial</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d 的阶乘为 %f\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token function">factorial</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">15</span> 的阶乘为 <span class="token number">1307674368000.000000</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h2><p>下面的实例使用递归函数生成一个给定的数的斐波那契数列：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span> <span class="token keyword">int</span> <span class="token function">fibonaci</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token function">fibonaci</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fibonaci</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">int</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t\n"</span><span class="token punctuation">,</span> <span class="token function">fibonaci</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">0</span>    <span class="token number">1</span>    <span class="token number">1</span>    <span class="token number">2</span>    <span class="token number">3</span>    <span class="token number">5</span>    <span class="token number">8</span>    <span class="token number">13</span>    <span class="token number">21</span>    <span class="token number">34</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="C-可变参数"><a href="#C-可变参数" class="headerlink" title="C 可变参数"></a>C 可变参数</h1><p>有时，您可能会碰到这样的情况，您希望函数带有可变数量的参数，而不是预定义数量的参数。C 语言为这种情况提供了一个解决方案，它允许您定义一个函数，能根据具体的需求接受可变数量的参数。下面的实例演示了这种函数的定义。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token punctuation">.</span>   <span class="token punctuation">.</span>   <span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">func</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">func</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请注意，函数 <strong>func()</strong> 最后一个参数写成省略号，即三个点号（<strong>…</strong>），省略号之前的那个参数是 <strong>int</strong>，代表了要传递的可变参数的总数。为了使用这个功能，您需要使用 <strong>stdarg.h</strong> 头文件，该文件提供了实现可变参数功能的函数和宏。具体步骤如下：</p><ul><li>定义一个函数，最后一个参数为省略号，省略号前面可以设置自定义参数。</li><li>在函数定义中创建一个 <strong>va_list</strong> 类型变量，该类型是在 stdarg.h 头文件中定义的。</li><li>使用 <strong>int</strong> 参数和 <strong>va_start</strong> 宏来初始化 <strong>va_list</strong> 变量为一个参数列表。宏 va_start 是在 stdarg.h 头文件中定义的。</li><li>使用 <strong>va_arg</strong> 宏和 <strong>va_list</strong> 变量来访问参数列表中的每个项。</li><li>使用宏 <strong>va_end</strong> 来清理赋予 <strong>va_list</strong> 变量的内存。</li></ul><p>现在让我们按照上面的步骤，来编写一个带有可变数量参数的函数，并返回它们的平均值：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdarg.h&gt;</span></span> <span class="token keyword">double</span> <span class="token function">average</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     va_list valist<span class="token punctuation">;</span>    <span class="token keyword">double</span> sum <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>     <span class="token comment">/* 为 num 个参数初始化 valist */</span>    <span class="token function">va_start</span><span class="token punctuation">(</span>valist<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">/* 访问所有赋给 valist 的参数 */</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>       sum <span class="token operator">+=</span> <span class="token function">va_arg</span><span class="token punctuation">(</span>valist<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/* 清理为 valist 保留的内存 */</span>    <span class="token function">va_end</span><span class="token punctuation">(</span>valist<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> sum<span class="token operator">/</span>num<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Average of 2, 3, 4, 5 = %f\n"</span><span class="token punctuation">,</span> <span class="token function">average</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Average of 5, 10, 15 = %f\n"</span><span class="token punctuation">,</span> <span class="token function">average</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果。应该指出的是，函数 <strong>average()</strong> 被调用两次，每次第一个参数都是表示被传的可变参数的总数。省略号被用来传递可变数量的参数。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Average of <span class="token number">2</span>, <span class="token number">3</span>, <span class="token number">4</span>, <span class="token number">5</span> <span class="token operator">=</span> <span class="token number">3.500000</span>Average of <span class="token number">5</span>, <span class="token number">10</span>, <span class="token number">15</span> <span class="token operator">=</span> <span class="token number">10.000000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="C-内存管理"><a href="#C-内存管理" class="headerlink" title="C 内存管理"></a>C 内存管理</h1><p>本章将讲解 C 中的动态内存管理。C 语言为内存的分配和管理提供了几个函数。这些函数可以在 <strong><stdlib.h></stdlib.h></strong> 头文件中找到。</p><div class="table-container"><table><thead><tr><th style="text-align:left">序号</th><th style="text-align:left">函数和描述</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left"><strong>void *calloc(int num, int size);</strong> 在内存中动态地分配 num 个长度为 size 的连续空间，并将每一个字节都初始化为 0。所以它的结果是分配了 num*size 个字节长度的内存空间，并且每个字节的值都是0。</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left"><strong>void free(void *address);</strong> 该函数释放 address 所指向的内存块,释放的是动态分配的内存空间。</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left"><strong>void *malloc(int num);</strong> 在堆区分配一块指定大小的内存空间，用来存放数据。这块内存空间在函数执行完成后不会被初始化，它们的值是未知的。</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left"><strong>void *realloc(void *address, int newsize);</strong> 该函数重新分配内存，把内存扩展到 <strong>newsize</strong>。</td></tr></tbody></table></div><p><strong>注意：</strong>void <em> 类型表示未确定类型的指针。C、C++ 规定 void </em> 类型可以通过类型转换强制转换为任何其它类型的指针。</p><h2 id="动态分配内存"><a href="#动态分配内存" class="headerlink" title="动态分配内存"></a>动态分配内存</h2><p>编程时，如果您预先知道数组的大小，那么定义数组时就比较容易。例如，一个存储人名的数组，它最多容纳 100 个字符，所以您可以定义数组，如下所示：</p><pre class="line-numbers language-none"><code class="language-none">char name[100];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是，如果您预先不知道需要存储的文本长度，例如您想存储有关一个主题的详细描述。在这里，我们需要定义一个指针，该指针指向未定义所需内存大小的字符，后续再根据需求来分配内存，如下所示：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">char</span> <span class="token operator">*</span>description<span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">"Zara Ali"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* 动态分配内存 */</span>   description <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span> <span class="token number">200</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span> description <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>   <span class="token punctuation">{</span>      <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Error - unable to allocate required memory\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">else</span>   <span class="token punctuation">{</span>      <span class="token function">strcpy</span><span class="token punctuation">(</span> description<span class="token punctuation">,</span> <span class="token string">"Zara ali a DPS student in class 10th"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Name = %s\n"</span><span class="token punctuation">,</span> name <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Description: %s\n"</span><span class="token punctuation">,</span> description <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Name <span class="token operator">=</span> Zara AliDescription: Zara ali a DPS student <span class="token keyword">in</span> class 10th<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上面的程序也可以使用 <strong>calloc()</strong> 来编写，只需要把 malloc 替换为 calloc 即可，如下所示：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">calloc</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当动态分配内存时，您有完全控制权，可以传递任何大小的值。而那些预先定义了大小的数组，一旦定义则无法改变大小。</p><h2 id="重新调整内存的大小和释放内存"><a href="#重新调整内存的大小和释放内存" class="headerlink" title="重新调整内存的大小和释放内存"></a>重新调整内存的大小和释放内存</h2><p>当程序退出时，操作系统会自动释放所有分配给程序的内存，但是，建议您在不需要内存时，都应该调用函数 <strong>free()</strong> 来释放内存。</p><p>或者，您可以通过调用函数 <strong>realloc()</strong> 来增加或减少已分配的内存块的大小。让我们使用 realloc() 和 free() 函数，再次查看上面的实例：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">char</span> <span class="token operator">*</span>description<span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">"Zara Ali"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* 动态分配内存 */</span>   description <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span> <span class="token number">30</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span> description <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>   <span class="token punctuation">{</span>      <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Error - unable to allocate required memory\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">else</span>   <span class="token punctuation">{</span>      <span class="token function">strcpy</span><span class="token punctuation">(</span> description<span class="token punctuation">,</span> <span class="token string">"Zara ali a DPS student."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment">/* 假设您想要存储更大的描述信息 */</span>   description <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">realloc</span><span class="token punctuation">(</span> description<span class="token punctuation">,</span> <span class="token number">100</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span> description <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>   <span class="token punctuation">{</span>      <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Error - unable to allocate required memory\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">else</span>   <span class="token punctuation">{</span>      <span class="token function">strcat</span><span class="token punctuation">(</span> description<span class="token punctuation">,</span> <span class="token string">"She is in class 10th"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Name = %s\n"</span><span class="token punctuation">,</span> name <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Description: %s\n"</span><span class="token punctuation">,</span> description <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* 使用 free() 函数释放内存 */</span>   <span class="token function">free</span><span class="token punctuation">(</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Name <span class="token operator">=</span> Zara AliDescription: Zara ali a DPS student.She is <span class="token keyword">in</span> class 10th<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>您可以尝试一下不重新分配额外的内存，strcat() 函数会生成一个错误，因为存储 description 时可用的内存不足。</p><h1 id="C-命令行参数"><a href="#C-命令行参数" class="headerlink" title="C 命令行参数"></a>C 命令行参数</h1><p>执行程序时，可以从命令行传值给 C 程序。这些值被称为<strong>命令行参数</strong>，它们对程序很重要，特别是当您想从外部控制程序，而不是在代码内对这些值进行硬编码时，就显得尤为重要了。</p><p>命令行参数是使用 main() 函数参数来处理的，其中，<strong>argc</strong> 是指传入参数的个数，<strong>argv[]</strong> 是一个指针数组，指向传递给程序的每个参数。下面是一个简单的实例，检查命令行是否有提供参数，并根据参数执行相应的动作：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>   <span class="token keyword">if</span><span class="token punctuation">(</span> argc <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">)</span>   <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The argument supplied is %s\n"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> argc <span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token punctuation">)</span>   <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Too many arguments supplied.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">else</span>   <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"One argument expected.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用一个参数，编译并执行上面的代码，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$./a.out testingThe argument supplied is testing<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用两个参数，编译并执行上面的代码，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$./a.out testing1 testing2Too many arguments supplied.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>不传任何参数，编译并执行上面的代码，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$./a.outOne argument expected<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>应当指出的是，<strong>argv[0]</strong> 存储程序的名称，<strong>argv[1]</strong> 是一个指向第一个命令行参数的指针，<em>argv[n] 是最后一个参数。如果没有提供任何参数，argc 将为 1，否则，如果传递了一个参数，<em>*argc</em></em> 将被设置为 2。</p><p>多个命令行参数之间用空格分隔，但是如果参数本身带有空格，那么传递参数的时候应把参数放置在双引号 “” 或单引号 ‘’ 内部。让我们重新编写上面的实例，有一个空间，那么你可以通过这样的观点，把它们放在双引号或单引号””””。让我们重新编写上面的实例，向程序传递一个放置在双引号内部的命令行参数：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Program name %s\n"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> argc <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">)</span>   <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The argument supplied is %s\n"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> argc <span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token punctuation">)</span>   <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Too many arguments supplied.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">else</span>   <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"One argument expected.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用一个用空格分隔的简单参数，参数括在双引号中，编译并执行上面的代码，它会产生下列结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$./a.out <span class="token string">"testing1 testing2"</span>Progranm name ./a.outThe argument supplied is testing1 testing2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程语言 </tag>
            
            <tag> C语言程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言程序设计</title>
      <link href="/posts/ba003d1c/"/>
      <url>/posts/ba003d1c/</url>
      
        <content type="html"><![CDATA[<h1 id="学习计算机语言需要了解的知识"><a href="#学习计算机语言需要了解的知识" class="headerlink" title="学习计算机语言需要了解的知识"></a>学习计算机语言需要了解的知识</h1><ul><li>数字电路与逻辑电路（布尔逻辑、布尔代数）</li><li>内存电路逻辑结构与读写操作</li><li>计算机中数据的表示和运算</li><li>堆和栈</li></ul><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><h3 id="什么是编码"><a href="#什么是编码" class="headerlink" title="什么是编码"></a>什么是编码</h3><blockquote><p>推荐书籍：《编码：隐匿在计算机软硬件背后的语言》（美）佩措</p></blockquote><p>编码是信息从一种形式或格式转换为另一种形式的过程。计算机只能识别机器语言（0&amp;1），与人类的自然语言不同，但为了使其能够互通，我们就需要通过编码来实现。用通俗的话来讲，计算机只能处理一串串逻辑控制信号（01组合），我们将特定的01组合（如：<code>0100 0001</code>）与自然语言（如：<code>A</code>）对应起来，这就构成了编码形式（如：<code>ASCII编码</code>）。</p><h3 id="电脑为什么会出现乱码现象？"><a href="#电脑为什么会出现乱码现象？" class="headerlink" title="电脑为什么会出现乱码现象？"></a>电脑为什么会出现乱码现象？</h3><blockquote><p>乱码是因为不同的工作环境编码不一致造成的（不同的编码形式包含的字符范围不一样）</p></blockquote><ul><li><p>常见的一些编码形式：</p><ul><li><p>ASCII编码</p></li><li><p>UTF-8编码</p></li><li><p>UTF-16编码</p></li><li><p>gbk编码</p></li><li><p>gb2312编码(在以往公文中用的比较多，所以有些体制内查阅以前的公文需要安装该编码字体，防止乱码)</p></li><li><p>Unicode编码</p></li></ul></li></ul><p>​                                                                                                                    <strong>ASCII码对照表</strong></p><div class="table-container"><table><thead><tr><th>Bin(二进制)</th><th>Oct(八进制)</th><th>Dec(十进制)</th><th>Hex</th><th>(十六进制)缩写/字符</th><th>解释</th></tr></thead><tbody><tr><td>0000 0000</td><td>0000</td><td>0</td><td>0x00</td><td>NUL(null)</td><td>空字符\0</td></tr><tr><td>0000 0001</td><td>0001</td><td>1</td><td>0x01</td><td>SOH(start of headline)</td><td>标题开始</td></tr><tr><td>0000 0010</td><td>0002</td><td>2</td><td>0x02</td><td>STX (start of text)</td><td>正文开始</td></tr><tr><td>0000 0011</td><td>0003</td><td>3</td><td>0x03</td><td>ETX (end of text)</td><td>正文结束</td></tr><tr><td>0000 0100</td><td>0004</td><td>4</td><td>0x04</td><td>EOT (end of transmission)</td><td>传输结束</td></tr><tr><td>0000 0101</td><td>0005</td><td>5</td><td>0x05</td><td>ENQ (enquiry)</td><td>请求</td></tr><tr><td>0000 0110</td><td>0006</td><td>6</td><td>0x06</td><td>ACK (acknowledge)</td><td>收到通知</td></tr><tr><td>0000 0111</td><td>0007</td><td>7</td><td>0x07</td><td>BEL (bell)</td><td>响铃\a</td></tr><tr><td>0000 1000</td><td>0010</td><td>8</td><td>0x08</td><td>BS (backspace)</td><td>退格</td></tr><tr><td>0000 1001</td><td>0011</td><td>9</td><td>0x09</td><td>HT (horizontal tab)</td><td>水平制表符\t</td></tr><tr><td>0000 1010</td><td>0012</td><td>10</td><td>0x0A</td><td>LF (NL line feed, new line)</td><td>换行键\n</td></tr><tr><td>0000 1011</td><td>0013</td><td>11</td><td>0x0B</td><td>VT (vertical tab)</td><td>垂直制表符</td></tr><tr><td>0000 1100</td><td>0014</td><td>12</td><td>0x0C</td><td>FF (NP form feed, new page)</td><td>换页键\f</td></tr><tr><td>0000 1101</td><td>0015</td><td>13</td><td>0x0D</td><td>CR (carriage return)</td><td>回车键\r</td></tr><tr><td>0000 1110</td><td>0016</td><td>14</td><td>0x0E</td><td>SO (shift out)</td><td>不用切换</td></tr><tr><td>0000 1111</td><td>0017</td><td>15</td><td>0x0F</td><td>SI (shift in)</td><td>启用切换</td></tr><tr><td>0001 0000</td><td>0020</td><td>16</td><td>0x10</td><td>DLE (data link escape)</td><td>数据链路转义</td></tr><tr><td>0001 0001</td><td>0021</td><td>17</td><td>0x11</td><td>DC1 (device control 1)</td><td>设备控制1</td></tr><tr><td>0001 0010</td><td>0022</td><td>18</td><td>0x12</td><td>DC2 (device control 2)</td><td>设备控制2</td></tr><tr><td>0001 0011</td><td>0023</td><td>19</td><td>0x13</td><td>DC3 (device control 3)</td><td>设备控制3</td></tr><tr><td>0001 0100</td><td>0024</td><td>20</td><td>0x14</td><td>DC4 (device control 4)</td><td>设备控制4</td></tr><tr><td>0001 0101</td><td>0025</td><td>21</td><td>0x15</td><td>NAK (negative acknowledge)</td><td>拒绝接收</td></tr><tr><td>0001 0110</td><td>0026</td><td>22</td><td>0x16</td><td>SYN (synchronous idle)</td><td>同步空闲</td></tr><tr><td>0001 0111</td><td>0027</td><td>23</td><td>0x17</td><td>ETB (end of trans. block)</td><td>结束传输块</td></tr><tr><td>0001 1000</td><td>0030</td><td>24</td><td>0x18</td><td>CAN (cancel)</td><td>取消</td></tr><tr><td>0001 1001</td><td>0031</td><td>25</td><td>0x19</td><td>EM (end of medium)</td><td>媒介结束</td></tr><tr><td>0001 1010</td><td>0032</td><td>26</td><td>0x1A</td><td>SUB (substitute)</td><td>代替</td></tr><tr><td>0001 1011</td><td>0033</td><td>27</td><td>0x1B</td><td>ESC (escape)</td><td>换码(溢出)</td></tr><tr><td>0001 1100</td><td>0034</td><td>28</td><td>0x1C</td><td>FS (file separator)</td><td>文件分隔符</td></tr><tr><td>0001 1101</td><td>0035</td><td>29</td><td>0x1D</td><td>GS (group separator)</td><td>分组符</td></tr><tr><td>0001 1110</td><td>0036</td><td>30</td><td>0x1E</td><td>RS (record separator)</td><td>记录分隔符</td></tr><tr><td>0001 1111</td><td>0037</td><td>31</td><td>0x1F</td><td>US (unit separator)</td><td>单元分隔符</td></tr><tr><td>0010 0000</td><td>0040</td><td>32</td><td>0x20</td><td>(space)</td><td>空格</td></tr><tr><td>0010 0001</td><td>0041</td><td>33</td><td>0x21</td><td>!</td><td>叹号</td></tr><tr><td>0010 0010</td><td>0042</td><td>34</td><td>0x22</td><td>“</td><td>双引号\\”</td></tr><tr><td>0010 0011</td><td>0043</td><td>35</td><td>0x23</td><td>#</td><td>井号</td></tr><tr><td>0010 0100</td><td>0044</td><td>36</td><td>0x24</td><td>$</td><td>美元符</td></tr><tr><td>0010 0101</td><td>0045</td><td>37</td><td>0x25</td><td>%</td><td>百分号</td></tr><tr><td>0010 0110</td><td>0046</td><td>38</td><td>0x26</td><td>&amp;</td><td>和号</td></tr><tr><td>0010 0111</td><td>0047</td><td>39</td><td>0x27</td><td>‘</td><td>闭单引号\\’</td></tr><tr><td>0010 1000</td><td>0050</td><td>40</td><td>0x28</td><td>(</td><td>开括号</td></tr><tr><td>0010 1001</td><td>0051</td><td>41</td><td>0x29</td><td>)</td><td>闭括号</td></tr><tr><td>0010 1010</td><td>0052</td><td>42</td><td>0x2A</td><td>*</td><td>星号</td></tr><tr><td>0010 1011</td><td>0053</td><td>43</td><td>0x2B</td><td>+</td><td>加号</td></tr><tr><td>0010 1100</td><td>0054</td><td>44</td><td>0x2C</td><td>,</td><td>逗号</td></tr><tr><td>0010 1101</td><td>0055</td><td>45</td><td>0x2D</td><td>-</td><td>减号/破折号</td></tr><tr><td>0010 1110</td><td>0056</td><td>46</td><td>0x2E</td><td>.</td><td>句号</td></tr><tr><td>0010 1111</td><td>0057</td><td>47</td><td>0x2F</td><td>/</td><td>斜杠</td></tr><tr><td>0011 0000</td><td>0060</td><td>48</td><td>0x30</td><td>0</td><td>字符0</td></tr><tr><td>0011 0001</td><td>0061</td><td>49</td><td>0x31</td><td>1</td><td>字符1</td></tr><tr><td>0011 0010</td><td>0062</td><td>50</td><td>0x32</td><td>2</td><td>字符2</td></tr><tr><td>0011 0011</td><td>0063</td><td>51</td><td>0x33</td><td>3</td><td>字符3</td></tr><tr><td>0011 0100</td><td>0064</td><td>52</td><td>0x34</td><td>4</td><td>字符4</td></tr><tr><td>0011 0101</td><td>0065</td><td>53</td><td>0x35</td><td>5</td><td>字符5</td></tr><tr><td>0011 0110</td><td>0066</td><td>54</td><td>0x36</td><td>6</td><td>字符6</td></tr><tr><td>0011 0111</td><td>0067</td><td>55</td><td>0x37</td><td>7</td><td>字符7</td></tr><tr><td>0011 1000</td><td>0070</td><td>56</td><td>0x38</td><td>8</td><td>字符8</td></tr><tr><td>0011 1001</td><td>0071</td><td>57</td><td>0x39</td><td>9</td><td>字符9</td></tr><tr><td>0011 1010</td><td>0072</td><td>58</td><td>0x3A</td><td>:</td><td>冒号</td></tr><tr><td>0011 1011</td><td>0073</td><td>59</td><td>0x3B</td><td>;</td><td>分号</td></tr><tr><td>0011 1100</td><td>0074</td><td>60</td><td>0x3C</td><td>&lt;</td><td>小于</td></tr><tr><td>0011 1101</td><td>0075</td><td>61</td><td>0x3D</td><td>=</td><td>等号</td></tr><tr><td>0011 1110</td><td>0076</td><td>62</td><td>0x3E</td><td>&gt;</td><td>大于</td></tr><tr><td>0011 1111</td><td>0077</td><td>63</td><td>0x3F</td><td>?</td><td>问号</td></tr><tr><td>0100 0000</td><td>0100</td><td>64</td><td>0x40</td><td>@</td><td>电子邮件符号</td></tr><tr><td>0100 0001</td><td>0101</td><td>65</td><td>0x41</td><td>A</td><td>大写字母A</td></tr><tr><td>0100 0010</td><td>0102</td><td>66</td><td>0x42</td><td>B</td><td>大写字母B</td></tr><tr><td>0100 0011</td><td>0103</td><td>67</td><td>0x43</td><td>C</td><td>大写字母C</td></tr><tr><td>0100 0100</td><td>0104</td><td>68</td><td>0x44</td><td>D</td><td>大写字母D</td></tr><tr><td>0100 0101</td><td>0105</td><td>69</td><td>0x45</td><td>E</td><td>大写字母E</td></tr><tr><td>0100 0110</td><td>0106</td><td>70</td><td>0x46</td><td>F</td><td>大写字母F</td></tr><tr><td>0100 0111</td><td>0107</td><td>71</td><td>0x47</td><td>G</td><td>大写字母G</td></tr><tr><td>0100 1000</td><td>0110</td><td>72</td><td>0x48</td><td>H</td><td>大写字母H</td></tr><tr><td>0100 1001</td><td>0111</td><td>73</td><td>0x49</td><td>I</td><td>大写字母I</td></tr><tr><td>01001010</td><td>0112</td><td>74</td><td>0x4A</td><td>J</td><td>大写字母J</td></tr><tr><td>0100 1011</td><td>0113</td><td>75</td><td>0x4B</td><td>K</td><td>大写字母K</td></tr><tr><td>0100 1100</td><td>0114</td><td>76</td><td>0x4C</td><td>L</td><td>大写字母L</td></tr><tr><td>0100 1101</td><td>0115</td><td>77</td><td>0x4D</td><td>M</td><td>大写字母M</td></tr><tr><td>0100 1110</td><td>0116</td><td>78</td><td>0x4E</td><td>N</td><td>大写字母N</td></tr><tr><td>0100 1111</td><td>0117</td><td>79</td><td>0x4F</td><td>O</td><td>大写字母O</td></tr><tr><td>0101 0000</td><td>0120</td><td>80</td><td>0x50</td><td>P</td><td>大写字母P</td></tr><tr><td>0101 0001</td><td>0121</td><td>81</td><td>0x51</td><td>Q</td><td>大写字母Q</td></tr><tr><td>0101 0010</td><td>0122</td><td>82</td><td>0x52</td><td>R</td><td>大写字母R</td></tr><tr><td>0101 0011</td><td>0123</td><td>83</td><td>0x53</td><td>S</td><td>大写字母S</td></tr><tr><td>0101 0100</td><td>0124</td><td>84</td><td>0x54</td><td>T</td><td>大写字母T</td></tr><tr><td>0101 0101</td><td>0125</td><td>85</td><td>0x55</td><td>U</td><td>大写字母U</td></tr><tr><td>0101 0110</td><td>0126</td><td>86</td><td>0x56</td><td>V</td><td>大写字母V</td></tr><tr><td>0101 0111</td><td>0127</td><td>87</td><td>0x57</td><td>W</td><td>大写字母W</td></tr><tr><td>0101 1000</td><td>0130</td><td>88</td><td>0x58</td><td>X</td><td>大写字母X</td></tr><tr><td>0101 1001</td><td>0131</td><td>89</td><td>0x59</td><td>Y</td><td>大写字母Y</td></tr><tr><td>0101 1010</td><td>0132</td><td>90</td><td>0x5A</td><td>Z</td><td>大写字母Z</td></tr><tr><td>0101 1011</td><td>0133</td><td>91</td><td>0x5B</td><td>[</td><td>开方括号</td></tr><tr><td>0101 1100</td><td>0134</td><td>92</td><td>0x5C</td><td>\</td><td>反斜杠\\\</td></tr><tr><td>0101 1101</td><td>0135</td><td>93</td><td>0x5D</td><td>]</td><td>闭方括号</td></tr><tr><td>0101 1110</td><td>0136</td><td>94</td><td>0x5E</td><td>^</td><td>脱字符</td></tr><tr><td>0101 1111</td><td>0137</td><td>95</td><td>0x5F</td><td>_</td><td>下划线</td></tr><tr><td>0110 0000</td><td>0140</td><td>96</td><td>0x60</td><td>`</td><td>开单引号</td></tr><tr><td>0110 0001</td><td>0141</td><td>97</td><td>0x61</td><td>a</td><td>小写字母a</td></tr><tr><td>0110 0010</td><td>0142</td><td>98</td><td>0x62</td><td>b</td><td>小写字母b</td></tr><tr><td>0110 0011</td><td>0143</td><td>99</td><td>0x63</td><td>c</td><td>小写字母c</td></tr><tr><td>0110 0100</td><td>0144</td><td>100</td><td>0x64</td><td>d</td><td>小写字母d</td></tr><tr><td>0110 0101</td><td>0145</td><td>101</td><td>0x65</td><td>e</td><td>小写字母e</td></tr><tr><td>0110 0110</td><td>0146</td><td>102</td><td>0x66</td><td>f</td><td>小写字母f</td></tr><tr><td>0110 0111</td><td>0147</td><td>103</td><td>0x67</td><td>g</td><td>小写字母g</td></tr><tr><td>0110 1000</td><td>0150</td><td>104</td><td>0x68</td><td>h</td><td>小写字母h</td></tr><tr><td>0110 1001</td><td>0151</td><td>105</td><td>0x69</td><td>i</td><td>小写字母i</td></tr><tr><td>0110 1010</td><td>0152</td><td>106</td><td>0x6A</td><td>j</td><td>小写字母j</td></tr><tr><td>0110 1011</td><td>0153</td><td>107</td><td>0x6B</td><td>k</td><td>小写字母k</td></tr><tr><td>0110 1100</td><td>0154</td><td>108</td><td>0x6C</td><td>l</td><td>小写字母l</td></tr><tr><td>0110 1101</td><td>0155</td><td>109</td><td>0x6D</td><td>m</td><td>小写字母m</td></tr><tr><td>0110 1110</td><td>0156</td><td>110</td><td>0x6E</td><td>n</td><td>小写字母n</td></tr><tr><td>0110 1111</td><td>0157</td><td>111</td><td>0x6F</td><td>o</td><td>小写字母o</td></tr><tr><td>0111 0000</td><td>0160</td><td>112</td><td>0x70</td><td>p</td><td>小写字母p</td></tr><tr><td>0111 0001</td><td>0161</td><td>113</td><td>0x71</td><td>q</td><td>小写字母q</td></tr><tr><td>0111 0010</td><td>0162</td><td>114</td><td>0x72</td><td>r</td><td>小写字母r</td></tr><tr><td>0111 0011</td><td>0163</td><td>115</td><td>0x73</td><td>s</td><td>小写字母s</td></tr><tr><td>0111 0100</td><td>0164</td><td>116</td><td>0x74</td><td>t</td><td>小写字母t</td></tr><tr><td>0111 0101</td><td>0165</td><td>117</td><td>0x75</td><td>u</td><td>小写字母u</td></tr><tr><td>0111 0110</td><td>0166</td><td>118</td><td>0x76</td><td>v</td><td>小写字母v</td></tr><tr><td>0111 0111</td><td>0167</td><td>119</td><td>0x77</td><td>w</td><td>小写字母w</td></tr><tr><td>0111 1000</td><td>0170</td><td>120</td><td>0x78</td><td>x</td><td>小写字母x</td></tr><tr><td>0111 1001</td><td>0171</td><td>121</td><td>0x79</td><td>y</td><td>小写字母y</td></tr><tr><td>0111 1010</td><td>0172</td><td>122</td><td>0x7A</td><td>z</td><td>小写字母z</td></tr><tr><td>0111 1011</td><td>0173</td><td>123</td><td>0x7B</td><td>{</td><td>开花括号</td></tr><tr><td>0111 1100</td><td>0174</td><td>124</td><td>0x7C</td><td>\</td><td></td><td>垂线</td></tr><tr><td>0111 1101</td><td>0175</td><td>125</td><td>0x7D</td><td>}</td><td>闭花括号</td></tr><tr><td>0111 1110</td><td>0176</td><td>126</td><td>0x7E</td><td>~</td><td>波浪号</td></tr><tr><td>0111 1111</td><td>0177</td><td>127</td><td>0x7F</td><td>DEL (delete)</td><td>删除</td></tr></tbody></table></div><h1 id="C语言基础"><a href="#C语言基础" class="headerlink" title="C语言基础"></a>C语言基础</h1><h2 id="第一个程序helloword"><a href="#第一个程序helloword" class="headerlink" title="第一个程序helloword"></a>第一个程序helloword</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span><span class="token comment">//预处理命令</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token comment">//主函数 函数格式：函数返回值类型(int) 函数名(main())</span><span class="token punctuation">{</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello world!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印helloworld</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//返回值0 说明程序正常退出</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="C语言构成要素"><a href="#C语言构成要素" class="headerlink" title="C语言构成要素"></a>C语言构成要素</h2><h3 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h3><blockquote><p>字符集是构成C语言的基本元素，是组成C语言源程序代码的基本字符。</p></blockquote><ul><li>26个英文字母：<code>A-Z</code>,<code>a-z</code></li><li>数字字符：<code>0-9</code></li><li>特殊字符：<code>空格 ！# % ^ &amp; * _ + = - ~ &lt; &gt; | / \ ' " ; . , () [] {} ? :</code></li></ul><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><blockquote><p>C语言中预定义的单词，规定了它的作用，在程序中有不同的使用目的。构成了C语言的基本操作指令</p></blockquote><div class="table-container"><table><thead><tr><th>ANSI C C89</th><th style="text-align:center">auto</th><th style="text-align:center">break</th><th style="text-align:center">case</th><th style="text-align:center">char</th><th style="text-align:center">const</th><th style="text-align:center">continue</th><th style="text-align:center">default</th><th style="text-align:center">do</th></tr></thead><tbody><tr><td></td><td style="text-align:center">double</td><td style="text-align:center">else</td><td style="text-align:center">enum</td><td style="text-align:center">extern</td><td style="text-align:center">float</td><td style="text-align:center">for</td><td style="text-align:center">goto</td><td style="text-align:center">if</td></tr><tr><td></td><td style="text-align:center">int</td><td style="text-align:center">long</td><td style="text-align:center">register</td><td style="text-align:center">return</td><td style="text-align:center">short</td><td style="text-align:center">signed</td><td style="text-align:center">sizeof</td><td style="text-align:center">static</td></tr><tr><td></td><td style="text-align:center">struct</td><td style="text-align:center">switch</td><td style="text-align:center">typedef</td><td style="text-align:center">union</td><td style="text-align:center">unsigned</td><td style="text-align:center">void</td><td style="text-align:center">volatile</td><td style="text-align:center">while</td></tr><tr><td>C99</td><td style="text-align:center">inline</td><td style="text-align:center">restrict</td><td style="text-align:center">_bool</td><td style="text-align:center">_complex</td><td style="text-align:center">_imaginary</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td>C11</td><td style="text-align:center">_Alignas</td><td style="text-align:center">_Alignof</td><td style="text-align:center">_Atomic</td><td style="text-align:center">_Static_assert</td><td style="text-align:center">_Noreturn</td><td style="text-align:center">_Thread_local</td><td style="text-align:center">_Generic</td></tr></tbody></table></div><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><blockquote><p>用于命名程序处理的数据对象。</p></blockquote><p>标识符的构成规则：</p><ul><li>必须由字母<code>a~z</code> <code>A~Z</code>或下划线<code>_</code>开头。</li><li>后面可以跟随任意的字母、数字或下划线</li><li><strong>区分大小写字母</strong>。例如，num、Num、NUM为3个不同的标识符</li><li>关键字由于在系统中具有特殊用途，不能作为一般的标识符使用。</li></ul><h2 id="C语言的数据类型"><a href="#C语言的数据类型" class="headerlink" title="C语言的数据类型"></a>C语言的数据类型</h2><h3 id="为什么要进行数据分类？"><a href="#为什么要进行数据分类？" class="headerlink" title="为什么要进行数据分类？"></a>为什么要进行数据分类？</h3><p>在程序中，数值、文字、声音、图形等都是作为数据处理的</p><p>因为，数值、文字、声音、图形属于不同的数据类型，在程序处理过程中，不同数据类型处理规则也不一样。例如对整数，可进行加、减、乘、除等运算，但对文字数据进行乘、除运算则毫无意义。数据在计算机中都是以二进制存放的，程序怎么区分数值和文字?所以，在程序中，要将不同数据进行分类，以便能够合适的处理</p><p>也就是说，一个数据在使用之前，程序要知道它是什么样的数据，是文字还是数值，这就产生了数据分类的问题，数据类型的概念也就由此而生</p><h3 id="数据及数据类型的概念"><a href="#数据及数据类型的概念" class="headerlink" title="数据及数据类型的概念"></a>数据及数据类型的概念</h3><p>数据类型：在C语言中，程序能够处理的基本数据对象被划分成一些组，或者说一些集合。属于统一集合的各数据对象具有相同的性质。例如，对它们能够做同样的操作，它们都采用同样的表示形式、编码方式等。程序语言中具有这样特性的数据集合被称为一个类型<br>不同类型的数据，其存储方式不同、系统提供的操作指令也不相同。</p><p><img src="/images/614-C语言程序设计/image-20210311131203287.png" alt="基本数据类型"></p><p><img src="/images/614-C语言程序设计/image-20210311153430240.png" alt="C语言基本数据类型及说明"></p><h3 id="计算机对于不同数据类型的存储方式"><a href="#计算机对于不同数据类型的存储方式" class="headerlink" title="计算机对于不同数据类型的存储方式"></a>计算机对于不同数据类型的存储方式</h3><p><img src="/images/614-C语言程序设计/image-20210311161044951-1624081848971.png" alt="image-20210311161044951"></p><p><img src="/images/614-C语言程序设计/image-20210311161317565.png" alt="image-20210311161317565"></p><ul><li>符号位(Sign) : 0代表正，1代表为负</li><li>指数位（Exponent）:用于存储科学计数法中的指数数据，并且采用移位存储</li><li>尾数部分（Mantissa）：尾数部分</li></ul><h4 id="计算机字符型数据的存储方式-ASCII码表"><a href="#计算机字符型数据的存储方式-ASCII码表" class="headerlink" title="计算机字符型数据的存储方式-ASCII码表"></a>计算机字符型数据的存储方式-ASCII码表</h4><ul><li>字符：ASCII码表</li><li>字符串：ASCII码表+结束标志符\0（\0是ASCII码表中的空字符）</li></ul><h2 id="程序处理的数据对象——常量、变量"><a href="#程序处理的数据对象——常量、变量" class="headerlink" title="程序处理的数据对象——常量、变量"></a>程序处理的数据对象——常量、变量</h2><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><ol><li>整型常量(定点型)</li></ol><div class="table-container"><table><thead><tr><th>十进制整数</th><th>10、-127、0、+5</th></tr></thead><tbody><tr><td>八进制整数</td><td>0123</td></tr><tr><td>十六进制整数</td><td>0x12</td></tr><tr><td>长整数</td><td>12L、-100L、0x12L</td></tr></tbody></table></div><ol><li><p>实型常量(浮点型)</p><ul><li>一般形式         0.383    //浮点位置不固定</li><li>指数形式         1.75E+1  //浮点位置固定</li></ul></li><li><p>字符常量——对应ASCII的数值</p></li><li><p>转义字符——对应ASCII的数值</p><ul><li>| \xhh | 1~2位十六进制所代表的的字符 | 对应字符的ASCII |<br>| —— | —————————————- | ———————- |<br>| \ddd | 1~3位八进制所代表的的字符   | 对应字符的ASCII |</li></ul></li><li><p>字符串常量</p><ul><li><p>用一对双引号括起来的零个或多个字符的序列。如：”$#340000”、”BEIJING”、” “(双引号中空格)、””(双引号什么都没有)、”\a”(双引号中有一个转义字符)</p></li><li><p>字符串常量在内存存储时，系统自动在每个字符串常量的尾部加一个字符串结束标志字符’\0’。因此，长度为n个字符的字符串常量，在内存中要占用n+1个字符的空间。</p></li><li><p>如：”good”，4个字符+1个结束标志字符\0</p><ul><li>|     字符      |  g   |  o   |  o   |  d   |  \0  |<br>| :—————-: | :—: | :—: | :—: | :—: | :—: |<br>| ASCII码对应值 | 103  | 111  | 111  | 100  |  \0  |</li></ul></li></ul></li><li><p>符号常量</p><ul><li><p>用标识符命名常量</p></li><li><p>习惯上用大写字母表示符号常量，用小写字母表示变量名、数组名等。</p></li><li><p>```c</p><h1 id="define-符号常量名-常量-define-是预处理命令，不用-结尾"><a href="#define-符号常量名-常量-define-是预处理命令，不用-结尾" class="headerlink" title="define 符号常量名 常量        //#define 是预处理命令，不用;结尾"></a>define 符号常量名 常量        //#define 是预处理命令，不用;结尾</h1><h1 id="define-PI-3-1415926"><a href="#define-PI-3-1415926" class="headerlink" title="define PI 3.1415926"></a>define PI 3.1415926</h1><pre class="line-numbers language-none"><code class="language-none">### 变量#### 变量的理解变量是程序处理的数据对象之一，在使用变量时，要先声明变量的**数据类型**和**变量名**，在声明变量的同时，编译器会为变量分配存储单元，以存放数据。故变量包含以下4方面的含义：|                |                      |              |                                                        || :------------: | :------------------: | :----------: | :----------------------------------------------------: ||   变量的名字   |        标识符        |    如：a     |     用标识符命名，提供了在程序中访问变量的基本途径     ||   变量的类型   |     数据类型type     | int、float等 | 规定了变量的可能使用方式、可能存储的值或可能使用的操作 || 变量的存储位置 | 变量存储单元的首地址 |              |              变量在计算机里的具体存储位置              ||  变量存储的值  |        value         |  如：54546   |                                                        |&gt; 例如：整型变量a（int a）在gcc编译器中占4 byte的内存空间（数据和地址为假设）| 序号      | 1    | 2    | 3    | 4    | 5    | 6    | 7    | 8    | 9    | 10   | 11   | 12   | 13   | 14   | 15   | 16   | 17   | 18   | 19   | 20   | 21   | 22   | 23   | 24   | 25   | 26   | 27   | 28   | 29   | 30   | 31   | 32   || --------- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- || 变量名：a | 1    | 0    | 0    | 1    | 0    | 1    | 0    | 0    | 1    | 0    | 1    | 0    | 0    | 1    | 0    | 1    | 0    | 0    | 1    | 0    | 1    | 0    | 0    | 1    | 0    | 1    | 0    | 0    | 1    | 0    | 1    | 1    || 位地址    | 123  | 124  | 125  | 126  | 127  | 128  | 129  | 130  | 131  | 132  | 133  | 134  | 135  | 136  | 137  | 138  | 139  | 140  | 141  | 142  | 143  | 144  | 145  | 146  | 147  | 148  | 149  | 150  | 151  | 152  | 153  | 154  || 字节地址  | 123  |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |分析以下代码：源代码表示将任意输入的十进制整型数据转化为二进制输出```c//将任意输入的十进制整型数据转化为二进制输出#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;int main(){  int a;//声明变量a，数据类型为int，名称为a  int b;  char c[100];  scanf("%d",&amp;a);//键盘输入数据，使用&amp;取a的首地址，将键盘输入的数据存储在变量a的存储单元  itoa(a,c,2);  b=sizeof(a);  printf("a的二进制数为：%s\n",c);  printf("整型变量a的字节长度为：%d",b);}//输入165114156416546后的输出结果/*165114156416546a的二进制数为：10100010101000111111111000100010整型变量a的字节长度为：4*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><h4 id="变量的类型"><a href="#变量的类型" class="headerlink" title="变量的类型"></a>变量的类型</h4><ol><li>整型变量</li><li>实型变量</li><li>字符型变量</li></ol><div class="table-container"><table><thead><tr><th style="text-align:left">变量类型</th><th>关键字</th><th>变量声明语句</th></tr></thead><tbody><tr><td style="text-align:left">整型变量</td><td>int</td><td>int a,b,c;</td></tr><tr><td style="text-align:left">有符号整型变量</td><td>signed int</td><td>signed int a,b,c;</td></tr><tr><td style="text-align:left">无符号整型变量</td><td>unsigned int</td><td>unsigned int a,b,c;</td></tr><tr><td style="text-align:left">长整型变量</td><td>long int</td><td>long int a,b,c;</td></tr><tr><td style="text-align:left">短整型变量</td><td>short int</td><td>short int a,b,c;</td></tr><tr><td style="text-align:left">单精度实型变量</td><td>float</td><td>float a,b,c;</td></tr><tr><td style="text-align:left">双精度实型变量</td><td>double</td><td>double a,b,c;</td></tr><tr><td style="text-align:left">字符型变量</td><td>char</td><td>char a,b,c;</td></tr></tbody></table></div><p>注意：分配给字符型变量的存储单元只有一个字节，用于存放一个字符。 字符变量中不能存放字符串。 字符型变量存放一个字符，实际上是存放字符的ASCII码，是一个整数，其取值范围是-128~127，可以当作小型变量</p><h4 id="变量的初始化"><a href="#变量的初始化" class="headerlink" title="变量的初始化"></a>变量的初始化</h4><p>初始化是指给变量赋初始值。</p><p>在C语言中，声明变量时，C语言不会自动对变量进行初始化。如果一个变量没有被初始化，则变量中存放的就是内存中的随机值。由于变量没有初始化而产生的的错误很难检查，变量声明时可同时对变量进行初始化。</p><p>我们通过代码来观察变量的声明时值得变化：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"初始化前：a=%d,b=%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化前，只声明了变量a和b，确定了变量的类型和名称，分配了存储空间，未对其赋值但存放了随机值0和16</span>  a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//初始化赋值a</span>  b<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">//初始化赋值b</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"初始化后：a=%d，b=%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化后，对变量进行了赋值，存放初始化的值10,20</span><span class="token punctuation">}</span><span class="token comment">//运行结果</span><span class="token comment">//初始化前：a=0,b=16</span><span class="token comment">//初始化后：a=10，b=20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="运算符与表达式"><a href="#运算符与表达式" class="headerlink" title="运算符与表达式"></a>运算符与表达式</h2><p>运算符的种类与功能</p><p>运算符的优先级</p><h3 id="混合运算中的类型转换"><a href="#混合运算中的类型转换" class="headerlink" title="混合运算中的类型转换"></a>混合运算中的类型转换</h3><p>自动类型转换</p><p>强制类型转换</p><h3 id="数据输入与输出"><a href="#数据输入与输出" class="headerlink" title="数据输入与输出"></a>数据输入与输出</h3><p>格式化输出函数printf（）</p><h3 id="取址运算符-amp-与取值运算符"><a href="#取址运算符-amp-与取值运算符" class="headerlink" title="取址运算符&amp;与取值运算符*"></a>取址运算符&amp;与取值运算符*</h3><h1 id="程序的组织结构"><a href="#程序的组织结构" class="headerlink" title="程序的组织结构"></a>程序的组织结构</h1><h2 id="什么是结构化编程-为什么要结构化编程"><a href="#什么是结构化编程-为什么要结构化编程" class="headerlink" title="什么是结构化编程,为什么要结构化编程"></a>什么是结构化编程,为什么要结构化编程</h2><h2 id="顺序结构-往下按顺序执行语句"><a href="#顺序结构-往下按顺序执行语句" class="headerlink" title="顺序结构-往下按顺序执行语句"></a>顺序结构-往下按顺序执行语句</h2><h2 id="分支结构-判断、选择"><a href="#分支结构-判断、选择" class="headerlink" title="分支结构-判断、选择"></a>分支结构-判断、选择</h2><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><h4 id="if···else语句"><a href="#if···else语句" class="headerlink" title="if···else语句"></a>if···else语句</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span>表达式<span class="token string">"真"</span><span class="token punctuation">)</span>  语句块<span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">else</span>  语句块<span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-flow" data-language="flow"><code class="language-flow"><span class="token operator">%</span><span class="token operator">%</span> 定义变量<span class="token operator">%</span><span class="token operator">%</span> 流程图绘制op1<span class="token operator">=&gt;</span>operation<span class="token operator">:</span> <span class="token keyword">if</span>前面的语句cond<span class="token operator">=&gt;</span>condition<span class="token operator">:</span> 表达式真假<span class="token operator">?</span>para1<span class="token operator">=&gt;</span>parallel<span class="token operator">:</span> 执行语句块<span class="token number">1</span>para2<span class="token operator">=&gt;</span>parallel<span class="token operator">:</span> 执行语句块<span class="token number">2</span>op2<span class="token operator">=&gt;</span>operation<span class="token operator">:</span> 执行<span class="token keyword">if</span>语句块后面的语句op1<span class="token operator">-</span><span class="token operator">&gt;</span>cond<span class="token function">cond</span><span class="token punctuation">(</span>yes<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">para1</span><span class="token punctuation">(</span>path1<span class="token punctuation">,</span>bottom<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span>op2<span class="token function">cond</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">para2</span><span class="token punctuation">(</span>path2<span class="token punctuation">,</span>bottom<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span>op2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="if语句的两种变形"><a href="#if语句的两种变形" class="headerlink" title="if语句的两种变形"></a>if语句的两种变形</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//1.省略else语句</span><span class="token keyword">if</span><span class="token punctuation">(</span>表达式<span class="token string">"真"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  语句块<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-flow" data-language="flow"><code class="language-flow"><span class="token operator">%</span><span class="token operator">%</span> 定义变量<span class="token operator">%</span><span class="token operator">%</span> 流程图绘制op1<span class="token operator">=&gt;</span>operation<span class="token operator">:</span> <span class="token keyword">if</span>前面的语句cond<span class="token operator">=&gt;</span>condition<span class="token operator">:</span> 表达式真假<span class="token operator">?</span>para1<span class="token operator">=&gt;</span>parallel<span class="token operator">:</span> 执行语句块<span class="token number">1</span>op2<span class="token operator">=&gt;</span>operation<span class="token operator">:</span> 执行<span class="token keyword">if</span>语句块后面的语句op1<span class="token operator">-</span><span class="token operator">&gt;</span>cond<span class="token function">cond</span><span class="token punctuation">(</span>yes<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">para1</span><span class="token punctuation">(</span>path1<span class="token punctuation">,</span>bottom<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span>op2<span class="token function">cond</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span>op2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//2.增加else if语句</span><span class="token keyword">if</span><span class="token punctuation">(</span>表达式<span class="token number">1</span><span class="token string">"真"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  语句块<span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>表达式<span class="token number">2</span><span class="token string">"真"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  语句块<span class="token number">2</span><span class="token punctuation">}</span>···<span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>表达式m<span class="token string">"真"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  语句块m<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>  语句块n<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-flow" data-language="flow"><code class="language-flow"><span class="token operator">%</span><span class="token operator">%</span> 定义变量<span class="token operator">%</span><span class="token operator">%</span> 流程图绘制op1<span class="token operator">=&gt;</span>operation<span class="token operator">:</span> <span class="token keyword">if</span>前面的语句cond1<span class="token operator">=&gt;</span>condition<span class="token operator">:</span> 表达式<span class="token number">1</span>真假<span class="token operator">?</span>cond2<span class="token operator">=&gt;</span>condition<span class="token operator">:</span> 表达式<span class="token number">2</span>真假<span class="token operator">?</span>cond3<span class="token operator">=&gt;</span>condition<span class="token operator">:</span> 表达式m真假<span class="token operator">?</span>para1<span class="token operator">=&gt;</span>parallel<span class="token operator">:</span> 执行语句块<span class="token number">1</span>para2<span class="token operator">=&gt;</span>parallel<span class="token operator">:</span> 执行语句块<span class="token number">2</span>para3<span class="token operator">=&gt;</span>parallel<span class="token operator">:</span> 执行语句块mpara4<span class="token operator">=&gt;</span>parallel<span class="token operator">:</span> 执行语句块nop2<span class="token operator">=&gt;</span>operation<span class="token operator">:</span> 执行<span class="token keyword">if</span>语句块后面的语句op1<span class="token operator">-</span><span class="token operator">&gt;</span>cond1<span class="token function">cond1</span><span class="token punctuation">(</span>yes<span class="token punctuation">,</span>bottom<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">para1</span><span class="token punctuation">(</span>path1<span class="token punctuation">,</span>bottom<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span>op2<span class="token function">cond1</span><span class="token punctuation">(</span>no<span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">cond2</span><span class="token punctuation">(</span>yes<span class="token punctuation">,</span>bottom<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">para2</span><span class="token punctuation">(</span>path1<span class="token punctuation">,</span>bottom<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span>op2<span class="token function">cond2</span><span class="token punctuation">(</span>no<span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">cond3</span><span class="token punctuation">(</span>yes<span class="token punctuation">,</span>bottom<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">para3</span><span class="token punctuation">(</span>path1<span class="token punctuation">,</span>bottom<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span>op2<span class="token function">cond3</span><span class="token punctuation">(</span>no<span class="token punctuation">,</span>bottom<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">para4</span><span class="token punctuation">(</span>path1<span class="token punctuation">,</span>bottom<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span>op2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="if语句的嵌套"><a href="#if语句的嵌套" class="headerlink" title="if语句的嵌套"></a>if语句的嵌套</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span>逻辑表达式<span class="token number">1</span><span class="token string">"真"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  语句块<span class="token number">1</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>逻辑表达式<span class="token number">1</span><span class="token string">"真"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  语句块<span class="token number">2</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>  语句块<span class="token number">3</span><span class="token punctuation">}</span>  语句块<span class="token number">4</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>  语句块<span class="token number">5</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-flow" data-language="flow"><code class="language-flow"><span class="token operator">%</span><span class="token operator">%</span> 定义变量<span class="token operator">%</span><span class="token operator">%</span> 流程图绘制op1<span class="token operator">=&gt;</span>operation<span class="token operator">:</span> <span class="token keyword">if</span>前面的语句cond1<span class="token operator">=&gt;</span>condition<span class="token operator">:</span> 表达式<span class="token number">1</span>真假<span class="token operator">?</span>cond2<span class="token operator">=&gt;</span>condition<span class="token operator">:</span> 表达式<span class="token number">2</span>真假<span class="token operator">?</span>para1<span class="token operator">=&gt;</span>parallel<span class="token operator">:</span> 执行语句块<span class="token number">1</span>para2<span class="token operator">=&gt;</span>parallel<span class="token operator">:</span> 执行语句块<span class="token number">2</span>para3<span class="token operator">=&gt;</span>parallel<span class="token operator">:</span> 执行语句块<span class="token number">3</span>para4<span class="token operator">=&gt;</span>parallel<span class="token operator">:</span> 执行语句块<span class="token number">4</span>para5<span class="token operator">=&gt;</span>parallel<span class="token operator">:</span> 执行语句块<span class="token number">5</span>op2<span class="token operator">=&gt;</span>operation<span class="token operator">:</span> 执行<span class="token keyword">if</span>嵌套语句块后面的语句op1<span class="token operator">-</span><span class="token operator">&gt;</span>cond1<span class="token function">cond1</span><span class="token punctuation">(</span>yes<span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">para1</span><span class="token punctuation">(</span>path1<span class="token punctuation">,</span>bottom<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">cond2</span><span class="token punctuation">(</span>yes<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">para2</span><span class="token punctuation">(</span>path1<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">para4</span><span class="token punctuation">(</span>path1<span class="token punctuation">)</span><span class="token function">cond1</span><span class="token punctuation">(</span>no<span class="token punctuation">,</span>bottom<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">para5</span><span class="token punctuation">(</span>path1<span class="token punctuation">,</span>bottom<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span>op2<span class="token function">cond2</span><span class="token punctuation">(</span>no<span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">para3</span><span class="token punctuation">(</span>path1<span class="token punctuation">,</span>bottom<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">para4</span><span class="token punctuation">(</span>path1<span class="token punctuation">)</span><span class="token function">para4</span><span class="token punctuation">(</span>path1<span class="token punctuation">,</span>left<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">op2</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span>para4@<span class="token operator">&gt;</span><span class="token function">op2</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string-property property">"stroke"</span><span class="token operator">:</span><span class="token string">"Red"</span><span class="token punctuation">,</span><span class="token string-property property">"stroke-width"</span><span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string-property property">"arrow-end"</span><span class="token operator">:</span><span class="token string">"classic-wide-long"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>para5@<span class="token operator">&gt;</span><span class="token function">op2</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string-property property">"stroke"</span><span class="token operator">:</span><span class="token string">"blue"</span><span class="token punctuation">,</span><span class="token string-property property">"stroke-width"</span><span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string-property property">"arrow-end"</span><span class="token operator">:</span><span class="token string">"classic-wide-long"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h3><p>专门处理多路分支的情形</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">switch</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">case</span> 常量表达式<span class="token number">1</span>：语句<span class="token number">1</span>  <span class="token keyword">case</span> 常量表达式<span class="token number">2</span>：语句<span class="token number">2</span>  ···  <span class="token keyword">default</span>：语句N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token comment">//1、switch后面括号内的表达式，只能为char、byte、short、int类型。</span><span class="token comment">//2、当某一个case中的常量表达式与switch后面的表达式相等时，就执行此case后面的语句；若所有的case中的常量表达式的值都没有与表达式的值匹配，就执行default后面的语句</span><span class="token comment">//3、每个case的常量表达式必须互不相同，否则出错。</span><span class="token comment">//4、各个case与default出现的顺序不影响执行结果</span><span class="token comment">//5、执行完一个case语句块，流程控制转移到下case语句继续执行。这时，“case常量表达式”只是起语句标号作用，并不在该处进行条件判断</span><span class="token comment">//6、在执行过程中碰到break语句，程序退出switch结构</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="goto无条件转移语句"><a href="#goto无条件转移语句" class="headerlink" title="goto无条件转移语句"></a>goto无条件转移语句</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">goto</span> 语句标号<span class="token comment">//功能：改变程序执行顺序，无条件转移到语句标号所指定的语句行</span><span class="token comment">//1、语句标号：即某一行语句的名字，一般情况下可省略（也可用于构造分支结构）</span><span class="token comment">//2、在现代程序设计中，要求限制goto语句的使用。因为它不符合结构化程序设计的原则，除非万不得已，不要随便使用它</span><span class="token comment">//3、goto语句可以使程序转向任何地方，使得在跟踪程序流程时发生困难。如果要使用goto语句，最好向前跳转，不要随便向后跳转</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//goto实例</span><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>fs<span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  loop<span class="token operator">:</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>fs<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//语句标号</span>  j<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>fs<span class="token operator">&gt;</span><span class="token number">80</span><span class="token punctuation">)</span>      i<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">)</span>      <span class="token keyword">goto</span> loop<span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"高于80分的人数：%d"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="条件运算符的二选一分支结构"><a href="#条件运算符的二选一分支结构" class="headerlink" title="条件运算符的二选一分支结构"></a>条件运算符的二选一分支结构</h3><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><h3 id="while循环结构"><a href="#while循环结构" class="headerlink" title="while循环结构"></a>while循环结构</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">while</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span><span class="token comment">//while执行分两步。1.先执行表达式。2.在进行判断是否执行循环体，表达式非0为真，o为假。</span><span class="token punctuation">{</span>  循环体；<span class="token punctuation">}</span><span class="token comment">//循环控制结构在循环体前面</span><span class="token comment">//表达式非0，执行循环体，不是“1就执行，0就不执行循环体”</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="do···while循环"><a href="#do···while循环" class="headerlink" title="do···while循环"></a>do···while循环</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">do</span><span class="token punctuation">{</span>  循环体<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//循环控制结构在循环体后面</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span><span class="token punctuation">(</span>表达式<span class="token number">1</span><span class="token punctuation">;</span>表达式<span class="token number">2</span><span class="token punctuation">;</span>表达式<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  循环体<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//表达式1用来给循环赋初始值</span><span class="token comment">//表达式2为循环的控制表达式</span><span class="token comment">//表达式3用来改变循环条件</span><span class="token comment">//表达式1和表达式3可以省略，但分号不能省略</span><span class="token comment">//当省略表达式1、3，for循环就成了while循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="循环结构的嵌套"><a href="#循环结构的嵌套" class="headerlink" title="循环结构的嵌套"></a>循环结构的嵌套</h3><h3 id="循环体部分有条件执行"><a href="#循环体部分有条件执行" class="headerlink" title="循环体部分有条件执行"></a>循环体部分有条件执行</h3><h2 id="程序的控制语句"><a href="#程序的控制语句" class="headerlink" title="程序的控制语句"></a>程序的控制语句</h2><h3 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//功能：退出所在的switch语句或所在循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="goto无条件转移语句-1"><a href="#goto无条件转移语句-1" class="headerlink" title="goto无条件转移语句"></a>goto无条件转移语句</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">goto</span> 语句标号<span class="token comment">//功能：改变程序执行顺序，无条件转移到语句标号所指定的语句行</span><span class="token comment">//1、语句标号：即某一行语句的名字，一般情况下可省略（也可用于构造分支结构）</span><span class="token comment">//2、在现代程序设计中，要求限制goto语句的使用。因为它不符合结构化程序设计的原则，除非万不得已，不要随便使用它</span><span class="token comment">//3、goto语句可以使程序转向任何地方，使得在跟踪程序流程时发生困难。如果要使用goto语句，最好向前跳转，不要随便向后跳转</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//goto实例</span><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>fs<span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  loop<span class="token operator">:</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>fs<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//语句标号</span>  j<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>fs<span class="token operator">&gt;</span><span class="token number">80</span><span class="token punctuation">)</span>      i<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">)</span>      <span class="token keyword">goto</span> loop<span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"高于80分的人数：%d"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//功能：可将循环体continue语句后面的部分放弃执行    </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="构造类型数据"><a href="#构造类型数据" class="headerlink" title="构造类型数据"></a>构造类型数据</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="什么是数组？为什么要引入数组这个概念？"><a href="#什么是数组？为什么要引入数组这个概念？" class="headerlink" title="什么是数组？为什么要引入数组这个概念？"></a>什么是数组？为什么要引入数组这个概念？</h3><p>数组是一组数据元素的集合，该集合的数据有相同的数据类型和相同的名称。</p><p>存储一批同类型数据的地方</p><ul><li><p>假如定义很多个变量-用普定定义变量的方式定义，导致程序变量数量庞大</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>sdtio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> a1<span class="token punctuation">,</span>a2<span class="token punctuation">,</span>a3<span class="token punctuation">,</span>a4<span class="token punctuation">,</span>a5<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>a50<span class="token punctuation">;</span>  <span class="token keyword">int</span> b1<span class="token punctuation">,</span>b2<span class="token punctuation">,</span>b3<span class="token punctuation">,</span>b4<span class="token punctuation">,</span>b5<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>b50<span class="token punctuation">;</span>  <span class="token keyword">int</span> c1<span class="token punctuation">,</span>c2<span class="token punctuation">,</span>c3<span class="token punctuation">,</span>c4<span class="token punctuation">,</span>c5<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>c50<span class="token punctuation">;</span>  <span class="token keyword">int</span> d1<span class="token punctuation">,</span>d2<span class="token punctuation">,</span>d3<span class="token punctuation">,</span>d4<span class="token punctuation">,</span>d5<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>d50<span class="token punctuation">;</span><span class="token comment">//</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>比较问题是重复大量if结构</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用数组的优点</p></li></ul><h3 id="数组的定义"><a href="#数组的定义" class="headerlink" title="数组的定义"></a>数组的定义</h3><h6 id="数组定义语法"><a href="#数组定义语法" class="headerlink" title="数组定义语法"></a>数组定义语法</h6><p>​        <strong>类型 数组名[元素个数]</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//例如：</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//定义数组变量,分配存储空间</span><span class="token keyword">char</span> b<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">double</span> c<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h6 id="上述几个类型-都占用多少个字节的内存"><a href="#上述几个类型-都占用多少个字节的内存" class="headerlink" title="上述几个类型,都占用多少个字节的内存?"></a>上述几个类型,都占用多少个字节的内存?</h6><ol><li><p>int a[6]定义了6个数据元素,每个元素都是int类型,int’类型占4个字节存储空间</p></li><li><p>char每个元素1个字节</p></li><li><p>double每个元素8个字节</p><p><img src="/images/614-C语言程序设计/数组占用字节数-1623821833461.png" alt=""></p></li></ol><h6 id="访问数组中的元素"><a href="#访问数组中的元素" class="headerlink" title="访问数组中的元素"></a>访问数组中的元素</h6><p>​    <strong>数组名[下标]</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//访问a数组中的第一个元素</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//访问b数组中的第二个元素</span>c<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//访问c数组中的第六个元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>数组中的元素的下标是从0开始计数的</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//创建一个具有五个元素的数组</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//访问第一个元素的下表是0,不是1</span>a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//数组访问越界.报错,因为第五个元素的下标是a[4],访问超过定义数据,即使程序不报错也会容易导致程序出错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h6 id="循环跟数组的关系"><a href="#循环跟数组的关系" class="headerlink" title="循环跟数组的关系"></a>循环跟数组的关系</h6><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//实现一个执行10次的循环,我们通常是这么写</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//对数组作循环操作,初始条件常为:i=0,i&lt;10.因为数组下标从0开始计数</span><span class="token punctuation">{</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token comment">//而不这么写</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token comment">//这是因为我们常常要使用循环来访问数组:</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//举个例子,我们尝试用数组存放班里10位同学的数学成绩,并计算出平均数</span><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">[</span>define<span class="token punctuation">]</span><span class="token punctuation">]</span> NUM <span class="token number">10</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> a<span class="token punctuation">[</span>NUM<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> i<span class="token punctuation">,</span>sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">double</span> ave<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入第%d个同学的数学成绩:"</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  sum<span class="token operator">=</span>sum<span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//sum+=a[i]更好</span>  <span class="token punctuation">}</span>  ave<span class="token operator">=</span>sum<span class="token operator">/</span>NUM<span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d为同学的数学平均成绩为:%.2f"</span><span class="token punctuation">,</span>NUM<span class="token punctuation">,</span>ave<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//平均数应该是浮点数,所以使用%.2f,保留两位小数</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="数组的初始化-定义时赋初始值"><a href="#数组的初始化-定义时赋初始值" class="headerlink" title="数组的初始化-定义时赋初始值"></a>数组的初始化-定义时赋初始值</h6><p>​        数据如果不初始化操作,则在定义数据类型时,只会分配数据存储的首地址,而对数据的值没有任何操作,在调用数据时,就会使用存储空间中保留的脏数据,这并不是我们想要的数据,使用时容易报错.</p><ol><li>将数组中的所有元素初始化为0,可以这么写:</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//事实上这里只有将第一个元素赋值为0</span><span class="token comment">//注意:</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token comment">//这里只有第一个元素赋值为1,后面自动赋值为0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li>如果是赋予不同的值,那么用逗号分隔开即可:</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>还可以只给一部分元素赋值,未被赋值的元素自动初始化为0:</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//表示为前面6个元素赋值,后面4个元素自动自动初始化为0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>有时候还可以偷懒,可以只给出各个元素的值,而不指定数组的长度(因为编译器会根据数值的个数自动判断数组的长度):</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>C99增加了一种特性:指定初始化的元素.这样就可以只对数组中的某些指定元素进行初始化赋值,而未被赋值的元素自动初始化为0:</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="动态数组"><a href="#动态数组" class="headerlink" title="动态数组"></a>动态数组</h6><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> n<span class="token punctuation">,</span>i<span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入字符的个数:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> a<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//这里数组表示字符串,故  添加一位用于存储字符串结束标志符</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请开始输入字符:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//录入数据时前面多接收了一个换行符,用getchar接收不返回</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">'\0'</span><span class="token punctuation">;</span><span class="token comment">//对字符串加入字符串结束标志符</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"你输入的字符串是:%s"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="访问数组边界会不会出错的问题"><a href="#访问数组边界会不会出错的问题" class="headerlink" title="访问数组边界会不会出错的问题"></a>访问数组边界会不会出错的问题</h6><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*超出数组定义边界,定义边界数据*/</span><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//i&lt;=10,会循环第11次,超过数组边界,定义数组和边界数据</span>  <span class="token punctuation">{</span>      a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//程序能执行且输出结果</span><span class="token number">0</span><span class="token number">1</span><span class="token number">2</span><span class="token number">3</span><span class="token number">4</span><span class="token number">5</span><span class="token number">6</span><span class="token number">7</span><span class="token number">8</span><span class="token number">9</span><span class="token number">10</span><span class="token comment">//超过数组边界数据,概该数据在for循环中被定义了</span><span class="token comment">/*超出数组定义边界,定义边界数据*/</span><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//i&lt;=10,会循环第11次,超过数组边界,定义数组和边界数据</span>  <span class="token punctuation">{</span>      a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">111</span><span class="token punctuation">;</span><span class="token comment">//for循环中已经定义边界数据,我们再次重定义a[10]</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//输出结果</span><span class="token number">0</span><span class="token number">1</span><span class="token number">2</span><span class="token number">3</span><span class="token number">4</span><span class="token number">5</span><span class="token number">6</span><span class="token number">7</span><span class="token number">8</span><span class="token number">9</span><span class="token number">111</span><span class="token comment">//重定义成功,但这个数据任然超出数组边界</span><span class="token comment">/*未超出数组定义边界,输出边界数据*/</span><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//i&lt;10,正常初始化数组定义10个元素,循环未超出数组边界</span>  <span class="token punctuation">{</span>      a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//输出时循环11次.,超出数组边界输出元素</span>  <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//输出结果</span><span class="token number">0</span><span class="token number">1</span><span class="token number">2</span><span class="token number">3</span><span class="token number">4</span><span class="token number">5</span><span class="token number">6</span><span class="token number">7</span><span class="token number">8</span><span class="token number">9</span><span class="token number">16</span><span class="token comment">//随机输出的已在存储器中的数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 总结-gcc编译器对越界进行保护,越界行为不会导致程序无法运行</span><span class="token list punctuation">1.</span> a[10]定义了a数组长度为10,但越界初始化数据和打印都可以正常进行<span class="token list punctuation">2.</span> 如果越界定义,越界输出的就是越界定义的数据<span class="token list punctuation">3.</span> 如果未进行越界定义,但是进行越界输出,则输出已在存储器中的保存的数据-随机数据(脏数据)<span class="token title important"><span class="token punctuation">#</span> 在编程时,注意养成良好的习惯,不要使用越界操作</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符数组-C语言是如何存放字符串的呢"><a href="#字符数组-C语言是如何存放字符串的呢" class="headerlink" title="字符数组-C语言是如何存放字符串的呢?"></a>字符数组-C语言是如何存放字符串的呢?</h3><h3 id="两种字符串定义方式"><a href="#两种字符串定义方式" class="headerlink" title="两种字符串定义方式"></a>两种字符串定义方式</h3><h4 id="字符常量定义字符串"><a href="#字符常量定义字符串" class="headerlink" title="字符常量定义字符串"></a>字符常量定义字符串</h4><p>C语言是没有字符串类型的,但是C语言是如何存放和表示字符串的呢?有两种方式:</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> C语言是没有字符串类型的,但是C语言是如何存放和表示字符串的呢?有两种方式:</span><span class="token list punctuation">1.</span> 字符串常量:"songqingxiong","宋清雄","江南and人杰地灵"但是字符串常量有个问题,字符串常量一旦确定下来就没有办法改变了,使用不灵活<span class="token list punctuation">2.</span> 字符数组:使用字符型数组<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="字符数组定义字符串"><a href="#字符数组定义字符串" class="headerlink" title="字符数组定义字符串"></a>字符数组定义字符串</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//使用字符数组定义字符串的方式:</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//1.最复杂的方式</span>  <span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  str1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">'江'</span><span class="token punctuation">;</span>  str1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">'西'</span><span class="token punctuation">;</span>  str1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">'\0'</span><span class="token punctuation">;</span><span class="token comment">//字符型数组表示字符串时,一定要在字符串末尾加上字符串结束标志</span>  <span class="token comment">//2.初始化字符数组的每一个元素</span>  <span class="token keyword">char</span> str2<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token char">'F'</span><span class="token punctuation">,</span><span class="token char">'i'</span><span class="token punctuation">,</span><span class="token char">'s'</span><span class="token punctuation">,</span><span class="token char">'h'</span><span class="token punctuation">,</span><span class="token char">'C'</span><span class="token punctuation">,</span><span class="token char">'\0'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">//3.可以不写元素的个数,因为编译器会自动计算</span>  <span class="token keyword">char</span> str3<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token char">'F'</span><span class="token punctuation">,</span><span class="token char">'i'</span><span class="token punctuation">,</span><span class="token char">'s'</span><span class="token punctuation">,</span><span class="token char">'h'</span><span class="token punctuation">,</span><span class="token char">'C'</span><span class="token punctuation">,</span><span class="token char">'\0'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">//4.使用字符串常量初始化字符数组</span>  <span class="token keyword">char</span> str4<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"FishC"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">//5.使用字符串常量初始化,可以省略大括号</span>  <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"FishC"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串处理函数"><a href="#字符串处理函数" class="headerlink" title="字符串处理函数"></a>字符串处理函数</h3><p>头文件为string.h</p><h5 id="获取字符串长度-strlen"><a href="#获取字符串长度-strlen" class="headerlink" title="获取字符串长度:strlen()"></a>获取字符串长度:strlen()</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>string<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"I love you"</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizrof str=%d\n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"strlen str=%u\n"</span><span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//输出结果</span>sizrof str<span class="token operator">=</span><span class="token number">11</span><span class="token comment">//str字符串占11个字节</span>strlen str<span class="token operator">=</span><span class="token number">10</span><span class="token comment">//str字符串中包含10个字符元素,不包括\0字符串结束标志</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="拷贝字符串-strcpy-和strncpy"><a href="#拷贝字符串-strcpy-和strncpy" class="headerlink" title="拷贝字符串:    strcpy()和strncpy()"></a>拷贝字符串:    strcpy()和strncpy()</h5><h6 id="strcpy"><a href="#strcpy" class="headerlink" title="strcpy()"></a>strcpy()</h6><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//strc py()</span><span class="token comment">/*短字符串覆盖长字符串,长字符串被完全覆盖掉,\0后面的元素直接忽略*/</span><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>string<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"Original String"</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> str2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"New String"</span><span class="token punctuation">;</span><span class="token comment">//这里拷贝过去"New String"把"Original String"覆盖掉了,应为字符串结束符也拷贝过去,在覆盖时,前面覆盖掉,后面的因为\0被忽略掉了</span>  <span class="token keyword">char</span> str3<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">strcpy</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">strcpy</span><span class="token punctuation">(</span>str3<span class="token punctuation">,</span><span class="token string">"Copy Successful"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"str1:%s\nstr2:%s\nstr3:%s \n"</span><span class="token punctuation">,</span>str1<span class="token punctuation">,</span>str2<span class="token punctuation">,</span>str3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//输出结果</span>str1<span class="token operator">:</span>New Stringstr2<span class="token operator">:</span>New Stringstr3<span class="token operator">:</span>Copy Successful<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*长字符串覆盖短字符串*/</span><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>string<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"Original String"</span><span class="token punctuation">;</span><span class="token comment">//15</span>  <span class="token keyword">char</span> str2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"New String"</span><span class="token punctuation">;</span><span class="token comment">//10</span>  <span class="token keyword">char</span> str3<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">strcpy</span><span class="token punctuation">(</span>str2<span class="token punctuation">,</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">strcpy</span><span class="token punctuation">(</span>str3<span class="token punctuation">,</span><span class="token string">"Copy Successful"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"str1:%s\nstr2:%s\nstr3:%s \n"</span><span class="token punctuation">,</span>str1<span class="token punctuation">,</span>str2<span class="token punctuation">,</span>str3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//输出结果</span>str1<span class="token operator">:</span>ring<span class="token comment">//10+\0只保留后面4个字符</span>str2<span class="token operator">:</span>Original Stringstr3<span class="token operator">:</span>Copy Successful<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意字符串结束符\0在字符串拷贝中的影响</p><h6 id="strncpy"><a href="#strncpy" class="headerlink" title="strncpy()"></a>strncpy()</h6><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*拷贝前n个数据元素*/</span><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>string<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"To be or not to be"</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> str2<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">strncpy</span><span class="token punctuation">(</span>str2<span class="token punctuation">,</span>str1<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将前五个数据元素拷贝到另一个字符串,不包含结束符,也不会自动追加结束符,后来测试是自动追加结束符\0的</span>  <span class="token comment">//str2[5]='\0';//在拷贝字符后面手动加上结束符\0</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"str1:%s\nstr2:%s\n"</span><span class="token punctuation">,</span>str1<span class="token punctuation">,</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="连接字符串-strcat-和strncat"><a href="#连接字符串-strcat-和strncat" class="headerlink" title="连接字符串:    strcat()和strncat()"></a>连接字符串:    strcat()和strncat()</h5><h6 id="strcat"><a href="#strcat" class="headerlink" title="strcat()"></a>strcat()</h6><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*拼接*/</span><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>string<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"I love"</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> str2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"you"</span><span class="token punctuation">;</span>  <span class="token function">strcat</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//拼接空格</span>  <span class="token function">strcat</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将you拼接上去</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"str1:%s\nstr2:%s\n"</span><span class="token punctuation">,</span>str1<span class="token punctuation">,</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="strncat"><a href="#strncat" class="headerlink" title="strncat()"></a>strncat()</h6><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*拼接前n个字符*/</span><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>string<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"I love"</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> str2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"you are beautiful"</span><span class="token punctuation">;</span>  <span class="token function">strcat</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//拼接空格</span>  <span class="token function">strncat</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span>str2<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将前面3个字符you拼接上去</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"str1:%s\nstr2:%s\n"</span><span class="token punctuation">,</span>str1<span class="token punctuation">,</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="比较字符串strcmp-和strncmp"><a href="#比较字符串strcmp-和strncmp" class="headerlink" title="比较字符串strcmp()和strncmp()"></a>比较字符串strcmp()和strncmp()</h5><h6 id="比较字符串函数的原理"><a href="#比较字符串函数的原理" class="headerlink" title="比较字符串函数的原理"></a>比较字符串函数的原理</h6><p>基本形式为strcmp(str1,str2)，</p><ol><li>若str1=str2，则返回零；</li><li>若str1<str2，则返回负数；若str1>str2，则返回正数</str2，则返回负数；若str1></li></ol><p>两个字符串自左向右逐个字符相比（按ASCII值大小相比较），直到出现不同的字符或遇’\0’为止</p><p>从第一个字符开始,依次对比两个字符串每个字符的ASCII码值,如果第一个字符串的ASCII码值小于第二个字符串的ascii码值,那么返回一个小于0的值,如果第一个字符串的ASCII值大于第二个ASCII码值,则返回一个大于0的值</p><h6 id="strcmp"><a href="#strcmp" class="headerlink" title="strcmp()"></a>strcmp()</h6><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*比较两个字符串*/</span><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>string<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">float</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span>  <span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"I love"</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> str2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"you are beautiful"</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> str3<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"you are beautiful"</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> str4<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"I am happy"</span><span class="token punctuation">;</span>  <span class="token comment">//char str[]="i am happy";//大小写字母的ascii码值并不一样</span>  a<span class="token operator">=</span><span class="token function">strcmp</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>  b<span class="token operator">=</span><span class="token function">strcmp</span><span class="token punctuation">(</span>str2<span class="token punctuation">,</span>str3<span class="token punctuation">)</span><span class="token punctuation">;</span>  c<span class="token operator">=</span><span class="token function">strcmp</span><span class="token punctuation">(</span>str3<span class="token punctuation">,</span>str4<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a:%f\nb:%f\nc:%f\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"两个字符串完全一致!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"两个字符串不一致"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//输出结果</span>a<span class="token operator">:</span><span class="token operator">-</span><span class="token number">1.000000</span>b<span class="token operator">:</span><span class="token number">0.000000</span>c<span class="token operator">:</span><span class="token number">1.000000</span>两个字符串不一致<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="strncmp"><a href="#strncmp" class="headerlink" title="strncmp()"></a>strncmp()</h6><p>只对比两个字符串前n个字符</p><h3 id="二维数组-矩阵"><a href="#二维数组-矩阵" class="headerlink" title="二维数组-矩阵"></a>二维数组-矩阵</h3><h3 id="为什么引入二维数组-什么情况下使用二维数组更合适"><a href="#为什么引入二维数组-什么情况下使用二维数组更合适" class="headerlink" title="为什么引入二维数组?什么情况下使用二维数组更合适?"></a>为什么引入二维数组?什么情况下使用二维数组更合适?</h3><p>存放两个类目的数据时使用</p><p><img src="/images/614-C语言程序设计/image-20210617002434276-1623860679589.png" alt="image-20210617002434276"></p><h3 id="二维数组的定义"><a href="#二维数组的定义" class="headerlink" title="二维数组的定义"></a>二维数组的定义</h3><p><strong>类型    数组名[常量表达式][常量表达式]</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//6*6,6行6列</span><span class="token keyword">char</span> b<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//4*5,4行5列</span><span class="token keyword">double</span> c<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//6*3,6行3列</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>虽然叫二维数组,但存储结构仍是线性的</p><p><img src="/images/614-C语言程序设计/image-20210617003813685-1623861496272.png" alt="image-20210617003813685"></p><h3 id="二维数组的访问"><a href="#二维数组的访问" class="headerlink" title="二维数组的访问"></a>二维数组的访问</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">数组名<span class="token punctuation">[</span>下标<span class="token punctuation">]</span><span class="token punctuation">[</span>下标<span class="token punctuation">]</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//访问a数组中的第1行第1列的元素</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//访问b数组中的第2行第4列的元素</span>c<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//访问c数组中的第4行第4列的元素</span><span class="token comment">/*同样需要注意下标的取值范围,以防止数组的越界访问.————比如int a[3][4],其"行下标"的取值范围是0~2,"列下标"的取值范围是0~3,超出任何一个下标的访问都是越界访问*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二维数组的初始化"><a href="#二维数组的初始化" class="headerlink" title="二维数组的初始化"></a>二维数组的初始化</h3><ol><li><strong>由于二位数组在内存中是线性存放的,因此可以将所有的数据写在一个花括号内:</strong></li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//二维数组的初始化1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//1、由于二位数组在内存中是线性存放的,因此可以将所有的数据写在一个花括号内:</span><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//二维数组的初始化1</span>  <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//%d后加空格隔开</span>     <span class="token punctuation">}</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印每行后换行</span> <span class="token punctuation">}</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%f"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果直接打印a,则输出二维数组a的首地址,也就是a[0][0]的地址</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><strong>为了更直观地表示元素的分布,可以用大括号将每一行的元素括起来:</strong></li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>或者<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>  <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><strong>二维数组也可以仅对部分元素赋初值:</strong></li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//每行第一个元素初始化为1,5,9,其余自动初始化为0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//输出结果</span><span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">5</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">9</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><strong>将整个二维数组初始化为0,那么直接在大括号里写一个0即可:</strong></li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>C99同样增加了一种新特性:指定初始化的元素.这样就可以只对数组中的某些指定元素进行初始化赋值,而未被赋值的元素自动初始化为0:</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//输出结果</span><span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">2</span> <span class="token number">0</span> <span class="token number">0</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">3</span> <span class="token number">0</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>二位数组的初始化也能偷懒,让编译器根据元素的数量计算数组长度.但只有第1维的元素个数可以不写,其他维度必须写上:</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//a[][4]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//第1维不写</span>  <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//输出结果</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span> <span class="token number">10</span> <span class="token number">11</span> <span class="token number">12</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//第2维不写,程序无法执行.只有第1维可以不写</span>  <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//结果:程序无法执行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二位数组存储学生成绩实例"><a href="#二位数组存储学生成绩实例" class="headerlink" title="二位数组存储学生成绩实例"></a>二位数组存储学生成绩实例</h3><p>这个例子只展示了成绩,并没有展示科目信息,学生信息,为更好的建立数据结构,这个在下面结构类型中能有更好的认识</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//存储5位同学的4门课成绩</span><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>      <span class="token punctuation">{</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">92</span><span class="token punctuation">,</span><span class="token number">85</span><span class="token punctuation">,</span><span class="token number">86</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span><span class="token number">78</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">89</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span><span class="token number">67</span><span class="token punctuation">,</span><span class="token number">78</span><span class="token punctuation">,</span><span class="token number">76</span><span class="token punctuation">,</span><span class="token number">89</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span><span class="token number">88</span><span class="token punctuation">,</span><span class="token number">68</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二维数组-矩阵-的转置"><a href="#二维数组-矩阵-的转置" class="headerlink" title="二维数组(矩阵)的转置"></a>二维数组(矩阵)的转置</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//矩阵的转置</span><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>      <span class="token punctuation">{</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">92</span><span class="token punctuation">,</span><span class="token number">85</span><span class="token punctuation">,</span><span class="token number">86</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span><span class="token number">78</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">89</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span><span class="token number">67</span><span class="token punctuation">,</span><span class="token number">78</span><span class="token punctuation">,</span><span class="token number">76</span><span class="token punctuation">,</span><span class="token number">89</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span><span class="token number">88</span><span class="token punctuation">,</span><span class="token number">68</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//</span> <span class="token punctuation">{</span>     <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//</span>     <span class="token punctuation">{</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//ij下标位置互换</span>     <span class="token punctuation">}</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>C语言数组没有越界检查,使用时注意</p></blockquote><h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><h2 id="数据在内存中是如何存放和读取的"><a href="#数据在内存中是如何存放和读取的" class="headerlink" title="数据在内存中是如何存放和读取的"></a>数据在内存中是如何存放和读取的</h2><h3 id="变量存放读取与指针的联系"><a href="#变量存放读取与指针的联系" class="headerlink" title="变量存放读取与指针的联系"></a>变量存放读取与指针的联系</h3><p>​        <strong>实际上在内存中是完全没有必要存放变量名的,因为变量名是方便程序员的使用而定义的,只有程序员和编译器知道,而编译器又知道变量名对应存放的地址,所以当你读取某个变量的时候,编译器就会通过变量名所在的地址,并根据变量的类型读取相应范围的数据</strong></p><p><img src="/images/614-C语言程序设计/截图_20212717042755-1623918507098.png" alt="截图_20212717042755"></p><div class="table-container"><table><thead><tr><th style="text-align:center">只有编译器知道变量名的地址</th></tr></thead><tbody><tr><td style="text-align:center">a -&gt;10000</td></tr><tr><td style="text-align:center">b -&gt;10001</td></tr><tr><td style="text-align:center">c -&gt;10002</td></tr><tr><td style="text-align:center">d -&gt;10003</td></tr><tr><td style="text-align:center">e -&gt;10004</td></tr><tr><td style="text-align:center">f -&gt;10005</td></tr><tr><td style="text-align:center">g -&gt;10009</td></tr></tbody></table></div><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> a<span class="token punctuation">;</span><span class="token comment">//声明变量名为a的数据,其数据类型为char.char每个字符占用一个字节</span><span class="token keyword">char</span> b<span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token punctuation">;</span><span class="token keyword">char</span> d<span class="token punctuation">;</span><span class="token keyword">char</span> e<span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">;</span><span class="token comment">//声明变量名为f的数据,其数据类型为int.int类型数据占用4个字节,因此在存储空间分配存储单元时,分配首地址1005及存储字节大小就可以定义变量f,其值可以通过初始化来确定.也就是说,在读取f变量的内容时,处理器找到字节地址为1005起始的4个字节空间,其中包含的内容就是变量f的值</span><span class="token keyword">char</span> g<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="指针和指针变量"><a href="#指针和指针变量" class="headerlink" title="指针和指针变量"></a>指针和指针变量</h2><h3 id="指针-1"><a href="#指针-1" class="headerlink" title="指针"></a>指针</h3><p>就是地址</p><h3 id="指针变量"><a href="#指针变量" class="headerlink" title="指针变量"></a>指针变量</h3><p>用来存放指针的变量.和普通变量不同,普通变量存放的是数据,指针变量存放的是指针</p><h3 id="指针变量的类型"><a href="#指针变量的类型" class="headerlink" title="指针变量的类型"></a>指针变量的类型</h3><p>存放的地址指向的数据类型</p><p><img src="/images/614-C语言程序设计/image-20210617165706754-1623920229243.png" alt="image-20210617165706754"></p><h3 id="指针变量的定义"><a href="#指针变量的定义" class="headerlink" title="指针变量的定义"></a>指针变量的定义</h3><p><strong>类型名    *指针变量名</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span>pa<span class="token punctuation">;</span><span class="token comment">//定义一个指向字符型的指针变量</span>  如上图<span class="token punctuation">,</span>指针变量pa存放的值为<span class="token number">10000</span><span class="token punctuation">,</span>该值又是另一个变量a的地址<span class="token punctuation">,</span>该地址存放的值是字符型数据<span class="token char">'F'</span><span class="token keyword">int</span> <span class="token operator">*</span>pf<span class="token punctuation">;</span><span class="token comment">//定义一个指向整型的指针变量</span>如上图<span class="token punctuation">,</span>指针变量pf存放的值为<span class="token number">10005</span><span class="token punctuation">,</span>该值又是另一个变量e的地址<span class="token punctuation">,</span>该地址存放的值是整型数据<span class="token number">123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="取地址运算符和取值运算符"><a href="#取地址运算符和取值运算符" class="headerlink" title="取地址运算符和取值运算符"></a>取地址运算符和取值运算符</h3><h4 id="取地址运算符-amp"><a href="#取地址运算符-amp" class="headerlink" title="取地址运算符&amp;"></a>取地址运算符&amp;</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//如果需要获取某个变量的地址,可以使用取地址运算符:&amp;</span><span class="token keyword">char</span> <span class="token operator">*</span>pa<span class="token operator">=</span><span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span class="token comment">//取字符型变量a的地址存放于指针变量pa中</span><span class="token keyword">int</span> <span class="token operator">*</span>pb<span class="token operator">=</span><span class="token operator">&amp;</span>f<span class="token punctuation">;</span><span class="token comment">//取整型变量f的地址存放于指针变量pb中</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="取值运算符"><a href="#取值运算符" class="headerlink" title="取值运算符*"></a>取值运算符*</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//如果需要访问指针变量指向的数据,可以使用取值运算符:*</span><span class="token comment">//注意取值运算符与指针变量定义的*意义上的不同</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c,%d\n"</span><span class="token punctuation">,</span><span class="token operator">*</span>pa<span class="token punctuation">,</span><span class="token operator">*</span>pb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印输出指针变量pa和pb指向的数据,解引用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="直接访问与间接访问数据"><a href="#直接访问与间接访问数据" class="headerlink" title="直接访问与间接访问数据"></a>直接访问与间接访问数据</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token operator">*</span>pa<span class="token operator">=</span><span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//直接访问a=3:通过普通变量访问数据</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">*</span>pa<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//间接访问a=3:通过指针变量访问数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="指针变量的初始化"><a href="#指针变量的初始化" class="headerlink" title="指针变量的初始化"></a>指针变量的初始化</h3><h4 id="避免访问未初始化的指针"><a href="#避免访问未初始化的指针" class="headerlink" title="避免访问未初始化的指针"></a>避免访问未初始化的指针</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">;</span><span class="token comment">//这里只对指针变量进行了定义,未初始化指针变量存储的值,在之后又对指针变量中的随机内容(地址)所指向的空间赋值时,因为指针变量的内容是随机的,在变成过程中容易导致程序出错无法执行</span>  <span class="token operator">*</span>a<span class="token operator">=</span><span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="指针和数组"><a href="#指针和数组" class="headerlink" title="指针和数组"></a>指针和数组</h2><h3 id="数组和指针有什么关系"><a href="#数组和指针有什么关系" class="headerlink" title="数组和指针有什么关系?"></a>数组和指针有什么关系?</h3><p>scanf()输入函数、取地址、指针与指针变量</p><p>只有指针变量不用取地址符号</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> a<span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token operator">=</span><span class="token operator">&amp;</span>a<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入一个整数:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a=%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请重新输入一个整数:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//p本身存放的就是a的地址,故不用取址运算符</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a=%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入鱼C的域名:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"鱼C工作室的域名:%s\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//字符数组也不用取地址运算符</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数组名的真是身份"><a href="#数组名的真是身份" class="headerlink" title="数组名的真是身份"></a>数组名的真是身份</h4><p><strong>数组名其实是数组第一个元素的地址</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入鱼C的域名:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"鱼C工作室的域名:%s\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"str的地址是:%p\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//数组的地址</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"str的地址是:%p\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//数组第1个元素的地址</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//输出地址一致</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"FishC"</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">float</span> c<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1.1</span><span class="token punctuation">,</span><span class="token number">2.2</span><span class="token punctuation">,</span><span class="token number">3.3</span><span class="token punctuation">,</span><span class="token number">4.4</span><span class="token punctuation">,</span><span class="token number">5.5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">double</span> d<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1.1</span><span class="token punctuation">,</span><span class="token number">2.2</span><span class="token punctuation">,</span><span class="token number">3.3</span><span class="token punctuation">,</span><span class="token number">4.4</span><span class="token punctuation">,</span><span class="token number">5.5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a[0]-&gt;%p,a[1]-&gt;%p,a[2]-&gt;%p\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"b[0]-&gt;%p,b[1]-&gt;%p,b[2]-&gt;%p\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"c[0]-&gt;%p,c[1]-&gt;%p,c[2]-&gt;%p\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"d[0]-&gt;%p,d[1]-&gt;%p,d[2]-&gt;%p\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>d<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//输出结果</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token number">000000000061F</span>E1A<span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token number">000000000061F</span>E1B<span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token number">000000000061F</span>E1C<span class="token comment">//相差1个字节</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token number">000000000061F</span>E00<span class="token punctuation">,</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token number">000000000061F</span>E04<span class="token punctuation">,</span>b<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token number">000000000061F</span>E08<span class="token comment">//相差4个字节</span>c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token number">000000000061F</span>DE0<span class="token punctuation">,</span>c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token number">000000000061F</span>DE4<span class="token punctuation">,</span>c<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token number">000000000061F</span>DE8<span class="token comment">//相差4个字节</span>d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token number">000000000061F</span>DB0<span class="token punctuation">,</span>d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token number">000000000061F</span>DB8<span class="token punctuation">,</span>d<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token number">000000000061F</span>DC0<span class="token comment">//相差8个字节</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="指向数组的指针"><a href="#指向数组的指针" class="headerlink" title="指向数组的指针"></a>指向数组的指针</h4><p>如果用一个指针指向数组,应该怎呢么做呢?</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>p<span class="token operator">=</span>a<span class="token punctuation">;</span><span class="token comment">//语句1:将数组地址赋值给pp=&amp;a[0];//语句2:将数组第1个元素地址赋值给p两种语句效果一致</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="指针的运算"><a href="#指针的运算" class="headerlink" title="指针的运算"></a>指针的运算</h4><h5 id="指针法-访问数组元素"><a href="#指针法-访问数组元素" class="headerlink" title="指针法-访问数组元素"></a>指针法-访问数组元素</h5><p>当指针指向数组元素的时候,我们可以对指针变量进行加减运算,这样做的意义相当于指向距离指针所在位置向前或向后第n个元素</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"FishC"</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token operator">=</span>a<span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*p=%c,*(p+1)=%c,*(p+2)=%c\n"</span><span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//输出结果</span><span class="token operator">*</span>p<span class="token operator">=</span>F<span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span>i<span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">=</span>s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对比标准的下标法访问数组元素,这种使用指针进行间接访问的方法叫做指针法</p><p>需要郑重强调的是:p+1并不是简单地将地址加1,而是指向数组的下一个元素</p><h5 id="p-1与-p-1-的区别"><a href="#p-1与-p-1-的区别" class="headerlink" title="*p+1与*(p+1)的区别"></a>*p+1与*(p+1)的区别</h5><div class="table-container"><table><thead><tr><th style="text-align:center">形式</th><th style="text-align:center">区别</th></tr></thead><tbody><tr><td style="text-align:center">*(p+1)</td><td style="text-align:center">不是地址+1,而是取p首地址加上一个数据类型的字节长度</td></tr><tr><td style="text-align:center">*p+1</td><td style="text-align:center">*p取第一个指针指向的值,然后再+1</td></tr></tbody></table></div><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">float</span> c<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1.1</span><span class="token punctuation">,</span><span class="token number">2.2</span><span class="token punctuation">,</span><span class="token number">3.3</span><span class="token punctuation">,</span><span class="token number">4.4</span><span class="token punctuation">,</span><span class="token number">5.5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">float</span> <span class="token operator">*</span>p<span class="token operator">=</span>c<span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*p=%f,*(p+1)=%f,*(p+2)=%f\n"</span><span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*p=%f,*p+1=%f,*p+2=%f\n"</span><span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//输出结果</span><span class="token operator">*</span>p<span class="token operator">=</span><span class="token number">1.100000</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">2.200000</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">3.300000</span><span class="token comment">//取下一个元素的值</span><span class="token operator">*</span>p<span class="token operator">=</span><span class="token number">1.100000</span><span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token operator">=</span><span class="token number">2.100000</span><span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token operator">+</span><span class="token number">2</span><span class="token operator">=</span><span class="token number">3.100000</span><span class="token comment">//取值后+1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"FishC"</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token operator">=</span>a<span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*p=%c,*(p+1)=%c,*(p+2)=%c\n"</span><span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*p=%c,*p+1=%c,*p+2=%c\n"</span><span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//输出结果</span><span class="token operator">*</span>p<span class="token operator">=</span>F<span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span>i<span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">=</span>s<span class="token comment">//</span><span class="token operator">*</span>p<span class="token operator">=</span>F<span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token operator">=</span>G<span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token operator">+</span><span class="token number">2</span><span class="token operator">=</span>H<span class="token comment">//*p为F,F的ASCII码值+1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="p-1-与数组名-a-1-的区别"><a href="#p-1-与数组名-a-1-的区别" class="headerlink" title="*(p+1)与数组名*(a+1)的区别"></a>*(p+1)与数组名*(a+1)的区别</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"FishC"</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token operator">=</span>a<span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*a=%c,*(a+1)=%c,*(a+2)=%c\n"</span><span class="token punctuation">,</span><span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*a=%c,*a+1=%c,*a+2=%c\n"</span><span class="token punctuation">,</span><span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token operator">*</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">*</span>a<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//输出结果*a=F,*(a+1)=i,*(a+2)=s//*a=F,*a+1=G,*a+2=H//说明指针和数组名都是首地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="指针和数组名的区别"><a href="#指针和数组名的区别" class="headerlink" title="指针和数组名的区别"></a>指针和数组名的区别</h5><h6 id="什么是左值-什么是右值"><a href="#什么是左值-什么是右值" class="headerlink" title="什么是左值,什么是右值?"></a>什么是左值,什么是右值?</h6><p>数组名只是一个地址,而指针是一个左值</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"I love FishC.com!"</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> <span class="token operator">*</span>target<span class="token operator">=</span>str<span class="token punctuation">;</span>  <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>target<span class="token operator">++</span> <span class="token operator">!=</span><span class="token char">'\0'</span><span class="token punctuation">)</span>   <span class="token comment">//字符串结束符\0.自增运算符比取值运算符优先级高.这里直接用*str++就不行  {      count++;  }  printf("总共有%d个字符!\n",count);  return 0;}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="指针数组和数组指针"><a href="#指针数组和数组指针" class="headerlink" title="指针数组和数组指针"></a>指针数组和数组指针</h2><div class="table-container"><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">含义</th><th>典型形式</th><th>结合优先级</th></tr></thead><tbody><tr><td style="text-align:center">指针数组</td><td style="text-align:center">是数组,存放指针</td><td>int *p1[5]</td><td>[]优先级高于*</td></tr><tr><td style="text-align:center">数组指针</td><td style="text-align:center">是指针,</td><td>int(*p2)[5]</td><td>()提高优先级,从左到右先和*结合</td></tr><tr><td style="text-align:center">### 指针数组-int *p1[5]</td><td style="text-align:center"></td><td></td></tr></tbody></table></div><p><img src="/images/614-C语言程序设计/数组指针-1623943895360.png" alt="数组指针"></p><p>指针数组是一个数组,每个数组元素存放一个指针变量</p><p>指针数组初始化</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//这是一个错误演示,虽然程序没有错误,但一般不这么使用</span><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> c<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> d<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> e<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token operator">*</span>p1<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">,</span><span class="token operator">&amp;</span>d<span class="token punctuation">,</span><span class="token operator">&amp;</span>e<span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token operator">*</span>p1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//输出结果</span><span class="token number">1</span><span class="token number">2</span><span class="token number">3</span><span class="token number">4</span><span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//正确演示,指针数组的用途</span><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span>  <span class="token keyword">char</span> <span class="token operator">*</span>p1<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>      <span class="token string">"让编程改变世界"</span><span class="token punctuation">,</span>      <span class="token string">"just do it---nike"</span><span class="token punctuation">,</span>      <span class="token string">"一切皆有可能---李宁"</span><span class="token punctuation">,</span>      <span class="token string">"永不止步---安踏"</span><span class="token punctuation">,</span>      <span class="token string">"one more thing..---苹果"</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">//指针数组存放地址,里面地址又可以指向任何数据类型,因此这里可以直接存放字符串.而字符数组每个元素只能存放一个字符</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span>p1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//输出结果</span>让编程改变世界just <span class="token keyword">do</span> it<span class="token operator">--</span><span class="token operator">-</span>nike一切皆有可能<span class="token operator">--</span><span class="token operator">-</span>李宁永不止步<span class="token operator">--</span><span class="token operator">-</span>安踏one more thing<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">--</span><span class="token operator">-</span>苹果<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="难点-数组指针-int-p2-5"><a href="#难点-数组指针-int-p2-5" class="headerlink" title="难点!!!-数组指针-int(*p2)[5]"></a>难点!!!-数组指针-int(*p2)[5]</h3><p><img src="/images/614-C语言程序设计/指针数组-1623945434433.png" alt="指针数组"></p><p>数组指针是一个指针,它指向的是一个数组</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//错误演示-错误使用指针,大量警告,说明程序虽然可以执行,但可能存在问题,结果不一定是我们想要的</span><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>p2<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//数组指针</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span>p2<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//输出结果</span>test<span class="token punctuation">.</span>c<span class="token operator">:</span><span class="token number">4</span><span class="token operator">:</span><span class="token number">19</span><span class="token operator">:</span> warning<span class="token operator">:</span> initialization of <span class="token char">'int (*)[5]'</span> from <span class="token char">'int'</span> makes pointer from integer without a cast <span class="token punctuation">[</span><span class="token operator">-</span>Wint<span class="token operator">-</span>conversion<span class="token punctuation">]</span>   <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>p2<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//01;35m^</span>test<span class="token punctuation">.</span>c<span class="token operator">:</span><span class="token number">4</span><span class="token operator">:</span><span class="token number">19</span><span class="token operator">:</span> note<span class="token operator">:</span> <span class="token punctuation">(</span>near initialization <span class="token keyword">for</span> <span class="token char">'p2'</span><span class="token punctuation">)</span>test<span class="token punctuation">.</span>c<span class="token operator">:</span><span class="token number">4</span><span class="token operator">:</span><span class="token number">21</span><span class="token operator">:</span> warning<span class="token operator">:</span> excess elements in scalar initializer   <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>p2<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//01;35m^</span>test<span class="token punctuation">.</span>c<span class="token operator">:</span><span class="token number">4</span><span class="token operator">:</span><span class="token number">21</span><span class="token operator">:</span> note<span class="token operator">:</span> <span class="token punctuation">(</span>near initialization <span class="token keyword">for</span> <span class="token char">'p2'</span><span class="token punctuation">)</span>test<span class="token punctuation">.</span>c<span class="token operator">:</span><span class="token number">4</span><span class="token operator">:</span><span class="token number">23</span><span class="token operator">:</span> warning<span class="token operator">:</span> excess elements in scalar initializer   <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>p2<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//01;35m^</span>test<span class="token punctuation">.</span>c<span class="token operator">:</span><span class="token number">4</span><span class="token operator">:</span><span class="token number">23</span><span class="token operator">:</span> note<span class="token operator">:</span> <span class="token punctuation">(</span>near initialization <span class="token keyword">for</span> <span class="token char">'p2'</span><span class="token punctuation">)</span>test<span class="token punctuation">.</span>c<span class="token operator">:</span><span class="token number">4</span><span class="token operator">:</span><span class="token number">25</span><span class="token operator">:</span> warning<span class="token operator">:</span> excess elements in scalar initializer   <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>p2<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//01;35m^</span>test<span class="token punctuation">.</span>c<span class="token operator">:</span><span class="token number">4</span><span class="token operator">:</span><span class="token number">25</span><span class="token operator">:</span> note<span class="token operator">:</span> <span class="token punctuation">(</span>near initialization <span class="token keyword">for</span> <span class="token char">'p2'</span><span class="token punctuation">)</span>test<span class="token punctuation">.</span>c<span class="token operator">:</span><span class="token number">4</span><span class="token operator">:</span><span class="token number">27</span><span class="token operator">:</span> warning<span class="token operator">:</span> excess elements in scalar initializer   <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>p2<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//01;35m^</span>test<span class="token punctuation">.</span>c<span class="token operator">:</span><span class="token number">4</span><span class="token operator">:</span><span class="token number">27</span><span class="token operator">:</span> note<span class="token operator">:</span> <span class="token punctuation">(</span>near initialization <span class="token keyword">for</span> <span class="token char">'p2'</span><span class="token punctuation">)</span><span class="token number">1</span><span class="token number">21</span><span class="token number">41</span><span class="token number">61</span><span class="token number">81</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> temp<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>p2<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&amp;</span>temp<span class="token punctuation">;</span><span class="token comment">//数组指针,应该存放地址</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>p2<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//两层解引用,这里为什么这样才能使程序正确运行</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="p2-i"><a href="#p2-i" class="headerlink" title="*(*p2+i)"></a>*(*p2+i)</h6><h2 id="指针与二维数组-指针如何通过直角坐标系似得访问二维数组"><a href="#指针与二维数组-指针如何通过直角坐标系似得访问二维数组" class="headerlink" title="指针与二维数组-指针如何通过直角坐标系似得访问二维数组"></a>指针与二维数组-指针如何通过直角坐标系似得访问二维数组</h2><h3 id="二维数组的定义-1"><a href="#二维数组的定义-1" class="headerlink" title="二维数组的定义"></a>二维数组的定义</h3><h4 id="假设我们定义了二位数组array-4-5"><a href="#假设我们定义了二位数组array-4-5" class="headerlink" title="假设我们定义了二位数组array[4][5]"></a>假设我们定义了二位数组array[4][5]</h4><p><img src="/images/614-C语言程序设计/image-20210618002750217-1623947271727.png" alt="image-20210618002750217"></p><h3 id="array表示什么"><a href="#array表示什么" class="headerlink" title="array表示什么?"></a>array表示什么?</h3><p>array是二维数组的首地址</p><p><img src="/images/614-C语言程序设计/image-20210618003007362-1623947409352.png" alt="image-20210618003007362"></p><p>可以理解为指向包含5个数组元素的指针</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof int:%d\n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//打印array的字节大小  printf("array   :%p\n",array);   //打印array的地址,首地址  printf("array+1 :%p\n",array + 1);  //打印array+1的地址  return 0;}//输出结果sizeof int:80array   :000000000061FDC0array+1 :000000000061FDD4//array和array+1的地址跨度为20,也就是说明在二维数组中指针+1,是跨越了array[0][0]到array[0][5]这一整行的数组元素,就是20个字节</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="array-1-表示的是什么-—-array-i-array-i"><a href="#array-1-表示的是什么-—-array-i-array-i" class="headerlink" title="(array+1)表示的是什么?—(array+i)==array[i]"></a><em>(array+1)表示的是什么?—</em>(array+i)==array[i]</h3><p><img src="/images/614-C语言程序设计/image-20210618004436946-1623948278384.png" alt="image-20210618004436946"></p><p>array[1]是第二行的首地址</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*(array+1)  :%p\n"</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span>array<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//打印*(array+1)的地址</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"array[1]    :%p\n"</span><span class="token punctuation">,</span>array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//打印array[1]的地址,第二行首地址   </span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&amp;array[1][0]:%p\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//打印第二行第一个元素array[1][0]的地址,</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"**(array+1)  :%p\n"</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">(</span>array<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//双重解引用 ,打印第二行第一个元素的值  </span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//输出结果</span><span class="token operator">*</span><span class="token punctuation">(</span>array<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token operator">:</span><span class="token number">000000000061F</span>DC4array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token operator">:</span><span class="token number">000000000061F</span>DC4<span class="token operator">&amp;</span>array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token number">000000000061F</span>DC4<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">(</span>array<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token operator">:</span><span class="token number">0000000000000005</span><span class="token comment">//</span><span class="token operator">*</span><span class="token punctuation">(</span>array<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>这三个地址是一样的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="array-1-3-表示的是什么-—-array-i-j-array-i-j"><a href="#array-1-3-表示的是什么-—-array-i-j-array-i-j" class="headerlink" title="*((array+1)+3)表示的是什么?—\(*(array+i)+j)==array[i][j]"></a>*(<em>(array+1)+3)表示的是什么?—\</em>(*(array+i)+j)==array[i][j]</h3><p><img src="/images/614-C语言程序设计/image-20210618010259339-1623949381368.png" alt="image-20210618010259339"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment">/*printf("*(array+1)    :%p\n",*(array+1));  //打印*(array+1)的地址  printf("array[1]      :%p\n",array[1]);   //打印array[1]的地址,第二行首地址     printf("&amp;array[1][0]  :%p\n",&amp;array[1][0]);   //打印第二行第一个元素array[1][0]的地址,  printf("**(array+1)   :%p\n",**(array+1));  //双重解引用 ,打印第二行第一个元素的值  */</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*(*(array+1)+3)  :%p\n"</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>array<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//打印*(*(array+1)+3)的地址</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"array[1][3]  :%p\n"</span><span class="token punctuation">,</span>array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//打印array[1][3]的地址</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//输出结果</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>array<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token operator">:</span><span class="token number">0000000000000008</span>array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>  <span class="token operator">:</span><span class="token number">0000000000000008</span><span class="token comment">//值都是8,说明指针指向的值和二维数组直接访问的值是一样的,表示两用法效果一样</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="array-i-j-k-array-i-j-k"><a href="#array-i-j-k-array-i-j-k" class="headerlink" title="*(*(*(array+i)+j)+k)==array[i][j][k]"></a>*(*(*(array+i)+j)+k)==array[i][j][k]</h3><h3 id="数组指针和二位数组"><a href="#数组指针和二位数组" class="headerlink" title="数组指针和二位数组"></a>数组指针和二位数组</h3><p><img src="/images/614-C语言程序设计/image-20210618011812645-1623950295076.png" alt="image-20210618011812645"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"**(p+1):%d\n"</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"**(array+1):%d\n"</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">(</span>array<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"array[1][0]:%d\n"</span><span class="token punctuation">,</span>array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*(*(p+1)+2):%d\n"</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*(*(array+1)+2):%d\n"</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>array<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"array[1][2]:%d\n"</span><span class="token punctuation">,</span>array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//输出结果</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">3</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">(</span>array<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">3</span>array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token number">3</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">5</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>array<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">5</span>array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="void指针和NULL指针"><a href="#void指针和NULL指针" class="headerlink" title="void指针和NULL指针"></a>void指针和NULL指针</h2><h3 id="void类型"><a href="#void类型" class="headerlink" title="void类型"></a>void类型</h3><p>空类型,无类型</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">void</span> a<span class="token punctuation">;</span><span class="token comment">//数据类型决定数据在内存中占用空间的大小,无类型,程序无法正确分配存储空间,所以程序不能执行void定义的数据</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="void指针"><a href="#void指针" class="headerlink" title="void指针"></a>void指针</h3><h5 id="将其他类型指针转化为void指针"><a href="#将其他类型指针转化为void指针" class="headerlink" title="将其他类型指针转化为void指针"></a>将其他类型指针转化为void指针</h5><h5 id="将void指针转化为其他类型指针"><a href="#将void指针转化为其他类型指针" class="headerlink" title="将void指针转化为其他类型指针"></a>将void指针转化为其他类型指针</h5><p>void指针我们把它称之为通用指针,就是可以指向任意类型的数据.也就是说,任何类型的指针都可以赋值给void指针</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token operator">*</span>pi <span class="token operator">=</span> <span class="token operator">&amp;</span>num<span class="token punctuation">;</span>  <span class="token keyword">char</span> <span class="token operator">*</span>ps <span class="token operator">=</span> <span class="token string">"FishC"</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token operator">*</span>pv<span class="token punctuation">;</span>  pv <span class="token operator">=</span> pi<span class="token punctuation">;</span><span class="token comment">//将int类型指针转化为void类型指针</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pi:%p,pv:%p\n"</span><span class="token punctuation">,</span>pi<span class="token punctuation">,</span>pv<span class="token punctuation">)</span><span class="token punctuation">;</span>  pv <span class="token operator">=</span> ps<span class="token punctuation">;</span><span class="token comment">//将char类型指针转化为void类型指针</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ps:%p,pv:%p\n"</span><span class="token punctuation">,</span>ps<span class="token punctuation">,</span>pv<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>viod指针不能进行取值操作</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//错误使用演示</span><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token operator">*</span>pi <span class="token operator">=</span> <span class="token operator">&amp;</span>num<span class="token punctuation">;</span>  <span class="token keyword">char</span> <span class="token operator">*</span>ps <span class="token operator">=</span> <span class="token string">"FishC"</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token operator">*</span>pv<span class="token punctuation">;</span>  pv <span class="token operator">=</span> pi<span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pi:%p,pv:%p\n"</span><span class="token punctuation">,</span>pi<span class="token punctuation">,</span>pv<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*pv:%d\n"</span><span class="token punctuation">,</span><span class="token operator">*</span>pv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不能取值操作</span>  pv <span class="token operator">=</span> ps<span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ps:%p,pv:%p\n"</span><span class="token punctuation">,</span>ps<span class="token punctuation">,</span>pv<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*pv:%s\n"</span><span class="token punctuation">,</span>pv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里可以取值操作,因为这里存放的是字符串数据,void指针有首地址,字符串有结束标志符\0,因此可以完成取值操作</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//报错提示</span>warning<span class="token operator">:</span> dereferencing <span class="token char">'void *'</span> pointer   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*pv:%d\n"</span><span class="token punctuation">,</span><span class="token operator">*</span>pv<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token operator">^</span><span class="token operator">~</span><span class="token operator">~</span><span class="token number">1.</span>c<span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">23</span><span class="token operator">:</span> error<span class="token operator">:</span> invalid use of <span class="token keyword">void</span> expression<span class="token comment">//void指针,是空类型,不知道其数据占用多少字节空间,只有地址,因此编译器不能读取正确的数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//正确使用演示</span><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token operator">*</span>pi <span class="token operator">=</span> <span class="token operator">&amp;</span>num<span class="token punctuation">;</span>  <span class="token keyword">char</span> <span class="token operator">*</span>ps <span class="token operator">=</span> <span class="token string">"FishC"</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token operator">*</span>pv<span class="token punctuation">;</span>  pv <span class="token operator">=</span> pi<span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pi:%p,pv:%p\n"</span><span class="token punctuation">,</span>pi<span class="token punctuation">,</span>pv<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*pv:%d\n"</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>pv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将void指针强制转化为int类型指针,然后解引用</span>  pv <span class="token operator">=</span> ps<span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ps:%p,pv:%p\n"</span><span class="token punctuation">,</span>ps<span class="token punctuation">,</span>pv<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*pv:%s\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>pv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将void指针强制转化为char类型指针这里不用解引用?</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//输出结果</span>pi<span class="token operator">:</span><span class="token number">000000000061F</span>E04<span class="token punctuation">,</span>pv<span class="token operator">:</span><span class="token number">000000000061F</span>E04<span class="token operator">*</span>pv<span class="token operator">:</span><span class="token number">1024</span>ps<span class="token operator">:</span><span class="token number">0000000000404000</span><span class="token punctuation">,</span>pv<span class="token operator">:</span><span class="token number">0000000000404000</span><span class="token operator">*</span>pv<span class="token operator">:</span>FishC<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="问题-为什么字符串类型指针输出时-不用加-解引用"><a href="#问题-为什么字符串类型指针输出时-不用加-解引用" class="headerlink" title="问题:为什么字符串类型指针输出时,不用加*解引用?"></a>问题:为什么字符串类型指针输出时,不用加*解引用?</h5><p>因为char＊STR定义了一个char＊字符指针STR，而STR指向了ILOVECHINA中的第一个字符I。</p><p>在cout流中有一个复制循环，它是一个具有数百个输出STR点的字符串，在这个字符串中，STR被赋值给临时指针，以便一个接一个地输出</p><p>然后＊STR是一个字符，也就是I＊是一个derecration，也就是STR指向的那个字符，所以＊STR就是I这个不能被赋值或移位所以它不能被打印出来。</p><p><a href="https://iknow-pic.cdn.bcebos.com/21a4462309f79052e3ffc0421cf3d7ca7acbd5ee"><img src="/D:/Program Files/Typora/C语言程序设计/21a4462309f79052e3ffc0421cf3d7ca7acbd5ee" alt="img"></a></p><p><strong>扩展资料：</strong></p><p>关于字符串指针</p><p>1．字符数组中存储一个度字符串</p><p>Char字符串［］＝＂LinuxC＂；</p><p>Printf（＂％s＼n＂，字符串）；</p><p>字符串是一个字符数组的名称，它也是应答字符数组的第一个地址。</p><p>2．使用字符串指针指向一个字符串</p><p>如果你不想定义一个字符数组，你可以用一个指针指向一个字符串，称为“字符串指针”，例如：</p><p>Char＊p＝＂LinuxC＂；</p><p>Printf（“％s＼n”，p）；</p><p>“LinuxC”是一个字符串常量。字符串常量的C语言：在内存中打开一个字符数组来存储字符串常量，并将打开的字符数组的第一个地址保存到p。</p><h3 id="NULL指针"><a href="#NULL指针" class="headerlink" title="NULL指针"></a>NULL指针</h3><p>NULL指针其实是一个宏定义,该指针指向0,就是不指向任何东西</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>define<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token constant">NULL</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> <span class="token operator">*</span>p1<span class="token punctuation">;</span>    <span class="token comment">//指针未初始化,指针随机指向任何数据-迷途指针-野指针-悬空指针  int *p2 = NULL;    printf("%d\n",*p1); //未初始化指针,取值时会给一个随机值  printf("%d\n",*p2);//NULL指针解引用非法  return 0;}//打印结果11342689//输出随机数</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="地址初始化的编程习惯"><a href="#地址初始化的编程习惯" class="headerlink" title="地址初始化的编程习惯"></a>地址初始化的编程习惯</h3><p>当你还不清楚要将指针初始化为什么地址时,请将它初始化NULL;在对指针进行解引用时,先检查该指针是否为NULL.这种策略可以为你今后编程写大型程序节省大量的调试时间</p><h3 id="NULL不是NUL"><a href="#NULL不是NUL" class="headerlink" title="NULL不是NUL"></a>NULL不是NUL</h3><p>NULL用于指针和对象,表示控制,指向一个不被使用的地址;而’\0’表示字符串的结尾</p><p>NUL是ASCII码值的0,空字符</p><h2 id="难点-指向指针的指针"><a href="#难点-指向指针的指针" class="headerlink" title="难点!!-指向指针的指针"></a>难点!!-指向指针的指针</h2><h3 id="指针二重套娃"><a href="#指针二重套娃" class="headerlink" title="指针二重套娃"></a>指针二重套娃</h3><p><img src="/images/614-C语言程序设计/image-20210618144432180-1623998674445.png" alt="image-20210618144432180"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">520</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>num<span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>pp <span class="token operator">=</span> <span class="token operator">&amp;</span>p<span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"num:%d\n"</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*p:%d\n"</span><span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"**pp:%d\n"</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token operator">*</span>pp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&amp;num:%p,p:%p,*pp:%p\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>num<span class="token punctuation">,</span>p<span class="token punctuation">,</span><span class="token operator">*</span>pp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//打印结果num:520*p:520**pp:520&amp;num:000000000061FE14,p:000000000061FE14,*pp:000000000061FE14</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="指针数组和指向指针的指针"><a href="#指针数组和指向指针的指针" class="headerlink" title="指针数组和指向指针的指针"></a>指针数组和指向指针的指针</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> <span class="token operator">*</span>cBooks<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>      <span class="token string">"C程序设计语言"</span><span class="token punctuation">,</span>      <span class="token string">"C专家编程"</span><span class="token punctuation">,</span>      <span class="token string">"C和指针"</span><span class="token punctuation">,</span>      <span class="token string">"C的陷阱与缺陷"</span><span class="token punctuation">,</span>      <span class="token string">"C primer plus"</span><span class="token punctuation">,</span>      <span class="token string">"带你学C带你飞"</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>byFishC<span class="token punctuation">;</span>  <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>jiayuloves<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">//数组存放的指针指向指针  int i;  byFishC=&amp;cBooks[5]; //定义为指向字符指针的指针变量  jiayuloves[0]=&amp;cBooks[0];  jiayuloves[1]=&amp;cBooks[1];  jiayuloves[2]=&amp;cBooks[2];  jiayuloves[3]=&amp;cBooks[3];  printf("FishC出版的图书有:%s\n",*byFishC);  printf("小甲鱼喜欢的书:\n");  for ( i = 0; i &lt; 4; i++)  {      printf("%s\n",*jiayuloves[i]);  }  return 0;}//打印结果FishC出版的图书有:带你学C带你飞小甲鱼喜欢的书:C程序设计语言C专家编程C和指针C的陷阱与缺陷</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>至少有两个好处:</p><ol><li>避免重复分配内存</li><li>只需进行一处修改</li></ol><p>代码的灵活性和安全性都有了显著地提高</p><h3 id="数组指针和二维数组"><a href="#数组指针和二维数组" class="headerlink" title="数组指针和二维数组"></a>数组指针和二维数组</h3><h4 id="通过指针对一维数组索引访问"><a href="#通过指针对一维数组索引访问" class="headerlink" title="通过指针对一维数组索引访问"></a>通过指针对一维数组索引访问</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token operator">=</span>array<span class="token punctuation">;</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//打印结果0123456789</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="通过指针对二位数组的索引访问"><a href="#通过指针对二位数组的索引访问" class="headerlink" title="通过指针对二位数组的索引访问"></a>通过指针对二位数组的索引访问</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//错误案例[[include]] &lt;stdio.h&gt;int main(){  int array[3][4]={      {0,1,2,3},      {4,5,6,7},      {8,9,10,11}      };  int **p=array;  int i,j;  for ( i = 0; i &lt; 3; i++)  {      for ( j = 0; j &lt; 4; j++)      {          printf("%2d ",*(*(p+i)+j));      }      printf("\n");  }    return 0;}//打印结果-程序不能执行1.c:9:13: warning: initialization of 'int **' from incompatible pointer type 'int (*)[4]' [-Wincompatible-pointer-types]   int **p=array;           ^~~~~</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//正确案例[[include]] &lt;stdio.h&gt;int main(){  int array[3][4]={      {0,1,2,3},      {4,5,6,7},      {8,9,10,11}      };  //int **p=array;//这里为什么不能这样定义  int i,j;  for ( i = 0; i &lt; 3; i++)  {      for ( j = 0; j &lt; 4; j++)      {          printf("%2d ",*(*(array+i)+j));//array      }      printf("\n");  }    return 0;}//打印结果 0  1  2  3  4  5  6  7 8  9 10 11</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="使用数组指针索引访问二维数组"><a href="#使用数组指针索引访问二维数组" class="headerlink" title="使用数组指针索引访问二维数组"></a>使用数组指针索引访问二维数组</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>      <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span>array<span class="token punctuation">;</span>  <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%2d "</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p:%p,array:%p\n"</span><span class="token punctuation">,</span>p<span class="token punctuation">,</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p+1:%p,array+1:%p\n"</span><span class="token punctuation">,</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>array<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//打印结果 0  1  2  3  4  5  6  7  8  9 10 11 p:000000000061FDE0,array:000000000061FDE0p+1:000000000061FDF0,array+1:000000000061FDF0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="常量和指针"><a href="#常量和指针" class="headerlink" title="常量和指针"></a>常量和指针</h2><h3 id="常量-1"><a href="#常量-1" class="headerlink" title="常量"></a>常量</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 常量应该是这样:520,'a',3.14# 或者这样:[[define]] PRICE 520[[define]] A 'a'[[define]] PI 3.14# 还可以使用const关键字修饰:- const int price=520;- const char a='a';- const float pi=3.14;const把变量变得有常量的特性,把变量变成只读而不可写入</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token keyword">float</span> pi <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>  <span class="token comment">//const使数据变量只可读取,不可写入  printf("%f\n",pi);  pi = 3.1415926;     //写入不合法  return 0;}//打印结果-程序报错1.c:6:8: error: assignment of read-only variable 'pi'   pi = 3.1415926;      ^</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="指向常量的指针"><a href="#指向常量的指针" class="headerlink" title="指向常量的指针"></a>指向常量的指针</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">520</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token keyword">int</span> cnum<span class="token operator">=</span><span class="token number">880</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>pc<span class="token operator">=</span><span class="token operator">&amp;</span>cnum<span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"cnum:%d,&amp;cnum:%p\n"</span><span class="token punctuation">,</span>cnum<span class="token punctuation">,</span><span class="token operator">&amp;</span>cnum<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*pc:%d,pc:%p\n"</span><span class="token punctuation">,</span><span class="token operator">*</span>pc<span class="token punctuation">,</span>pc<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//*pc=1024;     //指针pc指向cnum,cnum值只读不能写,故语句不合法  pc=&amp;num;    //但是指针可以改变常量的地址,其内容依然不变,该语句合法  printf("num:%d,&amp;num:%p\n",num,&amp;num);  printf("*pc:%d,pc:%p\n",*pc,pc);  num=1024;//num既可读取,又可写入  return 0;}//打印结果cnum:880,&amp;cnum:000000000061FE10*pc:880,pc:000000000061FE10num:520,&amp;num:000000000061FE14*pc:520,pc:000000000061FE14</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 总结1. 指针可以修改为指向不同的常量2. 指针可以修改为指向不同的变量3. 可以通过解引用来读取指针指向的数据4. 不可以通过解引用修改指针指向的数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="常量指针-让指针也不可变"><a href="#常量指针-让指针也不可变" class="headerlink" title="常量指针-让指针也不可变"></a>常量指针-让指针也不可变</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">520</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token keyword">int</span> cnum<span class="token operator">=</span><span class="token number">880</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token operator">*</span> <span class="token keyword">const</span> p<span class="token operator">=</span><span class="token operator">&amp;</span>num<span class="token punctuation">;</span> <span class="token comment">//定义一个值固定的指针,该指针指向的内容可变,但其自身的值不可变  *p = 1024;  printf("*p:%d\n",*p);  //p=&amp;cnum;        //p自身的值不可变  printf("*p:%d\n",*p);  return 0;}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 总结1. 指向非常量的常量指针指针自身不可以被修改指针指向的值可以被修改2. 指向常量的常量指针指针自身不可以被修改指针指向的值也不可以被修改const int * const p=&amp;num;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="指针套娃-指向”指向常量的常量指针”的指针"><a href="#指针套娃-指向”指向常量的常量指针”的指针" class="headerlink" title="指针套娃-指向”指向常量的常量指针”的指针"></a>指针套娃-指向”指向常量的常量指针”的指针</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">520</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token keyword">int</span> cnum<span class="token operator">=</span><span class="token number">880</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span> <span class="token keyword">const</span> p<span class="token operator">=</span><span class="token operator">&amp;</span>num<span class="token punctuation">;</span> <span class="token comment">//定义一个值固定的指针,该指针指向的内容可变,但其自身的值不可变  const int * const *pp=&amp;p;  printf("pp:%p,&amp;p:%p\n",pp,&amp;p);  printf("*pp:%p,p:%p,&amp;num:%p\n",*pp,p,&amp;num);  printf("**pp:%d,*p:%d,num:%d",**pp,*p,num);  return 0;}//打印结果pp:000000000061FE00,&amp;p:000000000061FE00*pp:000000000061FE0C,p:000000000061FE0C,&amp;num:000000000061FE0C**pp:520,*p:520,num:520</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="目前我们在开发中遇到的问题"><a href="#目前我们在开发中遇到的问题" class="headerlink" title="目前我们在开发中遇到的问题"></a>目前我们在开发中遇到的问题</h2><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 随着程序规模的变大</span><span class="token list punctuation">1.</span> main函数变得相当冗杂<span class="token list punctuation">2.</span> 程序复杂度不断提高<span class="token list punctuation">3.</span> 代码前后关联度高,修改代码往往牵一发而动全身<span class="token list punctuation">4.</span> 变量的命名都成了问题<span class="token list punctuation">5.</span> 为了在程序中多次实现某功能,不得不重复多次写不同代码-模块化程序设计<span class="token list punctuation">6.</span> ·····<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">void</span> <span class="token function">print_C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//函数声明</span><span class="token keyword">void</span> <span class="token function">print_C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//函数定义</span><span class="token punctuation">{</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" ##### \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"##   ##\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"##     \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"##     \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"##     \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"##   ##\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" ##### \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">print_C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//函数调用</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">print_C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">print_C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数的定义语法"><a href="#函数的定义语法" class="headerlink" title="函数的定义语法"></a>函数的定义语法</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span>存储类型符<span class="token punctuation">]</span><span class="token punctuation">[</span>返回值类型<span class="token punctuation">]</span>函数名<span class="token punctuation">(</span><span class="token punctuation">[</span>形参说明表<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  函数语句体  ···  <span class="token punctuation">[</span><span class="token keyword">return</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="table-container"><table><thead><tr><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">1.存储类型符指的是函数的作用范围，它只有两种形式：static和extern，缺省情况为extern。</td></tr><tr><td style="text-align:left">2.类型标识符指定函数值类型，即函数返回值的类型。返回值类型可以是除数组和函数类型之外的任何类型，包括值集合为空集的void类型。当返回值类型为void类型时，函数将不返回任何值。缺省时，默认函数类型为int。</td></tr><tr><td style="text-align:left">3.参数表是用逗号隔开的一系列参数，称虚拟参数或形式参数(形参)，也不可带参数，但需带括号。参数可以是常量、简单变量、记录、数组及指针等。</td></tr><tr><td style="text-align:left">4.大括号内称为函数体，一般包括声明部分、语句部分和返回语句。</td></tr><tr><td style="text-align:left">5.return(表达式)为返回语句，函数调用时，由函数名带回表达式的值，表达式两边的括号可以省略，且”表达式的值”的类型必须与函数返回值的类型相一致，否则，系统将自动根据返回值的类型进行强制转换，如不能转换，则出错。</td></tr><tr><td style="text-align:left">## 函数的声明</td></tr></tbody></table></div><p>所谓声明,就是告诉编译器我要使用这个函数,你现在没有找到它的定义不要紧,请不要报错,稍后我会把定义补上</p><p><strong>函数必须先定义再调用,如果函数在主函数后面定义,则在主函数前必须加上函数声明语句</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">void</span> <span class="token function">print_C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//函数声明int main(){  print_C();//函数调用  printf("\n");  print_C();  printf("\n");  print_C();  return 0;}void print_C()//函数定义在后面,前面必须要声明,虽然现在编译器可以正常执行,但仍要养成良好的编程习惯{  printf(" ##### \n");  printf("##   ##\n");  printf("##     \n");  printf("##     \n");  printf("##     \n");  printf("##   ##\n");  printf(" ##### \n");}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="函数过程的调用"><a href="#函数过程的调用" class="headerlink" title="函数过程的调用"></a>函数过程的调用</h2><h2 id="函数的定义-函数的参数和返回值"><a href="#函数的定义-函数的参数和返回值" class="headerlink" title="函数的定义-函数的参数和返回值"></a>函数的定义-函数的参数和返回值</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//求和[[include]] &lt;stdio.h&gt;int sum(int n);int main(){  int n,result;  printf("请输入任意参数n:");  scanf("%d",&amp;n);  result=sum(n);  printf("1+2+3+...+(n-1)+n的结果是:%d\n",result);  return 0;}//定义一个自动求和int sum(int n){  int result=0;  do  {      result += n--;  } while (n&gt;0);    return result;}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//比较两个整数的大小[[include]] &lt;stdio.h&gt;int max(int n,int m);int main(){  int n,m,result;  printf("请输入两个整数:");  scanf("%d%d",&amp;n,&amp;m);  result=max(n,m);  printf("两数较大参数为:%d\n",result);  return 0;}//定义一个自动求和int max(int n,int m){  int result;  result=n&lt;m?m:n; //三目运算符  /*if(n&lt;m)  {      return m;   //遇到return,子程序就直接返回,将值返回主函数  }  else  {      return n;  }*/}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一个函数实现一个功能</p><h2 id="函数定义-形参和实参"><a href="#函数定义-形参和实参" class="headerlink" title="函数定义-形参和实参"></a>函数定义-形参和实参</h2><p>函数定义的时候写的参数就是形参</p><p>函数调用时的参数就是实参</p><h2 id="难点-函数定义-传值和传址"><a href="#难点-函数定义-传值和传址" class="headerlink" title="难点!!-函数定义-传值和传址"></a>难点!!-函数定义-传值和传址</h2><p>比较下面两个程序</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"in main交换前:x=%d,y=%d\n"</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">swap</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"in main交换后:x=%d,y=%d\n"</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//定义一个交换函数</span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> temp<span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"in swap交换前:x=%d,y=%d\n"</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  temp<span class="token operator">=</span>x<span class="token punctuation">;</span>  x<span class="token operator">=</span>y<span class="token punctuation">;</span>  y<span class="token operator">=</span>temp<span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"in swap交换后:x=%d,y=%d\n"</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//打印结果</span>in main交换前<span class="token operator">:</span>x<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">5</span>in swap交换前<span class="token operator">:</span>x<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">5</span>in swap交换后<span class="token operator">:</span>x<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">3</span>in main交换后<span class="token operator">:</span>x<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">5</span><span class="token comment">//主函数的x,y为什么没有交换</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>x<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"in main交换前:x=%d,y=%d\n"</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"in main交换后:x=%d,y=%d\n"</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//定义一个交换函数</span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>x<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> temp<span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"in swap交换前:x=%d,y=%d\n"</span><span class="token punctuation">,</span><span class="token operator">*</span>x<span class="token punctuation">,</span><span class="token operator">*</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  temp<span class="token operator">=</span><span class="token operator">*</span>x<span class="token punctuation">;</span>  <span class="token operator">*</span>x<span class="token operator">=</span><span class="token operator">*</span>y<span class="token punctuation">;</span>  <span class="token operator">*</span>y<span class="token operator">=</span>temp<span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"in swap交换后:x=%d,y=%d\n"</span><span class="token punctuation">,</span><span class="token operator">*</span>x<span class="token punctuation">,</span><span class="token operator">*</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//打印结果</span>in main交换前<span class="token operator">:</span>x<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">5</span>in swap交换前<span class="token operator">:</span>x<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">5</span>in swap交换后<span class="token operator">:</span>x<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">3</span>in main交换后<span class="token operator">:</span>x<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">3</span><span class="token comment">//这里主函数x,y正确交换</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不同函数内的变量是独立的,使用指针来统一实参,形参指向的数据,来连接两个函数</p><p>传值和传址有什么区别</p><h2 id="传数组"><a href="#传数组" class="headerlink" title="传数组"></a>传数组</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">void</span> <span class="token function">get_array</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">get_array</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a[%d]=%d\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">get_array</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//把数组传递到get_array()函数中   return 0;}//打印结果a[0]=1a[1]=2a[2]=3a[3]=4a[4]=5a[5]=6a[6]=7a[7]=8a[8]=9a[9]=0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//传数组传递的是数组的首地址,在get_array()函数中改变元素的值会带回到主函数[[include]] &lt;stdio.h&gt;void get_array(int a[10]);void get_array(int a[10]){  int i;  a[5]=520;  for ( i = 0; i &lt; 10; i++)  {      printf("a[%d]=%d\n",i,a[i]);  }}int main(){  int a[10]={1,2,3,4,5,6,7,8,9,0};  int i;  get_array(a);  printf("在main函数中再打印一次...\n");  for ( i = 0; i &lt; 10; i++)  {      printf("a[%d]=%d\n",i,a[i]);  }   return 0;}//打印结果a[0]=1a[1]=2a[2]=3a[3]=4a[4]=5a[5]=520a[6]=7a[7]=8a[8]=9a[9]=0在main函数中再打印一次...a[0]=1a[1]=2a[2]=3a[3]=4a[4]=5a[5]=520//在get_array()函数中改变,带回主函数也被改变,说明在传数组时,传递的不是值而是数组地址a[6]=7a[7]=8a[8]=9a[9]=0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">void</span> <span class="token function">get_array</span><span class="token punctuation">(</span><span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">get_array</span><span class="token punctuation">(</span><span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof b:%d\n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof a:%d\n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">get_array</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//打印结果sizeof a:40//主函数中数组a占40个字节sizeof b:8//get_array()函数中,形参数组只占4个字节,就是地址应有的字节,也就是表示int类型一个元素的字节空间,说明形参数组传递的是首地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="可变参数-printf-函数的形参是如何实现可变的"><a href="#可变参数-printf-函数的形参是如何实现可变的" class="headerlink" title="可变参数-printf()函数的形参是如何实现可变的"></a>可变参数-printf()函数的形参是如何实现可变的</h2><p>要实现可变参数需要包含一个头文件</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdarg<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>va_listva_startva_argva_end<span class="token comment">//variable argument-可变参数</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可变参数的函数定义</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdarg<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//...说明参数的个数不确定,由n决定</span><span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>  <span class="token comment">//表示sum函数有n个参数</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> i<span class="token punctuation">,</span>sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  va_list vap<span class="token punctuation">;</span>    <span class="token comment">//va_list定义字符指针类型</span>  <span class="token function">va_start</span><span class="token punctuation">(</span>vap<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//将vap传入va_start()宏</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      sum<span class="token operator">+=</span><span class="token function">va_arg</span><span class="token punctuation">(</span>vap<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//用va_arg()获取后面每一个参数的值,并并定义每一个参数的数据类型</span>  <span class="token punctuation">}</span>  <span class="token function">va_end</span><span class="token punctuation">(</span>vap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//用va_end()关闭这个参数列表</span>  <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> result<span class="token punctuation">;</span>  result<span class="token operator">=</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"result1=%d\n"</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>  result<span class="token operator">=</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"result2=%d\n"</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>  result<span class="token operator">=</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"result3=%d\n"</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//打印结果</span>result1<span class="token operator">=</span><span class="token number">6</span>result2<span class="token operator">=</span><span class="token number">15</span>result3<span class="token operator">=</span><span class="token number">203</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="难点！-指针函数和函数指针"><a href="#难点！-指针函数和函数指针" class="headerlink" title="难点！-指针函数和函数指针"></a>难点！-指针函数和函数指针</h2><p>函数指针作为参数返回值的时候应该怎么应用它</p><h3 id="指针函数"><a href="#指针函数" class="headerlink" title="指针函数"></a>指针函数</h3><p>函数的类型就是函数的返回值，函数返回值可以是整形，浮点型，字符型，和指针类型。</p><p>使用指针变量作为函数返回值，就是指针函数。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">getWord</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">getWord</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">switch</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token char">'A'</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token string">"Apple"</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token char">'B'</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token string">"Banana"</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token char">'C'</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token string">"Cat"</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token char">'D'</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token string">"Dog"</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token string">"None"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> input<span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入一个字母:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span><span class="token function">getWord</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="不要返回局部变量的指针"><a href="#不要返回局部变量的指针" class="headerlink" title="不要返回局部变量的指针"></a>不要返回局部变量的指针</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">getWord</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">getWord</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"Apple"</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> str2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"Banana"</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> str3<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"Cat"</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> str4<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"Dog"</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> str5<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"None"</span><span class="token punctuation">;</span>  <span class="token keyword">switch</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token char">'A'</span><span class="token operator">:</span> <span class="token keyword">return</span> str1<span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token char">'B'</span><span class="token operator">:</span> <span class="token keyword">return</span> str2<span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token char">'C'</span><span class="token operator">:</span> <span class="token keyword">return</span> str3<span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token char">'D'</span><span class="token operator">:</span> <span class="token keyword">return</span> str4<span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token keyword">return</span> str5<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> input<span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入一个字母:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span><span class="token function">getWord</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="函数指针-指向函数的指针"><a href="#函数指针-指向函数的指针" class="headerlink" title="函数指针-指向函数的指针"></a>函数指针-指向函数的指针</h3><h4 id="函数指针的使用"><a href="#函数指针的使用" class="headerlink" title="函数指针的使用"></a>函数指针的使用</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">指针函数<span class="token keyword">int</span> <span class="token operator">*</span><span class="token function">p</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>函数指针<span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> num<span class="token operator">*</span>num<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//在main函数中不直接调用square函数,而是通过函数指针调用square函数int main(){  int num;  int (*fp)(int);  printf("请输入一个整数:");  scanf("%d",&amp;num);  fp = square;//函数名也是首地址  printf("%d*%d=%d\n",num,num,(*fp)(num));//指针函数通过指针指向square函数  return 0;}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="函数指针作为参数"><a href="#函数指针作为参数" class="headerlink" title="函数指针作为参数"></a>函数指针作为参数</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>fp<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span><span class="token keyword">int</span> num2<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span><span class="token keyword">int</span> num2<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> num1 <span class="token operator">-</span> num2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>fp<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span><span class="token keyword">int</span> num2<span class="token punctuation">)</span><span class="token comment">//函数指针作为calc函数的参数</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span>fp<span class="token punctuation">)</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"3+5=%d\n"</span><span class="token punctuation">,</span><span class="token function">calc</span><span class="token punctuation">(</span>add<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"3-5=%d\n"</span><span class="token punctuation">,</span><span class="token function">calc</span><span class="token punctuation">(</span>sub<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="函数指针作为返回值"><a href="#函数指针作为返回值" class="headerlink" title="函数指针作为返回值"></a>函数指针作为返回值</h4><p>比如这个函数的名字叫select,它本身有两个参数,返回返回值是一个函数指针,这个指针也有两个参数,并且其返回值为整型</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//现在让用户输入一个表达式,然后程序根据用户输入的运算符来决定调用add还是sub函数进行运算.</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>fp<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>fp<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token keyword">char</span> op<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span><span class="token keyword">int</span> num2<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span><span class="token keyword">int</span> num2<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> num1 <span class="token operator">-</span> num2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>fp<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span><span class="token keyword">int</span> num2<span class="token punctuation">)</span><span class="token comment">//函数指针作为calc函数的参数</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span>fp<span class="token punctuation">)</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token keyword">char</span> op<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token comment">//函数指针作为返回值</span><span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>op<span class="token punctuation">)</span>  <span class="token punctuation">{</span>  <span class="token keyword">case</span> <span class="token char">'+'</span><span class="token operator">:</span><span class="token keyword">return</span> add<span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token char">'-'</span><span class="token operator">:</span><span class="token keyword">return</span> sub<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> num1<span class="token punctuation">,</span>num2<span class="token punctuation">;</span>  <span class="token keyword">char</span> op<span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>fp<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入一个式子(如1+3):"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%c%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>num1<span class="token punctuation">,</span><span class="token operator">&amp;</span>op<span class="token punctuation">,</span><span class="token operator">&amp;</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span>  fp <span class="token operator">=</span> <span class="token function">select</span><span class="token punctuation">(</span>op<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %c %d = %d\n"</span><span class="token punctuation">,</span>num1<span class="token punctuation">,</span>op<span class="token punctuation">,</span>num2<span class="token punctuation">,</span><span class="token function">calc</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="局部变量与全局变量-从变量作用域角度"><a href="#局部变量与全局变量-从变量作用域角度" class="headerlink" title="局部变量与全局变量-从变量作用域角度"></a>局部变量与全局变量-从变量作用域角度</h2><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p>不同函数的变量无法互相访问</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">520</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"before,i=%d\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里的i是主函数的i  for (int i = 0; i &lt; 10; i++)//这里的i前有int定义,是在for里定义,只在for函数里访问  {      printf("%d\n",i);  }  printf("after,i=%d\n",i);//这里的i也是主函数的i  return 0;}//打印结果before,i=5200123456789after,i=520</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><ul><li><p>在函数里边定义的,我们叫局部变量;在函数外边定义的,我们叫外部变量,也叫全局变量</p></li><li><p>有时候,我们可能需要在多个函数中使用共同的一个变量,那么就会用到全局变量.因为全局变量可以被本程序中的其他函数所共用</p></li><li><p>如果不对全局变量进行初始化,那么它会自动初始化为0</p></li><li><p>如果在函数的内部存在一个与全局变量同名的局部变量,编译器并不会报错,而是在函数中屏蔽全局变量(也就是说在这个函数中,全局变量不起作用).</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//全局变量</span><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> sum<span class="token punctuation">;</span>    <span class="token comment">//sum全局变量,自动初始化为0,也可以对其进行初始化</span><span class="token keyword">void</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  sum<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  sum<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  sum<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sum=%d\n"</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//全局变量的屏蔽</span><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">520</span><span class="token punctuation">;</span>    <span class="token comment">//定义全局变量,a自动初始化为0,b初始化为520</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> b<span class="token punctuation">;</span>  <span class="token comment">//这里定义b,把全局变量屏蔽了</span>  a <span class="token operator">=</span> <span class="token number">880</span><span class="token punctuation">;</span>    <span class="token comment">//这里赋值,将全局变量a赋值880</span>  b <span class="token operator">=</span> <span class="token number">120</span><span class="token punctuation">;</span>    <span class="token comment">//这里是func中的b</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"in func:a=%d,b=%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"in main:a=%d,b=%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//func之前打印全局变量</span>  <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//执行func</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"in main:a=%d,b=%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//func之后打印全局变量,func中重新定义了b,全局变量b未改变</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//打印结果</span>in main<span class="token operator">:</span>a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">520</span>in func<span class="token operator">:</span>a<span class="token operator">=</span><span class="token number">880</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">120</span>in main<span class="token operator">:</span>a<span class="token operator">=</span><span class="token number">880</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">520</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="extern关键字"><a href="#extern关键字" class="headerlink" title="extern关键字"></a>extern关键字</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//全局变量在子函数之后定义,子函数还能掉用吗?怎样再能正确调用</span><span class="token comment">//错误案例</span><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//在func之后定义全局变量效果是什么呢?-报错:'count' undeclared (first use in this function)</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//func之后打印全局变量,func中重新定义了b,全局变量b未改变</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改上述错误调用全局变量</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">extern</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span><span class="token comment">//因为全局变量在该函数后面,因此要声明外部全局变量,才能正确使用全局变量  count++;}int count=0;//在func之后定义全局变量效果是什么呢?-报错:'count' undeclared (first use in this function)int main(){  func();  printf("%d\n",count);  //func之后打印全局变量,func中重新定义了b,全局变量b未改变  return 0;}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="不要大量使用全局变量"><a href="#不要大量使用全局变量" class="headerlink" title="不要大量使用全局变量"></a>不要大量使用全局变量</h3><ol><li>使用全局变量会使你的程序占用更多的内存,因为全局变量从被定义时候开始,知道程序退出才被释放,而局部变量则是当函数调用完成后就立即释放</li><li>会污染命名空间,虽然局部变量会屏蔽全局变量,但这样一来也会降低程序的可读性,人们往往很难一下子判断出每个变量的含义和作用范围</li><li>提高程序的耦合性,牵一发而动全身,时间久了,代码长了,你都不知道全局变量被哪些函数修改过</li><li>高内聚,低耦合.模块化设计应该尽可能设计内聚性强耦合性弱的模块,应该让每一个函数就是一个模块,每个模块就实现一个功能</li></ol><h2 id="作用域和链接属性-从空间角度"><a href="#作用域和链接属性-从空间角度" class="headerlink" title="作用域和链接属性-从空间角度"></a>作用域和链接属性-从空间角度</h2><h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><p>当变量被定义在程序的不同位置时,它的作用范围是不一样的,这个作用范围就是我们所说的作用域</p><p>函数的形式参数和局部变量作用域仅限于函数体</p><p>如果将变量定义于函数之外,该变量是所有函数均可使用的,称之为全局变量,它的作用域是整个文件</p><h4 id="C语言编译器可以确认4中不同类型的作用域"><a href="#C语言编译器可以确认4中不同类型的作用域" class="headerlink" title="C语言编译器可以确认4中不同类型的作用域:"></a>C语言编译器可以确认4中不同类型的作用域:</h4><h5 id="代码块作用域"><a href="#代码块作用域" class="headerlink" title="代码块作用域"></a>代码块作用域</h5><p>一对{}之内的所有语句</p><p>如：函数体、函数体内的复合语句</p><p>在代码块中定义的变量，具有代码块作用城。作用范围是从变量定义的位置开始，到标志该代码块结束的右大括号（}）处。</p><p>尽管函数的形式参数不在大括号内定义，但其同样具有代码块作用城，隶属于包含函数体的代码块。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>  <span class="token comment">//表示不需要任何参数{  int i = 100;    //i1  {      int i = 110;    //i2      {          int i=120;  //i3          printf("i=%d\n",i);      }      //i=110      {          printf("i=%d\n",i);//这里的是i2          int i=130;  //i4          printf("i=%d\n",i);      }      printf("i=%d\n",i);  }  printf("i=%d\n",i);  return 0;}//打印结果，不同代码块的i值不同，变量i的作用域各不相同i=120i=110i=130i=110i=100</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="文件作用域"><a href="#文件作用域" class="headerlink" title="文件作用域"></a>文件作用域</h5><p>任何在代码块之外声明的标识符都具有文件作用域，作用范围是从它们的声明位置开始，到文件的结尾处都是可以访问的。</p><p>另外，函数名也具有文件作用域，因为函数名本身也是在代码块之外。</p><p>拥有文件作用域：函数名，全局变量</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//声明要放在前面，不然作用域只能从定义开始到文件末尾，声明后，作用域就从声明处到文件末尾</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>  <span class="token comment">//表示不需要任何参数。作用域从声明到文件末尾</span><span class="token punctuation">{</span>  <span class="token keyword">extern</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span>   <span class="token comment">//声明代码块外部变量，作用域就扩大到这个代码块，且从这个声明到该代码块末尾  </span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment">//代码块内和之前都没有count变量的定义</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"in main,count=%d\n"</span><span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> count<span class="token punctuation">;</span>  <span class="token comment">//在main函数代码块后的变量,作用域为从定义开始到文件末尾</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  count<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"in func,count=%d\n"</span><span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//打印结果in func,count=1in main,count=2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="原形作用域"><a href="#原形作用域" class="headerlink" title="原形作用域"></a>原形作用域</h5><p><img src="/images/614-C语言程序设计/image-20210619212633266-1624109195168.png" alt="image-20210619212633266"></p><h5 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h5><p><img src="/images/614-C语言程序设计/image-20210619212728239-1624109249776.png" alt="image-20210619212728239"></p><h3 id="链接属性"><a href="#链接属性" class="headerlink" title="链接属性"></a>链接属性</h3><p>将用C语言写的源代码进行编译转化为目标代码（机器代码），然后将链接文件和相关的库文件链接得到一个可执行文件</p><h4 id="编译器的工作流程"><a href="#编译器的工作流程" class="headerlink" title="编译器的工作流程"></a>编译器的工作流程</h4><p><a href="https://fishc.com.cn/forum.php?mod=viewthread&amp;tid=78063&amp;extra=page%3D1%26filter%3Dtypeid%26typeid%3D571">编译器的工作流程,《带你学C带你飞》【第一季】,C\C++交流,鱼C论坛 - Powered by Discuz! (fishc.com.cn)</a></p><h4 id="链接属性-不同文件的同名标志符，编译器是如何处理的"><a href="#链接属性-不同文件的同名标志符，编译器是如何处理的" class="headerlink" title="链接属性-不同文件的同名标志符，编译器是如何处理的"></a>链接属性-不同文件的同名标志符，编译器是如何处理的</h4><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">external多个文件中声明的同名标识符表示一个实体internal单个文件中声明的同名标识符表示同一个实体none声明的同名标识符被当作独立不同的实体只有具备文件作用域的标识符才能拥有external或internal的链接属性，其他作用域的标识符都是none属性默认情况下，具备文件作用域的标识符拥有external属性。也就是说该标识符允许跨文件访问。对于external属性的标识符，无论在不同文件中声明多少次，表示的都是一个实体<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//主程序test.c[[include]] &lt;stdio.h&gt;//vs code环境下与外界文件的链接方式[[include]] "外界文件名.c"[[include]]"1.c"   //调用外部文件1.c[[include]]"2.c"   //调用外部文件2.c[[include]]"3.c"   //调用外部文件3.cvoid a(void);void b(void);void c(void);int sum;    //sum全局变量,自动初始化为0,也可以对其进行初始化int main(){  a();  b();  c();  b();  printf("小郭今天一共被抱了%d次!\n",sum);  return 0;}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//1.cextern int sum;void a(void){  sum++;}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//2.cextern int sum;void b(void){  sum++;}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//3.cextern int sum;void c(void){  sum++;}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">使用 static关键字可以使得原先拥有 externa1属性的标识符变为 internal属性。这里有两点需要注意：使用 static关键字修改链接属性，只对具有文件作用城的标识符生效（对于拥有其他作用域的标识符是另一种功能）链接属性只能修改一次，也就是说一旦将标识符的链接属性变为 interna1，就无法变回 externa1了<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//test.c[[include]] &lt;stdio.h&gt;[[include]]"1.c"   //调用外部文件1.c[[include]]"2.c"   //调用外部文件2.c[[include]]"3.c"   //调用外部文件3.cvoid a(void);void b(void);void c(void);static int sum;    //前面加上static后external全局变量变成internal变量,这是作用域仅限test.c文件int main(){  a();  b();  c();  b();  printf("小郭今天一共被抱了%d次!\n",sum);  return 0;}//因1.c，2.c，3.c均无法调用sum变量，文件将报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="生存期与存储类型-从时间角度"><a href="#生存期与存储类型-从时间角度" class="headerlink" title="生存期与存储类型-从时间角度"></a>生存期与存储类型-从时间角度</h2><h3 id="C语言的变量拥有两种生存期"><a href="#C语言的变量拥有两种生存期" class="headerlink" title="C语言的变量拥有两种生存期"></a>C语言的变量拥有两种生存期</h3><p><img src="/images/614-C语言程序设计/image-20210619223838322-1624113520237.png" alt="image-20210619223838322"></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> C语言的变量拥有两种生存期1.静态存储期2.自动存储期具有文件作用城的变量属于静态存储期，函数也属于静态存储期。属于静态存储期的变量在程序执行期问将一直占据存储空间，直到程序关闭才释放。具有代码抉作用域的变量一般情况下属于自动存储期，属于自动存储期的变量在代码抉结束时将自动释放存储空间。# 存储类型存储类型其实是指存储变量值的内存类型，C语言提供了5种不同的存储类型：1. auto自动变量在代码块中声明的变量默认的存储类型就是自动变量，使用关键字auto来描述2. register寄存器变量将一个变量声明为寄存器变量，那么该变量就有可能被存放于CPU寄存器变量和自动变量在很多方面的是一样的，它们都拥有代码块作用域，自动存储期和空连接属性不过这里有一点需要注意的是：当你将变量声明为寄存器量，那么你就没办法通过取址运算符获得该变量的地址。3. static静态局部变量使用 static来声明局部变量，那么就可以将局部变量指定为静态局部变量static使得局部变量具有静态存储期，所以它的生存期与全局变量一样，直到程序结束才释放。4. extern作用于文件作用域的 static和 extern, static关键字使得默认具有 external链接属性的标识符变成 interna1链接属性，而 extern关键字是用于告诉编峄器这个意量或函数在别的地方已经定义过了，先去别的地方找找，不要急着报错5. typedef为数据类型定义一个别名</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="函数递归-函数调用自身"><a href="#函数递归-函数调用自身" class="headerlink" title="函数递归-函数调用自身"></a>函数递归-函数调用自身</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//无递归终止条件</span><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">void</span> <span class="token function">recursion</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">recursion</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hi!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">recursion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">recursion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//函数将永远执行下去，所以递归函数必须要有终止条件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>递归必须要有结束条件，否则程序将崩溃</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//加入递归终止条件</span><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">void</span> <span class="token function">recursion</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">recursion</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">static</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hi!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">--</span>count<span class="token punctuation">)</span><span class="token comment">//加入结束条件</span>  <span class="token punctuation">{</span>      <span class="token function">recursion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">recursion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>汉诺塔</p><p>谢尔宾斯基三角形</p><p>目录树的索引</p><h3 id="用递归求阶乘"><a href="#用递归求阶乘" class="headerlink" title="用递归求阶乘"></a>用递归求阶乘</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//用for循环实现阶乘</span><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">long</span> <span class="token function">fact</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token function">fact</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">long</span> result<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> num<span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">;</span> num<span class="token operator">--</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      result <span class="token operator">*=</span>num<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> num<span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入一个正整数:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d的阶乘为:%d\n"</span><span class="token punctuation">,</span>num<span class="token punctuation">,</span><span class="token function">fact</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//用递归求阶乘</span><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">long</span> <span class="token function">fact</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token function">fact</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">long</span> result<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      result<span class="token operator">=</span>num<span class="token operator">*</span><span class="token function">fact</span><span class="token punctuation">(</span>num<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>      result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> num<span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入一个正整数:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d的阶乘为:%d\n"</span><span class="token punctuation">,</span>num<span class="token punctuation">,</span><span class="token function">fact</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实现递归要满足两个基本条件"><a href="#实现递归要满足两个基本条件" class="headerlink" title="实现递归要满足两个基本条件"></a>实现递归要满足两个基本条件</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 调用函数本身</span><span class="token title important"><span class="token punctuation">#</span> 设置了正确的结束条件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="慎用递归"><a href="#慎用递归" class="headerlink" title="慎用递归"></a>慎用递归</h3><p>普通程序员用迭代，天才程序员用递归，但我们宁可做普通程序员！！</p><p>递归并没有在效率上有优势，而且可读性差</p><h3 id="汉诺塔-递归求解"><a href="#汉诺塔-递归求解" class="headerlink" title="汉诺塔-递归求解"></a>汉诺塔-递归求解</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> 对于游戏的玩法，我们可以简单的分解为三个步骤1.将前63个盘子从X移动到Y上2.将最底下的第64个盘子从X移动到Z上3.将Y上的63个盘子移动到Z上问题一：将X上的63个盘子借助Z移到Y上  问题一“将Ⅹ上的63个盘子借助Z移到Y上”拆解为：1.将前62个盘子从X移动到Z上2.将最底下的第63个盘子移动到Y上3.将Z上的62个盘子移动到Y上问题二：将Y上的63个盘子借助x移到Z上  问题二“将Y上的63个盘子借助X移到Z上”拆解为：  1.将前62个盘子从Y移动到X上。2.将最底下的第63个盘子移动到Z上。3.将X上的62个盘子移动到Y上。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">void</span> <span class="token function">hanoi</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">char</span> x<span class="token punctuation">,</span><span class="token keyword">char</span> y<span class="token punctuation">,</span><span class="token keyword">char</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">hanoi</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">char</span> x<span class="token punctuation">,</span><span class="token keyword">char</span> y<span class="token punctuation">,</span><span class="token keyword">char</span> z<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c --&gt; %c\n"</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>      <span class="token function">hanoi</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>z<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c --&gt; %c\n"</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">hanoi</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">,</span>x<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> n<span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入汉诺塔的层数:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">hanoi</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token char">'x'</span><span class="token punctuation">,</span><span class="token char">'y'</span><span class="token punctuation">,</span><span class="token char">'z'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="快速排序-递归的典型应用"><a href="#快速排序-递归的典型应用" class="headerlink" title="快速排序-递归的典型应用"></a>快速排序-递归的典型应用</h2><p>分治法-大事化小，小事化了</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//快速排序</span><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">void</span> <span class="token function">qucik_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">qucik_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">int</span> i<span class="token operator">=</span>left<span class="token punctuation">,</span>j<span class="token operator">=</span>right<span class="token punctuation">;</span>  <span class="token keyword">int</span> temp<span class="token punctuation">;</span>  <span class="token keyword">int</span> pivot<span class="token punctuation">;</span>  pivot<span class="token operator">=</span>array<span class="token punctuation">[</span><span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>j<span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token comment">//从左到右找到大于等于基准点的元素</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>pivot<span class="token punctuation">)</span>      <span class="token punctuation">{</span>          i<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>         <span class="token comment">//从右到左找到小于等于基准点的元素</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&gt;</span>pivot<span class="token punctuation">)</span>      <span class="token punctuation">{</span>          j<span class="token operator">--</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment">//如果i&lt;=j,则互换元素</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>j<span class="token punctuation">)</span>      <span class="token punctuation">{</span>          temp <span class="token operator">=</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>          array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>          array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span>          i<span class="token operator">++</span><span class="token punctuation">;</span>          j<span class="token operator">--</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>left<span class="token operator">&lt;</span>j<span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token function">qucik_sort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span>left<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span> right<span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token function">qucik_sort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span>i<span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">73</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">118</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">115</span><span class="token punctuation">,</span> <span class="token number">104</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> i<span class="token punctuation">,</span>length<span class="token punctuation">;</span>  length <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">qucik_sort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"排序后的结果是:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="什么是定义什么是声明？"><a href="#什么是定义什么是声明？" class="headerlink" title="什么是定义什么是声明？"></a>什么是定义什么是声明？</h2><p>当一个变量被定义的肘候，编译器为变量申请内存空间并填充一些值。<br>当一个变量被声明的肘候，编译器就知道该变量被定义在其他地方。</p><p>声明是通知编译器该变量名及相关的类型已存在，不需要再为此申请内存空间。</p><p>局部变量既是定义又是声明。<br>定义只能来一次，否则就叫做重复定义某个同名变量；而声明可以有很多次。</p><h1 id="动态内存管理"><a href="#动态内存管理" class="headerlink" title="动态内存管理"></a>动态内存管理</h1><h2 id="内存管理函数-malloc-free-calloc-realloc"><a href="#内存管理函数-malloc-free-calloc-realloc" class="headerlink" title="内存管理函数-malloc\free\calloc\realloc"></a>内存管理函数-malloc\free\calloc\realloc</h2><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 灵活的内存管理函数</span><span class="token list punctuation">1.</span> malloc申请动态内存空间函数原型：void <span class="token italic"><span class="token punctuation">*</span><span class="token content">malloc(size_t size);malloc函数向系统申请分配size个字节的内存空间,并返回一个指向这块空间的指针如果函数调用成功,返回一个指向申请的内存空间的指针,由于返回类型是void指针(void </span><span class="token punctuation">*</span></span>),所以它可以被转换成任何类型数据;如果函数调用失败,返回值是NULL。另外,如果size参数设置为0,返回值也可能是NULL,但这并不意味折函数调用失败<span class="token list punctuation">2.</span> free释放动态内存空间函数原型: void free(void *ptr);free函数释放ptr参数指向的内存空间。该内存空间必须是由ma1loc、cal1loc或rea1loc函数申请的。否则，该函数将导致未定义行为。如果ptr参数是NULL，则不执行任何作。注意：该函数并不会修改ptr参数的值，所以调用后它仍然指向原来的地方（变为非法空间）。<span class="token list punctuation">3.</span> calloc 申请并初始化一系列内存空间<span class="token list punctuation">4.</span> realloc重新分配内存空间<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//malloc函数</span><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdlib<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span>  ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"分配内存失败!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入一个整数:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"您输入的整数是:%d\n"</span><span class="token punctuation">,</span><span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//free函数</span><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdlib<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span>  ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"分配内存失败!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入一个整数:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"您输入的整数是:%d\n"</span><span class="token punctuation">,</span><span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//释放内存空间</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"您输入的整数是:%d\n"</span><span class="token punctuation">,</span><span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//因为otr空间释放,打印出错</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//打印结果</span>请输入一个整数<span class="token operator">:</span><span class="token number">16</span>您输入的整数是<span class="token operator">:</span><span class="token number">16</span>您输入的整数是<span class="token operator">:</span><span class="token number">7340368</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="内存泄露"><a href="#内存泄露" class="headerlink" title="内存泄露"></a>内存泄露</h2><p>如果申请的动态内存空间没有及时释放会怎么样?</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 导致内存泄漏的主要有两种情况:</span><span class="token list punctuation">1.</span> 隐式内存泄漏(即用完内存没有及时使用free函数释放)<span class="token list punctuation">2.</span> 丢失内存块地址malloc和free函数应该成对使用,避免内存泄露<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="初始化内存空间"><a href="#初始化内存空间" class="headerlink" title="初始化内存空间"></a>初始化内存空间</h2><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 以mem开头的函数被编入字符串标准库，函数的声明包含在 string.h这个头文件中：</span><span class="token list punctuation">1.</span> memset使用一个常量字节填充内存空间<span class="token list punctuation">2.</span> memcpy拷贝内存空间<span class="token list punctuation">3.</span> memmove拷贝内存空间<span class="token list punctuation">4.</span> memcmp比较内存空间<span class="token list punctuation">5.</span> memchr在内存空间中搜索一个字符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdlib<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>string<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">[</span>define<span class="token punctuation">]</span><span class="token punctuation">]</span> N <span class="token number">10</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> <span class="token operator">*</span>ptr<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span>  ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>N <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr <span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">memset</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>N <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化ptr指向内存空间</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="calloc函数"><a href="#calloc函数" class="headerlink" title="calloc函数"></a>calloc函数</h2><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> 函数原型：void <span class="token italic"><span class="token punctuation">*</span><span class="token content">calloc（size_t nmemb, size_t size）；Ca1loc函数在内存中动态地申请 nmemb个长度为size的连续内存空间（即申请的总空间尺寸为 nmemb</span><span class="token punctuation">*</span></span>size），这些内存空间全部被初始化为0。ca11oc函数与ma11oc函数的一个重要区别是：Ca1oc函数在申请完内存后，自动初始化该内存空间为零malloc函数不进行初始化操作，里边数据是随机的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/614-C语言程序设计/image-20210620180157692-1624183319368.png" alt="image-20210620180157692"></p><h2 id="realloc函数"><a href="#realloc函数" class="headerlink" title="realloc函数"></a>realloc函数</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//第一次申请内存不够用重新申请的复杂操作,将这与realloc函数比较</span><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdlib<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>string<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> <span class="token operator">*</span>ptr1<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token operator">*</span>ptr2<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token comment">//第一次申请内存空间</span>  ptr1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//进行若干操作之后发现ptr1申请的内存空间竟然不够用!!</span>  <span class="token comment">//第二次申请的内存空间</span>  ptr2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">20</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//将ptr1的数据拷贝到ptr2中</span>  <span class="token function">memcpy</span><span class="token punctuation">(</span>ptr2<span class="token punctuation">,</span>ptr1<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">free</span><span class="token punctuation">(</span>ptr1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//对ptr2申请的内存空间进行若干操作</span>  <span class="token function">free</span><span class="token punctuation">(</span>ptr2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">函数原型：void <span class="token italic"><span class="token punctuation">*</span><span class="token content">realloc(void </span><span class="token punctuation">*</span></span>ptr, size t size);以下几点是需要注意的：rea11oc函数修改ptr指向的内存空间大小为Size字节如果新分配的内存空间比原来的大，则旧内存块的数据不会发生改变；如果新的内存空间大小小于旧的内存空间，可能会导致数据丢失，慎用！该函数将移动内存空间的数据并返回新的指针如果ptr参数为NUL，那么调用该函数就相当于调用ma1oc（size）如果size参数为0，并且ptr参数不为NULL，那么调用该函数就相当于调用free（ptr）除非ptr参数为NULL，否则ptr的值必须由先前调用malloc、calloc或realloc函数返回<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdlib<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> i<span class="token punctuation">,</span>num<span class="token punctuation">;</span>  <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token comment">//注意,这里必须初始化为NULL.指针初始化后才能当数组用</span>  <span class="token keyword">do</span>  <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入一个整数(输入-1表示结束):"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>      count<span class="token operator">++</span><span class="token punctuation">;</span>      ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">realloc</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span>count<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      ptr<span class="token punctuation">[</span>count<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>num<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入的整数分别是:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="C语言的内存布局"><a href="#C语言的内存布局" class="headerlink" title="C语言的内存布局"></a>C语言的内存布局</h1><p>C语言的内存布局规律</p><p><img src="/images/614-C语言程序设计/image-20210620204527145-1624193128840.png" alt="image-20210620204527145"></p><p><img src="/images/614-C语言程序设计/image-20210620204705742-1624193228329.png" alt="image-20210620204705742"></p><p><img src="/images/614-C语言程序设计/image-20210620204803321-1624193285018.png" alt="image-20210620204803321"></p><p><img src="/images/614-C语言程序设计/image-20210620204844568-1624193326643.png" alt="image-20210620204844568"></p><h2 id="堆和栈"><a href="#堆和栈" class="headerlink" title="堆和栈"></a>堆和栈</h2><p><img src="/images/614-C语言程序设计/image-20210620212633503-1624195595459.png" alt="image-20210620212633503"></p><p><img src="/images/614-C语言程序设计/image-20210620212732169-1624195653802.png" alt="image-20210620212732169"></p><p>局部变量 函数的参数 函数的返回值 存放到 栈里面</p><h2 id="堆和栈的区别"><a href="#堆和栈的区别" class="headerlink" title="堆和栈的区别"></a>堆和栈的区别</h2><p><img src="/images/614-C语言程序设计/image-20210620212900232-1624195742661.png" alt="image-20210620212900232"></p><p><img src="/images/614-C语言程序设计/image-20210620213557898-1624196159966.png" alt="image-20210620213557898"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">char</span> a <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>b<span class="token punctuation">;</span>p<span class="token operator">=</span><span class="token number">258</span><span class="token punctuation">;</span><span class="token comment">//8byte=256bit</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//为什么有些编译器会输出1,2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="预处理命令"><a href="#预处理命令" class="headerlink" title="预处理命令"></a>预处理命令</h1><h2 id="高级宏定义"><a href="#高级宏定义" class="headerlink" title="高级宏定义"></a>高级宏定义</h2><h3 id="不带参数宏定义"><a href="#不带参数宏定义" class="headerlink" title="不带参数宏定义"></a>不带参数宏定义</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">替换操作<span class="token punctuation">[</span><span class="token punctuation">[</span>define<span class="token punctuation">]</span><span class="token punctuation">]</span> PI <span class="token number">3.14</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/images/614-C语言程序设计/image-20210621011720991-1624209442794.png" alt="image-20210621011720991"></p><h3 id="带参数宏定义"><a href="#带参数宏定义" class="headerlink" title="带参数宏定义"></a>带参数宏定义</h3><p><img src="/images/614-C语言程序设计/image-20210621112254780-1624245776267.png" alt="image-20210621112254780"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">[</span>define<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token function">MAX</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//宏定义没有进行类型说明,加括号是防止意外的发生</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入两个整数:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d是较大的那个数!\n"</span><span class="token punctuation">,</span><span class="token function">MAX</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token comment">//[[define]] SQUARE(x) x*x</span><span class="token punctuation">[</span><span class="token punctuation">[</span>define<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token function">SQUARE</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> x<span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入一个整数:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d的平方是:%d!\n"</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span><span class="token function">SQUARE</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d的平方是:%d!\n"</span><span class="token punctuation">,</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">SQUARE</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//机械替换x*x为x+1这就是为什么前面宏定义要加括号</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="内联函数"><a href="#内联函数" class="headerlink" title="内联函数"></a>内联函数</h2><p>引入内联函数来解决程序中函数调用的效率问题</p><p><img src="/images/614-C语言程序设计/image-20210621115200129-1624247522021.png" alt="image-20210621115200129"></p><p><img src="/images/614-C语言程序设计/image-20210621115318990-1624247600981.png" alt="image-20210621115318990"></p><h2 id="和"><a href="#和" class="headerlink" title="#和"></a>#和</h2><p><img src="/images/614-C语言程序设计/image-20210621120233671-1624248155442.png" alt="image-20210621120233671"></p><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><p><img src="/images/614-C语言程序设计/image-20210621120430537-1624248272192.png" alt="image-20210621120430537"></p><h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><h2 id="条件编译"><a href="#条件编译" class="headerlink" title="条件编译"></a>条件编译</h2><h1 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h1><h2 id="结构体的声明"><a href="#结构体的声明" class="headerlink" title="结构体的声明"></a>结构体的声明</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> 结构体名称<span class="token punctuation">{</span>  结构体成员<span class="token number">1</span><span class="token punctuation">;</span>  结构体成员<span class="token number">2</span><span class="token punctuation">;</span>  结构体成员<span class="token number">3</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">;</span>如<span class="token operator">:</span><span class="token keyword">struct</span> <span class="token class-name">Book</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> title<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//书名</span>  <span class="token keyword">char</span> author<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//作者</span>  <span class="token keyword">float</span> price<span class="token punctuation">;</span><span class="token comment">//价格</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> date<span class="token punctuation">;</span><span class="token comment">//出版日期</span>  <span class="token keyword">char</span> publisher<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//出版商</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="定义结构体类型变量"><a href="#定义结构体类型变量" class="headerlink" title="定义结构体类型变量"></a>定义结构体类型变量</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">Book</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> title<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//书名</span>  <span class="token keyword">char</span> author<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//作者</span>  <span class="token keyword">float</span> price<span class="token punctuation">;</span><span class="token comment">//价格</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> date<span class="token punctuation">;</span><span class="token comment">//出版日期</span>  <span class="token keyword">char</span> publisher<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//出版商</span><span class="token punctuation">}</span>book<span class="token punctuation">;</span><span class="token comment">//在此处定义</span><span class="token comment">//或者在main函数中定义</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">struct</span> <span class="token class-name">Book</span> book<span class="token punctuation">;</span><span class="token comment">//在main函数中定义</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="访问结构体变量"><a href="#访问结构体变量" class="headerlink" title="访问结构体变量"></a>访问结构体变量</h3><p><img src="/images/614-C语言程序设计/image-20210621125409655-1624251251271.png" alt="image-20210621125409655"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">struct</span> <span class="token class-name">Book</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> title<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//书名</span>  <span class="token keyword">char</span> author<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//作者</span>  <span class="token keyword">float</span> price<span class="token punctuation">;</span><span class="token comment">//价格</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> date<span class="token punctuation">;</span><span class="token comment">//出版日期</span>  <span class="token keyword">char</span> publisher<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//出版商</span><span class="token punctuation">}</span>book<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入书名:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>book<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入作者:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>book<span class="token punctuation">.</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入售价:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%f"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>book<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入出版日期:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>book<span class="token punctuation">.</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入出版社:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>book<span class="token punctuation">.</span>publisher<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n=====数据录入完毕=====\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"书名:%s\n"</span><span class="token punctuation">,</span>book<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"作者:%s\n"</span><span class="token punctuation">,</span>book<span class="token punctuation">.</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"售价:%.2f\n"</span><span class="token punctuation">,</span>book<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"出版日期:%d\n"</span><span class="token punctuation">,</span>book<span class="token punctuation">.</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"出版商:%s\n"</span><span class="token punctuation">,</span>book<span class="token punctuation">.</span>publisher<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="初始化结构体变量"><a href="#初始化结构体变量" class="headerlink" title="初始化结构体变量"></a>初始化结构体变量</h3><p><img src="/images/614-C语言程序设计/image-20210621142926037-1624256968115.png" alt="image-20210621142926037"></p><p><img src="/images/614-C语言程序设计/image-20210621143311855-1624257193761.png" alt="image-20210621143311855"></p><h2 id="结构体打包-内存优化"><a href="#结构体打包-内存优化" class="headerlink" title="结构体打包-内存优化"></a>结构体打包-内存优化</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">struct</span> <span class="token class-name">A</span>  <span class="token punctuation">{</span>      <span class="token keyword">char</span> a<span class="token punctuation">;</span>      <span class="token keyword">int</span> b<span class="token punctuation">;</span>      <span class="token keyword">char</span> c<span class="token punctuation">;</span>  <span class="token punctuation">}</span>a<span class="token operator">=</span><span class="token punctuation">{</span><span class="token char">'X'</span><span class="token punctuation">,</span><span class="token number">520</span><span class="token punctuation">,</span><span class="token char">'0'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"size of a = %d\n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//打印结果</span>size of a <span class="token operator">=</span> <span class="token number">12</span><span class="token comment">//为什么是12而不是6</span><span class="token comment">//编译器对结构体内存对齐的结果</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/614-C语言程序设计/image-20210621144551134-1624257953205.png" alt="image-20210621144551134"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//调整后</span><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">struct</span> <span class="token class-name">A</span>  <span class="token punctuation">{</span>      <span class="token keyword">char</span> a<span class="token punctuation">;</span>      <span class="token keyword">char</span> c<span class="token punctuation">;</span>      <span class="token keyword">int</span> b<span class="token punctuation">;</span>  <span class="token punctuation">}</span>a<span class="token operator">=</span><span class="token punctuation">{</span><span class="token char">'X'</span><span class="token punctuation">,</span><span class="token char">'0'</span><span class="token punctuation">,</span><span class="token number">520</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"size of a = %d\n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//打印结果</span>size of a <span class="token operator">=</span> <span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/614-C语言程序设计/image-20210621144752203-1624258074466.png" alt="image-20210621144752203"></p><h2 id="结构体嵌套"><a href="#结构体嵌套" class="headerlink" title="结构体嵌套"></a>结构体嵌套</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">struct</span> <span class="token class-name">Date</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> year<span class="token punctuation">;</span>  <span class="token keyword">int</span> month<span class="token punctuation">;</span>  <span class="token keyword">int</span> day<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Book</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> title<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//书名</span>  <span class="token keyword">char</span> author<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//作者</span>  <span class="token keyword">float</span> price<span class="token punctuation">;</span><span class="token comment">//价格</span>  <span class="token keyword">struct</span> <span class="token class-name">Date</span> date<span class="token punctuation">;</span><span class="token comment">//出版日期</span>  <span class="token keyword">char</span> publisher<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//出版商</span><span class="token punctuation">}</span>book <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string">"带你学C带你飞"</span><span class="token punctuation">,</span>  <span class="token string">"小甲鱼"</span><span class="token punctuation">,</span>  <span class="token number">48.80</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span><span class="token number">2017</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"清华大学出版社"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"书名:%s\n"</span><span class="token punctuation">,</span>book<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"作者:%s\n"</span><span class="token punctuation">,</span>book<span class="token punctuation">.</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"售价:%.2f\n"</span><span class="token punctuation">,</span>book<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"出版日期:%d-%d-%d\n"</span><span class="token punctuation">,</span>book<span class="token punctuation">.</span>date<span class="token punctuation">.</span>year<span class="token punctuation">,</span>book<span class="token punctuation">.</span>date<span class="token punctuation">.</span>month<span class="token punctuation">,</span>book<span class="token punctuation">.</span>date<span class="token punctuation">.</span>day<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"出版商:%s\n"</span><span class="token punctuation">,</span>book<span class="token punctuation">.</span>publisher<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="结构体数组"><a href="#结构体数组" class="headerlink" title="结构体数组"></a>结构体数组</h2><h3 id="结构体数组的定义"><a href="#结构体数组的定义" class="headerlink" title="结构体数组的定义"></a>结构体数组的定义</h3><p><img src="/images/614-C语言程序设计/image-20210621170641829-1624266404265.png" alt="image-20210621170641829"></p><p><img src="/images/614-C语言程序设计/image-20210621170716442-1624266438252.png" alt="image-20210621170716442"></p><h3 id="初始化结构体数组"><a href="#初始化结构体数组" class="headerlink" title="初始化结构体数组"></a>初始化结构体数组</h3><p><img src="/images/614-C语言程序设计/image-20210621170828821-1624266510425.png" alt="image-20210621170828821"></p><h2 id="结构体指针"><a href="#结构体指针" class="headerlink" title="结构体指针"></a>结构体指针</h2><p><img src="/images/614-C语言程序设计/image-20210621171019066-1624266620578.png" alt="image-20210621171019066"></p><h3 id="通过结构体指针访问结构体成员"><a href="#通过结构体指针访问结构体成员" class="headerlink" title="通过结构体指针访问结构体成员"></a>通过结构体指针访问结构体成员</h3><p><img src="/images/614-C语言程序设计/image-20210621171305594-1624266787497.png" alt="image-20210621171305594"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//(*结构体指针).成员名</span><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">struct</span> <span class="token class-name">Date</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> year<span class="token punctuation">;</span>  <span class="token keyword">int</span> month<span class="token punctuation">;</span>  <span class="token keyword">int</span> day<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Book</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> title<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//书名</span>  <span class="token keyword">char</span> author<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//作者</span>  <span class="token keyword">float</span> price<span class="token punctuation">;</span><span class="token comment">//价格</span>  <span class="token keyword">struct</span> <span class="token class-name">Date</span> date<span class="token punctuation">;</span><span class="token comment">//出版日期</span>  <span class="token keyword">char</span> publisher<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//出版商</span><span class="token punctuation">}</span>book <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string">"带你学C带你飞"</span><span class="token punctuation">,</span>  <span class="token string">"小甲鱼"</span><span class="token punctuation">,</span>  <span class="token number">48.80</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span><span class="token number">2017</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"清华大学出版社"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">struct</span> <span class="token class-name">Book</span> <span class="token operator">*</span>pt<span class="token punctuation">;</span>  pt <span class="token operator">=</span> <span class="token operator">&amp;</span>book<span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"书名:%s\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token operator">*</span>pt<span class="token punctuation">)</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"作者:%s\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token operator">*</span>pt<span class="token punctuation">)</span><span class="token punctuation">.</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"售价:%.2f\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token operator">*</span>pt<span class="token punctuation">)</span><span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"出版日期:%d-%d-%d\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token operator">*</span>pt<span class="token punctuation">)</span><span class="token punctuation">.</span>date<span class="token punctuation">.</span>year<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token operator">*</span>pt<span class="token punctuation">)</span><span class="token punctuation">.</span>date<span class="token punctuation">.</span>month<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token operator">*</span>pt<span class="token punctuation">)</span><span class="token punctuation">.</span>date<span class="token punctuation">.</span>day<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"出版商:%s\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token operator">*</span>pt<span class="token punctuation">)</span><span class="token punctuation">.</span>publisher<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">//结构体指针-&gt;成员名[[include]] &lt;stdio.h&gt;struct Date{  int year;  int month;  int day;};struct Book{  char title[128];//书名  char author[40];//作者  float price;//价格  struct Date date;//出版日期  char publisher[40];//出版商}book = {  "带你学C带你飞",  "小甲鱼",  48.80,  {2017,11,11},  "清华大学出版社"};int main(void){  struct Book *pt;  pt = &amp;book;  printf("书名:%s\n",pt -&gt;title);  printf("作者:%s\n",pt -&gt;author);  printf("售价:%.2f\n",pt -&gt;price);  printf("出版日期:%d-%d-%d\n",pt -&gt;date.year,pt -&gt;date.month,pt -&gt;date.day);  printf("出版商:%s\n",pt -&gt;publisher);  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="传递结构体变量"><a href="#传递结构体变量" class="headerlink" title="传递结构体变量"></a>传递结构体变量</h2><p>两个结构体变量是否能够直接赋值?</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">struct</span> <span class="token class-name">Test</span>  <span class="token punctuation">{</span>      <span class="token keyword">int</span> x<span class="token punctuation">;</span>      <span class="token keyword">int</span> y<span class="token punctuation">;</span>  <span class="token punctuation">}</span>t1<span class="token punctuation">,</span>t2<span class="token punctuation">;</span>  t1<span class="token punctuation">.</span>x<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>  t1<span class="token punctuation">.</span>y<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>  t2<span class="token operator">=</span>t1<span class="token punctuation">;</span><span class="token comment">//结构体变量直接赋值</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"t2.x=%d,t2.y=%d\n"</span><span class="token punctuation">,</span>t2<span class="token punctuation">.</span>x<span class="token punctuation">,</span>t2<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//打印结果</span>t2<span class="token punctuation">.</span>x<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>t2<span class="token punctuation">.</span>y<span class="token operator">=</span><span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">struct</span> <span class="token class-name">Date</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> year<span class="token punctuation">;</span>  <span class="token keyword">int</span> month<span class="token punctuation">;</span>  <span class="token keyword">int</span> day<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Book</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> title<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//书名</span>  <span class="token keyword">char</span> author<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//作者</span>  <span class="token keyword">float</span> price<span class="token punctuation">;</span><span class="token comment">//价格</span>  <span class="token keyword">struct</span> <span class="token class-name">Date</span> date<span class="token punctuation">;</span><span class="token comment">//出版日期</span>  <span class="token keyword">char</span> publisher<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//出版商</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Book</span> <span class="token function">getinput</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Book</span> book<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Book</span> <span class="token function">getinput</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Book</span> book<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入书名:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>book<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入作者:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>book<span class="token punctuation">.</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入售价:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%f"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>book<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入出版日期:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d-%d-%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>book<span class="token punctuation">.</span>date<span class="token punctuation">.</span>year<span class="token punctuation">,</span><span class="token operator">&amp;</span>book<span class="token punctuation">.</span>date<span class="token punctuation">.</span>month<span class="token punctuation">,</span><span class="token operator">&amp;</span>book<span class="token punctuation">.</span>date<span class="token punctuation">.</span>day<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入出版社:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>book<span class="token punctuation">.</span>publisher<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> book<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">printBook</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Book</span> book<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"书名:%s\n"</span><span class="token punctuation">,</span>book<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"作者:%s\n"</span><span class="token punctuation">,</span>book<span class="token punctuation">.</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"售价:%.2f\n"</span><span class="token punctuation">,</span>book<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"出版日期:%d-%d-%d\n"</span><span class="token punctuation">,</span>book<span class="token punctuation">.</span>date<span class="token punctuation">.</span>year<span class="token punctuation">,</span>book<span class="token punctuation">.</span>date<span class="token punctuation">.</span>month<span class="token punctuation">,</span>book<span class="token punctuation">.</span>date<span class="token punctuation">.</span>day<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"出版商:%s\n"</span><span class="token punctuation">,</span>book<span class="token punctuation">.</span>publisher<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">struct</span> <span class="token class-name">Book</span> b1<span class="token punctuation">,</span>b2<span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请录入第一本书的信息...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  b1<span class="token operator">=</span><span class="token function">getinput</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请录入第二本书的信息...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  b2<span class="token operator">=</span><span class="token function">getinput</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n\n录入完毕,现在开始打印验证...\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"打印第一本书的信息...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printBook</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"打印第二本书的信息...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printBook</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="传递指向结构体变量的指针"><a href="#传递指向结构体变量的指针" class="headerlink" title="传递指向结构体变量的指针"></a>传递指向结构体变量的指针</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">struct</span> <span class="token class-name">Date</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> year<span class="token punctuation">;</span>  <span class="token keyword">int</span> month<span class="token punctuation">;</span>  <span class="token keyword">int</span> day<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Book</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> title<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//书名</span>  <span class="token keyword">char</span> author<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//作者</span>  <span class="token keyword">float</span> price<span class="token punctuation">;</span><span class="token comment">//价格</span>  <span class="token keyword">struct</span> <span class="token class-name">Date</span> date<span class="token punctuation">;</span><span class="token comment">//出版日期</span>  <span class="token keyword">char</span> publisher<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//出版商</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">getinput</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Book</span> <span class="token operator">*</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">printBook</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Book</span> <span class="token operator">*</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">getinput</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Book</span> <span class="token operator">*</span>book<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入书名:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>book<span class="token operator">-&gt;</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入作者:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>book<span class="token operator">-&gt;</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入售价:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%f"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>book<span class="token operator">-&gt;</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入出版日期:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d-%d-%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>book<span class="token operator">-&gt;</span>date<span class="token punctuation">.</span>year<span class="token punctuation">,</span><span class="token operator">&amp;</span>book<span class="token operator">-&gt;</span>date<span class="token punctuation">.</span>month<span class="token punctuation">,</span><span class="token operator">&amp;</span>book<span class="token operator">-&gt;</span>date<span class="token punctuation">.</span>day<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入出版社:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>book<span class="token operator">-&gt;</span>publisher<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> book<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">printBook</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Book</span> <span class="token operator">*</span>book<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"书名:%s\n"</span><span class="token punctuation">,</span>book<span class="token operator">-&gt;</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"作者:%s\n"</span><span class="token punctuation">,</span>book<span class="token operator">-&gt;</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"售价:%.2f\n"</span><span class="token punctuation">,</span>book<span class="token operator">-&gt;</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"出版日期:%d-%d-%d\n"</span><span class="token punctuation">,</span>book<span class="token operator">-&gt;</span>date<span class="token punctuation">.</span>year<span class="token punctuation">,</span>book<span class="token operator">-&gt;</span>date<span class="token punctuation">.</span>month<span class="token punctuation">,</span>book<span class="token operator">-&gt;</span>date<span class="token punctuation">.</span>day<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"出版商:%s\n"</span><span class="token punctuation">,</span>book<span class="token operator">-&gt;</span>publisher<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">struct</span> <span class="token class-name">Book</span> b1<span class="token punctuation">,</span>b2<span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请录入第一本书的信息...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">getinput</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请录入第二本书的信息...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">getinput</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n\n录入完毕,现在开始打印验证...\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"打印第一本书的信息...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printBook</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"打印第二本书的信息...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printBook</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="动态的申请结构体"><a href="#动态的申请结构体" class="headerlink" title="动态的申请结构体"></a>动态的申请结构体</h2><p>使用malloc函数为结构体分配存储空间</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>stdlib<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">struct</span> <span class="token class-name">Date</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> year<span class="token punctuation">;</span>  <span class="token keyword">int</span> month<span class="token punctuation">;</span>  <span class="token keyword">int</span> day<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Book</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> title<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//书名</span>  <span class="token keyword">char</span> author<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//作者</span>  <span class="token keyword">float</span> price<span class="token punctuation">;</span><span class="token comment">//价格</span>  <span class="token keyword">struct</span> <span class="token class-name">Date</span> date<span class="token punctuation">;</span><span class="token comment">//出版日期</span>  <span class="token keyword">char</span> publisher<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//出版商</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">getinput</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Book</span> <span class="token operator">*</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">printBook</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Book</span> <span class="token operator">*</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">getinput</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Book</span> <span class="token operator">*</span>book<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入书名:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>book<span class="token operator">-&gt;</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入作者:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>book<span class="token operator">-&gt;</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入售价:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%f"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>book<span class="token operator">-&gt;</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入出版日期:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d-%d-%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>book<span class="token operator">-&gt;</span>date<span class="token punctuation">.</span>year<span class="token punctuation">,</span><span class="token operator">&amp;</span>book<span class="token operator">-&gt;</span>date<span class="token punctuation">.</span>month<span class="token punctuation">,</span><span class="token operator">&amp;</span>book<span class="token operator">-&gt;</span>date<span class="token punctuation">.</span>day<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入出版社:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>book<span class="token operator">-&gt;</span>publisher<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> book<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">printBook</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Book</span> <span class="token operator">*</span>book<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"书名:%s\n"</span><span class="token punctuation">,</span>book<span class="token operator">-&gt;</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"作者:%s\n"</span><span class="token punctuation">,</span>book<span class="token operator">-&gt;</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"售价:%.2f\n"</span><span class="token punctuation">,</span>book<span class="token operator">-&gt;</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"出版日期:%d-%d-%d\n"</span><span class="token punctuation">,</span>book<span class="token operator">-&gt;</span>date<span class="token punctuation">.</span>year<span class="token punctuation">,</span>book<span class="token operator">-&gt;</span>date<span class="token punctuation">.</span>month<span class="token punctuation">,</span>book<span class="token operator">-&gt;</span>date<span class="token punctuation">.</span>day<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"出版商:%s\n"</span><span class="token punctuation">,</span>book<span class="token operator">-&gt;</span>publisher<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">struct</span> <span class="token class-name">Book</span> <span class="token operator">*</span>b1<span class="token punctuation">,</span><span class="token operator">*</span>b2<span class="token punctuation">;</span>  b1<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Book</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Book</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  b2<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Book</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Book</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>b1 <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> b2 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"内存分配失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请录入第一本书的信息...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">getinput</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请录入第二本书的信息...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">getinput</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n\n录入完毕,现在开始打印验证...\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"打印第一本书的信息...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printBook</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"打印第二本书的信息...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printBook</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">free</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">free</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><p><img src="/images/614-C语言程序设计/image-20210621205336503-1624280018703.png" alt="image-20210621205336503"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token keyword">struct</span> <span class="token class-name">Book</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> title<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> author<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">struct</span> <span class="token class-name">Book</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="如何在单链表中插入元素呢"><a href="#如何在单链表中插入元素呢" class="headerlink" title="如何在单链表中插入元素呢?"></a>如何在单链表中插入元素呢?</h3><p><img src="/images/614-C语言程序设计/image-20210621205840022-1624280323269.png" alt="image-20210621205840022"></p><h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><h1 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h1><h1 id="其它知识拓展"><a href="#其它知识拓展" class="headerlink" title="其它知识拓展"></a>其它知识拓展</h1><h2 id="左值和右值"><a href="#左值和右值" class="headerlink" title="左值和右值"></a>左值和右值</h2><p>指针和数组</p><p>指针数组和数组指针</p><p>指针和二维数组</p><h1 id="debug常见错误"><a href="#debug常见错误" class="headerlink" title="debug常见错误"></a>debug常见错误</h1><div class="table-container"><table><thead><tr><th>中英文符号串用</th></tr></thead><tbody><tr><td>scanf格式使用错误”内格式错误”，漏取地址符&amp;</td></tr><tr><td>；漏用或多用，语句后必须由；if和预处理命令后没有；</td></tr><tr><td>文件名错误导致无法调试，带空格或中文</td></tr><tr><td>数据类型不匹配</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程语言 </tag>
            
            <tag> C语言程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
